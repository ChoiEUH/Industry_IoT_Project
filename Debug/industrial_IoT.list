
industrial_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c564  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800c708  0800c708  0000d708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc3c  0800cc3c  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc3c  0800cc3c  0000dc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc44  0800cc44  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc44  0800cc44  0000dc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc48  0800cc48  0000dc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cc4c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f04  200001d8  0800ce24  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050dc  0800ce24  0000f0dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5a6  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003635  00000000  00000000  000287ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  0002bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132e  00000000  00000000  0002d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e85  00000000  00000000  0002e986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afef  00000000  00000000  0003380b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8c89  00000000  00000000  0004e7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a4c  00000000  00000000  000f74c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000fef14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c6ec 	.word	0x0800c6ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800c6ec 	.word	0x0800c6ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <delay_us>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
	htim1.Instance-> CNT = 0;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <delay_us+0x30>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
	while(htim1.Instance->CNT < us){}
 8000f96:	bf00      	nop
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <delay_us+0x30>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d3f9      	bcc.n	8000f98 <delay_us+0x14>
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200004fc 	.word	0x200004fc

08000fb8 <CCS_Init>:

void CCS_Init(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af04      	add	r7, sp, #16
	uint8_t drive = 0x10;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&hi2c1,CCS_ADDR,APP_START,1,NULL,0,100);
 8000fc2:	2364      	movs	r3, #100	@ 0x64
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	22f4      	movs	r2, #244	@ 0xf4
 8000fd2:	21b4      	movs	r1, #180	@ 0xb4
 8000fd4:	480a      	ldr	r0, [pc, #40]	@ (8001000 <CCS_Init+0x48>)
 8000fd6:	f002 fb29 	bl	800362c <HAL_I2C_Mem_Write>
    osDelay(100);
 8000fda:	2064      	movs	r0, #100	@ 0x64
 8000fdc:	f005 faa8 	bl	8006530 <osDelay>
	HAL_I2C_Mem_Write(&hi2c1,CCS_ADDR,MEAS_MODE,1,&drive,1,100);
 8000fe0:	2364      	movs	r3, #100	@ 0x64
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	2201      	movs	r2, #1
 8000ff0:	21b4      	movs	r1, #180	@ 0xb4
 8000ff2:	4803      	ldr	r0, [pc, #12]	@ (8001000 <CCS_Init+0x48>)
 8000ff4:	f002 fb1a 	bl	800362c <HAL_I2C_Mem_Write>

}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000454 	.word	0x20000454

08001004 <CCS_Read>:

void CCS_Read(CCS_value *C){
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af04      	add	r7, sp, #16
 800100a:	6078      	str	r0, [r7, #4]
	  if (osMutexAcquire(CCSMutex01Handle, osWaitForever) == osOK) {
 800100c:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <CCS_Read+0xe4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	4618      	mov	r0, r3
 8001016:	f005 fb2c 	bl	8006672 <osMutexAcquire>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d15f      	bne.n	80010e0 <CCS_Read+0xdc>
	uint8_t status;

	HAL_I2C_Mem_Read(&hi2c1,CCS_ADDR,STATUS,1,&status,1,100);
 8001020:	2364      	movs	r3, #100	@ 0x64
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	f107 030f 	add.w	r3, r7, #15
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2301      	movs	r3, #1
 8001030:	2200      	movs	r2, #0
 8001032:	21b4      	movs	r1, #180	@ 0xb4
 8001034:	482d      	ldr	r0, [pc, #180]	@ (80010ec <CCS_Read+0xe8>)
 8001036:	f002 fbf3 	bl	8003820 <HAL_I2C_Mem_Read>
    if((HAL_I2C_Mem_Read(&hi2c1,CCS_ADDR,STATUS,1,&status,1,100)) != HAL_OK){
 800103a:	2364      	movs	r3, #100	@ 0x64
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 030f 	add.w	r3, r7, #15
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2200      	movs	r2, #0
 800104c:	21b4      	movs	r1, #180	@ 0xb4
 800104e:	4827      	ldr	r0, [pc, #156]	@ (80010ec <CCS_Read+0xe8>)
 8001050:	f002 fbe6 	bl	8003820 <HAL_I2C_Mem_Read>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <CCS_Read+0x5a>
    	Error_Handler();
 800105a:	f000 fd33 	bl	8001ac4 <Error_Handler>
    }
	if(status & 0x08){
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d036      	beq.n	80010d6 <CCS_Read+0xd2>
		HAL_I2C_Mem_Read(&hi2c1,CCS_ADDR,READ_DATA,1,C->tvoc_data,8,100);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3304      	adds	r3, #4
 800106c:	2264      	movs	r2, #100	@ 0x64
 800106e:	9202      	str	r2, [sp, #8]
 8001070:	2208      	movs	r2, #8
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2202      	movs	r2, #2
 800107a:	21b4      	movs	r1, #180	@ 0xb4
 800107c:	481b      	ldr	r0, [pc, #108]	@ (80010ec <CCS_Read+0xe8>)
 800107e:	f002 fbcf 	bl	8003820 <HAL_I2C_Mem_Read>
		  C->eCO2 = ((uint16_t)C->tvoc_data[0] << 8) | C->tvoc_data[1];
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	791b      	ldrb	r3, [r3, #4]
 8001086:	b21b      	sxth	r3, r3
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	795b      	ldrb	r3, [r3, #5]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	805a      	strh	r2, [r3, #2]
	      C->TVOC = ((uint16_t)C->tvoc_data[2] << 8) | C->tvoc_data[3];
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	799b      	ldrb	r3, [r3, #6]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	79db      	ldrb	r3, [r3, #7]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	801a      	strh	r2, [r3, #0]
	      sprintf(buf, "eCO2: %d ppm, TVOC: %d ppb\r\n", C->eCO2, C->TVOC);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	885b      	ldrh	r3, [r3, #2]
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	490b      	ldr	r1, [pc, #44]	@ (80010f0 <CCS_Read+0xec>)
 80010c2:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <CCS_Read+0xf0>)
 80010c4:	f009 f9e0 	bl	800a488 <siprintf>
	      osMessageQueuePut(uartQueue01Handle, buf, 0, 0);
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <CCS_Read+0xf4>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	2200      	movs	r2, #0
 80010d0:	4908      	ldr	r1, [pc, #32]	@ (80010f4 <CCS_Read+0xf0>)
 80010d2:	f005 fbc9 	bl	8006868 <osMessageQueuePut>
	}
	osMutexRelease(CCSMutex01Handle);
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <CCS_Read+0xe4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f005 fb14 	bl	8006708 <osMutexRelease>
}
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000630 	.word	0x20000630
 80010ec:	20000454 	.word	0x20000454
 80010f0:	0800c758 	.word	0x0800c758
 80010f4:	20000218 	.word	0x20000218
 80010f8:	2000062c 	.word	0x2000062c
 80010fc:	00000000 	.word	0x00000000

08001100 <SHT_Read>:

void SHT_Read(SHT_value *S){
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af02      	add	r7, sp, #8
 8001106:	6078      	str	r0, [r7, #4]
	 if (osMutexAcquire(SHTMutex02Handle, osWaitForever) == osOK) {
 8001108:	4b5f      	ldr	r3, [pc, #380]	@ (8001288 <SHT_Read+0x188>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	4618      	mov	r0, r3
 8001112:	f005 faae 	bl	8006672 <osMutexAcquire>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	f040 80a9 	bne.w	8001270 <SHT_Read+0x170>
	uint16_t cmd[2] = {MSB,LSB};
 800111e:	2324      	movs	r3, #36	@ 0x24
 8001120:	81bb      	strh	r3, [r7, #12]
 8001122:	2300      	movs	r3, #0
 8001124:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c3,SHT_ADDR,cmd,2,100);
 8001126:	f107 020c 	add.w	r2, r7, #12
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2302      	movs	r3, #2
 8001130:	2188      	movs	r1, #136	@ 0x88
 8001132:	4856      	ldr	r0, [pc, #344]	@ (800128c <SHT_Read+0x18c>)
 8001134:	f001 ff4a 	bl	8002fcc <HAL_I2C_Master_Transmit>
   osDelay(15);
 8001138:	200f      	movs	r0, #15
 800113a:	f005 f9f9 	bl	8006530 <osDelay>
    HAL_I2C_Master_Receive(&hi2c3,SHT_ADDR,S->SHT_data,6,100);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f103 020c 	add.w	r2, r3, #12
 8001144:	2364      	movs	r3, #100	@ 0x64
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2306      	movs	r3, #6
 800114a:	2188      	movs	r1, #136	@ 0x88
 800114c:	484f      	ldr	r0, [pc, #316]	@ (800128c <SHT_Read+0x18c>)
 800114e:	f002 f83b 	bl	80031c8 <HAL_I2C_Master_Receive>

    if((HAL_I2C_Master_Transmit(&hi2c3,SHT_ADDR,cmd,2,100)) != HAL_OK){
 8001152:	f107 020c 	add.w	r2, r7, #12
 8001156:	2364      	movs	r3, #100	@ 0x64
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2302      	movs	r3, #2
 800115c:	2188      	movs	r1, #136	@ 0x88
 800115e:	484b      	ldr	r0, [pc, #300]	@ (800128c <SHT_Read+0x18c>)
 8001160:	f001 ff34 	bl	8002fcc <HAL_I2C_Master_Transmit>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SHT_Read+0x6e>
    	Error_Handler();
 800116a:	f000 fcab 	bl	8001ac4 <Error_Handler>
    }

	  S->rtemp = (uint16_t)(S->SHT_data[0]<<8) | S->SHT_data[1];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b1b      	ldrb	r3, [r3, #12]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b29b      	uxth	r3, r3
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	7b52      	ldrb	r2, [r2, #13]
 800117a:	4313      	orrs	r3, r2
 800117c:	b29a      	uxth	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	801a      	strh	r2, [r3, #0]
	  S->rhumi = (uint16_t)(S->SHT_data[3]<<8) | S->SHT_data[4];
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7bdb      	ldrb	r3, [r3, #15]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b29b      	uxth	r3, r3
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	7c12      	ldrb	r2, [r2, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	b29a      	uxth	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	805a      	strh	r2, [r3, #2]

	  S->temp = -45 + 175 * ((float)S->rtemp / 65535.0);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	ee17 0a90 	vmov	r0, s15
 80011a6:	f7ff f9d7 	bl	8000558 <__aeabi_f2d>
 80011aa:	a333      	add	r3, pc, #204	@ (adr r3, 8001278 <SHT_Read+0x178>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff fb54 	bl	800085c <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	a330      	add	r3, pc, #192	@ (adr r3, 8001280 <SHT_Read+0x180>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff fa21 	bl	8000608 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <SHT_Read+0x190>)
 80011d4:	f7ff f860 	bl	8000298 <__aeabi_dsub>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fcea 	bl	8000bb8 <__aeabi_d2f>
 80011e4:	4602      	mov	r2, r0
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	605a      	str	r2, [r3, #4]
	  S->humi = 100 * ((float)S->rhumi / 65535.0);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	885b      	ldrh	r3, [r3, #2]
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f6:	ee17 0a90 	vmov	r0, s15
 80011fa:	f7ff f9ad 	bl	8000558 <__aeabi_f2d>
 80011fe:	a31e      	add	r3, pc, #120	@ (adr r3, 8001278 <SHT_Read+0x178>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fb2a 	bl	800085c <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <SHT_Read+0x194>)
 8001216:	f7ff f9f7 	bl	8000608 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fcc9 	bl	8000bb8 <__aeabi_d2f>
 8001226:	4602      	mov	r2, r0
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	609a      	str	r2, [r3, #8]
	      sprintf(buf, "Temp: %.2f C, Humi: %.2f %%\r\n", S->temp, S->humi);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f991 	bl	8000558 <__aeabi_f2d>
 8001236:	4604      	mov	r4, r0
 8001238:	460d      	mov	r5, r1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f98a 	bl	8000558 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9cd 2300 	strd	r2, r3, [sp]
 800124c:	4622      	mov	r2, r4
 800124e:	462b      	mov	r3, r5
 8001250:	4911      	ldr	r1, [pc, #68]	@ (8001298 <SHT_Read+0x198>)
 8001252:	4812      	ldr	r0, [pc, #72]	@ (800129c <SHT_Read+0x19c>)
 8001254:	f009 f918 	bl	800a488 <siprintf>
	 osMessageQueuePut(uartQueue01Handle, buf, 0, 0);
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <SHT_Read+0x1a0>)
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	2300      	movs	r3, #0
 800125e:	2200      	movs	r2, #0
 8001260:	490e      	ldr	r1, [pc, #56]	@ (800129c <SHT_Read+0x19c>)
 8001262:	f005 fb01 	bl	8006868 <osMessageQueuePut>
    osMutexRelease(SHTMutex02Handle);
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <SHT_Read+0x188>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f005 fa4c 	bl	8006708 <osMutexRelease>
	 }
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	00000000 	.word	0x00000000
 800127c:	40efffe0 	.word	0x40efffe0
 8001280:	00000000 	.word	0x00000000
 8001284:	4065e000 	.word	0x4065e000
 8001288:	20000634 	.word	0x20000634
 800128c:	200004a8 	.word	0x200004a8
 8001290:	40468000 	.word	0x40468000
 8001294:	40590000 	.word	0x40590000
 8001298:	0800c778 	.word	0x0800c778
 800129c:	20000218 	.word	0x20000218
 80012a0:	2000062c 	.word	0x2000062c

080012a4 <DUST_Read>:

void DUST_Read(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	 GPIOB->ODR &= ~(0x0040);
 80012a8:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <DUST_Read+0x60>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	4a15      	ldr	r2, [pc, #84]	@ (8001304 <DUST_Read+0x60>)
 80012ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012b2:	6153      	str	r3, [r2, #20]
     delay_us(280);
 80012b4:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80012b8:	f7ff fe64 	bl	8000f84 <delay_us>
     ADC1->CR1 = 0x00000020;
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <DUST_Read+0x64>)
 80012be:	2220      	movs	r2, #32
 80012c0:	605a      	str	r2, [r3, #4]
	 ADC1->CR2 = 0x40000001;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <DUST_Read+0x64>)
 80012c4:	4a11      	ldr	r2, [pc, #68]	@ (800130c <DUST_Read+0x68>)
 80012c6:	609a      	str	r2, [r3, #8]
     delay_us(40);
 80012c8:	2028      	movs	r0, #40	@ 0x28
 80012ca:	f7ff fe5b 	bl	8000f84 <delay_us>
	 GPIOB->ODR |= 0x0040;
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <DUST_Read+0x60>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001304 <DUST_Read+0x60>)
 80012d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012d8:	6153      	str	r3, [r2, #20]
	 delay_us(9680);
 80012da:	f242 50d0 	movw	r0, #9680	@ 0x25d0
 80012de:	f7ff fe51 	bl	8000f84 <delay_us>
	 sprintf(buf,"%d\r\n",dust);
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <DUST_Read+0x6c>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	490a      	ldr	r1, [pc, #40]	@ (8001314 <DUST_Read+0x70>)
 80012ea:	480b      	ldr	r0, [pc, #44]	@ (8001318 <DUST_Read+0x74>)
 80012ec:	f009 f8cc 	bl	800a488 <siprintf>
     osMessageQueuePut(uartQueue01Handle, buf, 0, 0);
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <DUST_Read+0x78>)
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	2200      	movs	r2, #0
 80012f8:	4907      	ldr	r1, [pc, #28]	@ (8001318 <DUST_Read+0x74>)
 80012fa:	f005 fab5 	bl	8006868 <osMessageQueuePut>

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020400 	.word	0x40020400
 8001308:	40012000 	.word	0x40012000
 800130c:	40000001 	.word	0x40000001
 8001310:	20000214 	.word	0x20000214
 8001314:	0800c798 	.word	0x0800c798
 8001318:	20000218 	.word	0x20000218
 800131c:	2000062c 	.word	0x2000062c

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 ff56 	bl	80021d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f874 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 fab0 	bl	8001890 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001330:	f000 fa5a 	bl	80017e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001334:	f000 f8d8 	bl	80014e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001338:	f000 f930 	bl	800159c <MX_I2C1_Init>
  MX_I2C3_Init();
 800133c:	f000 f95c 	bl	80015f8 <MX_I2C3_Init>
  MX_TIM1_Init();
 8001340:	f000 f988 	bl	8001654 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001344:	f000 fa7a 	bl	800183c <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8001348:	f000 fa24 	bl	8001794 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CR1 = 0x0001;
 800134c:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <main+0xa8>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001352:	f005 f811 	bl	8006378 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CCSMutex01 */
  CCSMutex01Handle = osMutexNew(&CCSMutex01_attributes);
 8001356:	481d      	ldr	r0, [pc, #116]	@ (80013cc <main+0xac>)
 8001358:	f005 f905 	bl	8006566 <osMutexNew>
 800135c:	4603      	mov	r3, r0
 800135e:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <main+0xb0>)
 8001360:	6013      	str	r3, [r2, #0]

  /* creation of SHTMutex02 */
  SHTMutex02Handle = osMutexNew(&SHTMutex02_attributes);
 8001362:	481c      	ldr	r0, [pc, #112]	@ (80013d4 <main+0xb4>)
 8001364:	f005 f8ff 	bl	8006566 <osMutexNew>
 8001368:	4603      	mov	r3, r0
 800136a:	4a1b      	ldr	r2, [pc, #108]	@ (80013d8 <main+0xb8>)
 800136c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartQueue01 */
  uartQueue01Handle = osMessageQueueNew (16, sizeof(buf), &uartQueue01_attributes);
 800136e:	4a1b      	ldr	r2, [pc, #108]	@ (80013dc <main+0xbc>)
 8001370:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001374:	2010      	movs	r0, #16
 8001376:	f005 fa04 	bl	8006782 <osMessageQueueNew>
 800137a:	4603      	mov	r3, r0
 800137c:	4a18      	ldr	r2, [pc, #96]	@ (80013e0 <main+0xc0>)
 800137e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(i2cTask, NULL, &I2CTask_attributes);
 8001380:	4a18      	ldr	r2, [pc, #96]	@ (80013e4 <main+0xc4>)
 8001382:	2100      	movs	r1, #0
 8001384:	4818      	ldr	r0, [pc, #96]	@ (80013e8 <main+0xc8>)
 8001386:	f005 f841 	bl	800640c <osThreadNew>
 800138a:	4603      	mov	r3, r0
 800138c:	4a17      	ldr	r2, [pc, #92]	@ (80013ec <main+0xcc>)
 800138e:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(adcTask, NULL, &ADCTask_attributes);
 8001390:	4a17      	ldr	r2, [pc, #92]	@ (80013f0 <main+0xd0>)
 8001392:	2100      	movs	r1, #0
 8001394:	4817      	ldr	r0, [pc, #92]	@ (80013f4 <main+0xd4>)
 8001396:	f005 f839 	bl	800640c <osThreadNew>
 800139a:	4603      	mov	r3, r0
 800139c:	4a16      	ldr	r2, [pc, #88]	@ (80013f8 <main+0xd8>)
 800139e:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(UsartTask, NULL, &printTask_attributes);
 80013a0:	4a16      	ldr	r2, [pc, #88]	@ (80013fc <main+0xdc>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	4816      	ldr	r0, [pc, #88]	@ (8001400 <main+0xe0>)
 80013a6:	f005 f831 	bl	800640c <osThreadNew>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a15      	ldr	r2, [pc, #84]	@ (8001404 <main+0xe4>)
 80013ae:	6013      	str	r3, [r2, #0]

  /* creation of BluetoothTask */
  BluetoothTaskHandle = osThreadNew(BTTask, NULL, &BluetoothTask_attributes);
 80013b0:	4a15      	ldr	r2, [pc, #84]	@ (8001408 <main+0xe8>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	4815      	ldr	r0, [pc, #84]	@ (800140c <main+0xec>)
 80013b6:	f005 f829 	bl	800640c <osThreadNew>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <main+0xf0>)
 80013be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013c0:	f004 fffe 	bl	80063c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <main+0xa4>
 80013c8:	40010000 	.word	0x40010000
 80013cc:	0800c88c 	.word	0x0800c88c
 80013d0:	20000630 	.word	0x20000630
 80013d4:	0800c89c 	.word	0x0800c89c
 80013d8:	20000634 	.word	0x20000634
 80013dc:	0800c874 	.word	0x0800c874
 80013e0:	2000062c 	.word	0x2000062c
 80013e4:	0800c7e4 	.word	0x0800c7e4
 80013e8:	08001999 	.word	0x08001999
 80013ec:	2000061c 	.word	0x2000061c
 80013f0:	0800c808 	.word	0x0800c808
 80013f4:	080019c5 	.word	0x080019c5
 80013f8:	20000620 	.word	0x20000620
 80013fc:	0800c82c 	.word	0x0800c82c
 8001400:	080019dd 	.word	0x080019dd
 8001404:	20000624 	.word	0x20000624
 8001408:	0800c850 	.word	0x0800c850
 800140c:	08001a21 	.word	0x08001a21
 8001410:	20000628 	.word	0x20000628

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	@ 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	2230      	movs	r2, #48	@ 0x30
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f009 f895 	bl	800a552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <SystemClock_Config+0xcc>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	4a27      	ldr	r2, [pc, #156]	@ (80014e0 <SystemClock_Config+0xcc>)
 8001442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001446:	6413      	str	r3, [r2, #64]	@ 0x40
 8001448:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <SystemClock_Config+0xcc>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <SystemClock_Config+0xd0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a21      	ldr	r2, [pc, #132]	@ (80014e4 <SystemClock_Config+0xd0>)
 800145e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <SystemClock_Config+0xd0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001474:	2301      	movs	r3, #1
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001478:	2310      	movs	r3, #16
 800147a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147c:	2302      	movs	r3, #2
 800147e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001484:	2308      	movs	r3, #8
 8001486:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001488:	2364      	movs	r3, #100	@ 0x64
 800148a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800148c:	2302      	movs	r3, #2
 800148e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001490:	2304      	movs	r3, #4
 8001492:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	4618      	mov	r0, r3
 800149a:	f003 f8f7 	bl	800468c <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014a4:	f000 fb0e 	bl	8001ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ac:	2302      	movs	r3, #2
 80014ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	2103      	movs	r1, #3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fb58 	bl	8004b7c <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014d2:	f000 faf7 	bl	8001ac4 <Error_Handler>
  }
}
 80014d6:	bf00      	nop
 80014d8:	3750      	adds	r7, #80	@ 0x50
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014fa:	4b25      	ldr	r3, [pc, #148]	@ (8001590 <MX_ADC1_Init+0xa8>)
 80014fc:	4a25      	ldr	r2, [pc, #148]	@ (8001594 <MX_ADC1_Init+0xac>)
 80014fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001500:	4b23      	ldr	r3, [pc, #140]	@ (8001590 <MX_ADC1_Init+0xa8>)
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001506:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <MX_ADC1_Init+0xa8>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800150c:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <MX_ADC1_Init+0xa8>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001512:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <MX_ADC1_Init+0xa8>)
 8001514:	2200      	movs	r2, #0
 8001516:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <MX_ADC1_Init+0xa8>)
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <MX_ADC1_Init+0xa8>)
 8001522:	2200      	movs	r2, #0
 8001524:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001526:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <MX_ADC1_Init+0xa8>)
 8001528:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <MX_ADC1_Init+0xb0>)
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <MX_ADC1_Init+0xa8>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <MX_ADC1_Init+0xa8>)
 8001534:	2201      	movs	r2, #1
 8001536:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_ADC1_Init+0xa8>)
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <MX_ADC1_Init+0xa8>)
 8001542:	2201      	movs	r2, #1
 8001544:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001546:	4812      	ldr	r0, [pc, #72]	@ (8001590 <MX_ADC1_Init+0xa8>)
 8001548:	f000 feda 	bl	8002300 <HAL_ADC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001552:	f000 fab7 	bl	8001ac4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001556:	2304      	movs	r3, #4
 8001558:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800155a:	2301      	movs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	4619      	mov	r1, r3
 8001566:	480a      	ldr	r0, [pc, #40]	@ (8001590 <MX_ADC1_Init+0xa8>)
 8001568:	f000 ff0e 	bl	8002388 <HAL_ADC_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001572:	f000 faa7 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2012      	movs	r0, #18
 800157c:	f001 fa0d 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001580:	2012      	movs	r0, #18
 8001582:	f001 fa26 	bl	80029d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000040c 	.word	0x2000040c
 8001594:	40012000 	.word	0x40012000
 8001598:	0f000001 	.word	0x0f000001

0800159c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015a2:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <MX_I2C1_Init+0x54>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015a8:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <MX_I2C1_Init+0x58>)
 80015aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015da:	f001 fbb3 	bl	8002d44 <HAL_I2C_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e4:	f000 fa6e 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000454 	.word	0x20000454
 80015f0:	40005400 	.word	0x40005400
 80015f4:	000186a0 	.word	0x000186a0

080015f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <MX_I2C3_Init+0x50>)
 80015fe:	4a13      	ldr	r2, [pc, #76]	@ (800164c <MX_I2C3_Init+0x54>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001604:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <MX_I2C3_Init+0x58>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_I2C3_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001616:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800161a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <MX_I2C3_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <MX_I2C3_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001636:	f001 fb85 	bl	8002d44 <HAL_I2C_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001640:	f000 fa40 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200004a8 	.word	0x200004a8
 800164c:	40005c00 	.word	0x40005c00
 8001650:	000186a0 	.word	0x000186a0

08001654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b096      	sub	sp, #88	@ 0x58
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
 8001682:	615a      	str	r2, [r3, #20]
 8001684:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2220      	movs	r2, #32
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f008 ff60 	bl	800a552 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001692:	4b3e      	ldr	r3, [pc, #248]	@ (800178c <MX_TIM1_Init+0x138>)
 8001694:	4a3e      	ldr	r2, [pc, #248]	@ (8001790 <MX_TIM1_Init+0x13c>)
 8001696:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001698:	4b3c      	ldr	r3, [pc, #240]	@ (800178c <MX_TIM1_Init+0x138>)
 800169a:	2263      	movs	r2, #99	@ 0x63
 800169c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b3b      	ldr	r3, [pc, #236]	@ (800178c <MX_TIM1_Init+0x138>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80016a4:	4b39      	ldr	r3, [pc, #228]	@ (800178c <MX_TIM1_Init+0x138>)
 80016a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80016aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	4b37      	ldr	r3, [pc, #220]	@ (800178c <MX_TIM1_Init+0x138>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b2:	4b36      	ldr	r3, [pc, #216]	@ (800178c <MX_TIM1_Init+0x138>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <MX_TIM1_Init+0x138>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016be:	4833      	ldr	r0, [pc, #204]	@ (800178c <MX_TIM1_Init+0x138>)
 80016c0:	f003 fc7c 	bl	8004fbc <HAL_TIM_Base_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016ca:	f000 f9fb 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016d8:	4619      	mov	r1, r3
 80016da:	482c      	ldr	r0, [pc, #176]	@ (800178c <MX_TIM1_Init+0x138>)
 80016dc:	f003 fdd8 	bl	8005290 <HAL_TIM_ConfigClockSource>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016e6:	f000 f9ed 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016ea:	4828      	ldr	r0, [pc, #160]	@ (800178c <MX_TIM1_Init+0x138>)
 80016ec:	f003 fcb5 	bl	800505a <HAL_TIM_PWM_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016f6:	f000 f9e5 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001702:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001706:	4619      	mov	r1, r3
 8001708:	4820      	ldr	r0, [pc, #128]	@ (800178c <MX_TIM1_Init+0x138>)
 800170a:	f004 f935 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001714:	f000 f9d6 	bl	8001ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001718:	2360      	movs	r3, #96	@ 0x60
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001738:	2204      	movs	r2, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4813      	ldr	r0, [pc, #76]	@ (800178c <MX_TIM1_Init+0x138>)
 800173e:	f003 fce5 	bl	800510c <HAL_TIM_PWM_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001748:	f000 f9bc 	bl	8001ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001760:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001764:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4807      	ldr	r0, [pc, #28]	@ (800178c <MX_TIM1_Init+0x138>)
 8001770:	f004 f970 	bl	8005a54 <HAL_TIMEx_ConfigBreakDeadTime>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800177a:	f000 f9a3 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800177e:	4803      	ldr	r0, [pc, #12]	@ (800178c <MX_TIM1_Init+0x138>)
 8001780:	f000 fafc 	bl	8001d7c <HAL_TIM_MspPostInit>

}
 8001784:	bf00      	nop
 8001786:	3758      	adds	r7, #88	@ 0x58
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200004fc 	.word	0x200004fc
 8001790:	40010000 	.word	0x40010000

08001794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <MX_USART1_UART_Init+0x4c>)
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <MX_USART1_UART_Init+0x50>)
 800179c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017cc:	f004 f994 	bl	8005af8 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017d6:	f000 f975 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000544 	.word	0x20000544
 80017e4:	40011000 	.word	0x40011000

080017e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <MX_USART2_UART_Init+0x4c>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <MX_USART2_UART_Init+0x50>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017f2:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <MX_USART2_UART_Init+0x4c>)
 80017f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <MX_USART2_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <MX_USART2_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <MX_USART2_UART_Init+0x4c>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <MX_USART2_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <MX_USART2_UART_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_USART2_UART_Init+0x4c>)
 8001820:	f004 f96a 	bl	8005af8 <HAL_UART_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800182a:	f000 f94b 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000058c 	.word	0x2000058c
 8001838:	40004400 	.word	0x40004400

0800183c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <MX_USART6_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <MX_USART6_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <MX_USART6_UART_Init+0x4c>)
 8001848:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800184c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <MX_USART6_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <MX_USART6_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <MX_USART6_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <MX_USART6_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <MX_USART6_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <MX_USART6_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	@ (8001888 <MX_USART6_UART_Init+0x4c>)
 8001874:	f004 f940 	bl	8005af8 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f000 f921 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200005d4 	.word	0x200005d4
 800188c:	40011400 	.word	0x40011400

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	@ 0x28
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b37      	ldr	r3, [pc, #220]	@ (8001988 <MX_GPIO_Init+0xf8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a36      	ldr	r2, [pc, #216]	@ (8001988 <MX_GPIO_Init+0xf8>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b34      	ldr	r3, [pc, #208]	@ (8001988 <MX_GPIO_Init+0xf8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <MX_GPIO_Init+0xf8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001988 <MX_GPIO_Init+0xf8>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001988 <MX_GPIO_Init+0xf8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <MX_GPIO_Init+0xf8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a28      	ldr	r2, [pc, #160]	@ (8001988 <MX_GPIO_Init+0xf8>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <MX_GPIO_Init+0xf8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <MX_GPIO_Init+0xf8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a21      	ldr	r2, [pc, #132]	@ (8001988 <MX_GPIO_Init+0xf8>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <MX_GPIO_Init+0xf8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2120      	movs	r1, #32
 800191a:	481c      	ldr	r0, [pc, #112]	@ (800198c <MX_GPIO_Init+0xfc>)
 800191c:	f001 f9f8 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2140      	movs	r1, #64	@ 0x40
 8001924:	481a      	ldr	r0, [pc, #104]	@ (8001990 <MX_GPIO_Init+0x100>)
 8001926:	f001 f9f3 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800192a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001930:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4814      	ldr	r0, [pc, #80]	@ (8001994 <MX_GPIO_Init+0x104>)
 8001942:	f001 f861 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001946:	2320      	movs	r3, #32
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <MX_GPIO_Init+0xfc>)
 800195e:	f001 f853 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001962:	2340      	movs	r3, #64	@ 0x40
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	2301      	movs	r3, #1
 8001968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	@ (8001990 <MX_GPIO_Init+0x100>)
 800197a:	f001 f845 	bl	8002a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	@ 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800

08001998 <i2cTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_i2cTask */
void i2cTask(void *argument)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 CCS_Init();
 80019a0:	f7ff fb0a 	bl	8000fb8 <CCS_Init>
  /* Infinite loop */
  for(;;)
  {
	  CCS_Read(&CCS);
 80019a4:	4805      	ldr	r0, [pc, #20]	@ (80019bc <i2cTask+0x24>)
 80019a6:	f7ff fb2d 	bl	8001004 <CCS_Read>
	  SHT_Read(&SHT);
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <i2cTask+0x28>)
 80019ac:	f7ff fba8 	bl	8001100 <SHT_Read>
	  osDelay(1000);
 80019b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b4:	f004 fdbc 	bl	8006530 <osDelay>
	  CCS_Read(&CCS);
 80019b8:	bf00      	nop
 80019ba:	e7f3      	b.n	80019a4 <i2cTask+0xc>
 80019bc:	200001f4 	.word	0x200001f4
 80019c0:	20000200 	.word	0x20000200

080019c4 <adcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adcTask */
void adcTask(void *argument)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adcTask */
  /* Infinite loop */
  for(;;)
  {
	  DUST_Read();
 80019cc:	f7ff fc6a 	bl	80012a4 <DUST_Read>
	  osDelay(1000);
 80019d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019d4:	f004 fdac 	bl	8006530 <osDelay>
	  DUST_Read();
 80019d8:	bf00      	nop
 80019da:	e7f7      	b.n	80019cc <adcTask+0x8>

080019dc <UsartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UsartTask */
void UsartTask(void *argument)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UsartTask */
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(uartQueue01Handle, buf, NULL, osWaitForever) == osOK) {
 80019e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <UsartTask+0x38>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	2200      	movs	r2, #0
 80019ee:	490a      	ldr	r1, [pc, #40]	@ (8001a18 <UsartTask+0x3c>)
 80019f0:	f004 ff9a 	bl	8006928 <osMessageQueueGet>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f4      	bne.n	80019e4 <UsartTask+0x8>
	  	             HAL_UART_Transmit(&huart2,(uint8_t*)buf, strlen(buf),0xFFFF);
 80019fa:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <UsartTask+0x3c>)
 80019fc:	f7fe fc40 	bl	8000280 <strlen>
 8001a00:	4603      	mov	r3, r0
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a08:	4903      	ldr	r1, [pc, #12]	@ (8001a18 <UsartTask+0x3c>)
 8001a0a:	4804      	ldr	r0, [pc, #16]	@ (8001a1c <UsartTask+0x40>)
 8001a0c:	f004 f8c4 	bl	8005b98 <HAL_UART_Transmit>
	  if (osMessageQueueGet(uartQueue01Handle, buf, NULL, osWaitForever) == osOK) {
 8001a10:	e7e8      	b.n	80019e4 <UsartTask+0x8>
 8001a12:	bf00      	nop
 8001a14:	2000062c 	.word	0x2000062c
 8001a18:	20000218 	.word	0x20000218
 8001a1c:	2000058c 	.word	0x2000058c

08001a20 <BTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BTTask */
void BTTask(void *argument)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b090      	sub	sp, #64	@ 0x40
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BTTask */
	char BTbuf[50];
  /* Infinite loop */
  for(;;)
  {
	  if(SHT.temp > 30.0 && CCS.TVOC > 600 && dust > 2000){
 8001a28:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <BTTask+0x8c>)
 8001a2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a2e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3a:	dd1e      	ble.n	8001a7a <BTTask+0x5a>
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <BTTask+0x90>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001a44:	d919      	bls.n	8001a7a <BTTask+0x5a>
 8001a46:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <BTTask+0x94>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a4e:	d914      	bls.n	8001a7a <BTTask+0x5a>
			  strcpy(BTbuf,"Warning\r\n");
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	4a18      	ldr	r2, [pc, #96]	@ (8001ab8 <BTTask+0x98>)
 8001a56:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a58:	c303      	stmia	r3!, {r0, r1}
 8001a5a:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart6,(uint8_t*)BTbuf,strlen(BTbuf),0xFFFF);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fc0d 	bl	8000280 <strlen>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	f107 010c 	add.w	r1, r7, #12
 8001a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a72:	4812      	ldr	r0, [pc, #72]	@ (8001abc <BTTask+0x9c>)
 8001a74:	f004 f890 	bl	8005b98 <HAL_UART_Transmit>
 8001a78:	e013      	b.n	8001aa2 <BTTask+0x82>
		  }
	  else{
		  strcpy(BTbuf,"default\r\n");
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	4a10      	ldr	r2, [pc, #64]	@ (8001ac0 <BTTask+0xa0>)
 8001a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a82:	c303      	stmia	r3!, {r0, r1}
 8001a84:	801a      	strh	r2, [r3, #0]
		 HAL_UART_Transmit(&huart6,(uint8_t*)BTbuf,strlen(BTbuf),0xFFFF);
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fbf8 	bl	8000280 <strlen>
 8001a90:	4603      	mov	r3, r0
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f107 010c 	add.w	r1, r7, #12
 8001a98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a9c:	4807      	ldr	r0, [pc, #28]	@ (8001abc <BTTask+0x9c>)
 8001a9e:	f004 f87b 	bl	8005b98 <HAL_UART_Transmit>
	  }
	  osDelay(1000);
 8001aa2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aa6:	f004 fd43 	bl	8006530 <osDelay>
	  if(SHT.temp > 30.0 && CCS.TVOC > 600 && dust > 2000){
 8001aaa:	e7bd      	b.n	8001a28 <BTTask+0x8>
 8001aac:	20000200 	.word	0x20000200
 8001ab0:	200001f4 	.word	0x200001f4
 8001ab4:	20000214 	.word	0x20000214
 8001ab8:	0800c7a0 	.word	0x0800c7a0
 8001abc:	200005d4 	.word	0x200005d4
 8001ac0:	0800c7ac 	.word	0x0800c7ac

08001ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
	  strcpy(buf,"i2cstatuserror\r\n");
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8001afc <Error_Handler+0x38>)
 8001aca:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <Error_Handler+0x3c>)
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2,(uint8_t*)buf,strlen(buf),0xFFFF);
 8001ad8:	4808      	ldr	r0, [pc, #32]	@ (8001afc <Error_Handler+0x38>)
 8001ada:	f7fe fbd1 	bl	8000280 <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ae6:	4905      	ldr	r1, [pc, #20]	@ (8001afc <Error_Handler+0x38>)
 8001ae8:	4806      	ldr	r0, [pc, #24]	@ (8001b04 <Error_Handler+0x40>)
 8001aea:	f004 f855 	bl	8005b98 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001aee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001af2:	f000 fbe1 	bl	80022b8 <HAL_Delay>
	  strcpy(buf,"i2cstatuserror\r\n");
 8001af6:	bf00      	nop
 8001af8:	e7e6      	b.n	8001ac8 <Error_Handler+0x4>
 8001afa:	bf00      	nop
 8001afc:	20000218 	.word	0x20000218
 8001b00:	0800c7b8 	.word	0x0800c7b8
 8001b04:	2000058c 	.word	0x2000058c

08001b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_MspInit+0x54>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a11      	ldr	r2, [pc, #68]	@ (8001b5c <HAL_MspInit+0x54>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <HAL_MspInit+0x54>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_MspInit+0x54>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <HAL_MspInit+0x54>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <HAL_MspInit+0x54>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	210f      	movs	r1, #15
 8001b4a:	f06f 0001 	mvn.w	r0, #1
 8001b4e:	f000 ff24 	bl	800299a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800

08001b60 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	@ 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bec <HAL_ADC_MspInit+0x8c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d12f      	bne.n	8001be2 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <HAL_ADC_MspInit+0x90>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <HAL_ADC_MspInit+0x90>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_ADC_MspInit+0x90>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_ADC_MspInit+0x90>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <HAL_ADC_MspInit+0x90>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <HAL_ADC_MspInit+0x90>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bba:	2310      	movs	r3, #16
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4809      	ldr	r0, [pc, #36]	@ (8001bf4 <HAL_ADC_MspInit+0x94>)
 8001bce:	f000 ff1b 	bl	8002a08 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	2012      	movs	r0, #18
 8001bd8:	f000 fedf 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001bdc:	2012      	movs	r0, #18
 8001bde:	f000 fef8 	bl	80029d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	@ 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40012000 	.word	0x40012000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08c      	sub	sp, #48	@ 0x30
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a42      	ldr	r2, [pc, #264]	@ (8001d20 <HAL_I2C_MspInit+0x128>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d12d      	bne.n	8001c76 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	4b41      	ldr	r3, [pc, #260]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a40      	ldr	r2, [pc, #256]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4835      	ldr	r0, [pc, #212]	@ (8001d28 <HAL_I2C_MspInit+0x130>)
 8001c54:	f000 fed8 	bl	8002a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	4b31      	ldr	r3, [pc, #196]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	4a30      	ldr	r2, [pc, #192]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001c62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c68:	4b2e      	ldr	r3, [pc, #184]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c74:	e050      	b.n	8001d18 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d2c <HAL_I2C_MspInit+0x134>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d14b      	bne.n	8001d18 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	4b27      	ldr	r3, [pc, #156]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	4a26      	ldr	r2, [pc, #152]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c90:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cac:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbe:	2312      	movs	r3, #18
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4816      	ldr	r0, [pc, #88]	@ (8001d30 <HAL_I2C_MspInit+0x138>)
 8001cd6:	f000 fe97 	bl	8002a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce0:	2312      	movs	r3, #18
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cec:	2304      	movs	r3, #4
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480f      	ldr	r0, [pc, #60]	@ (8001d34 <HAL_I2C_MspInit+0x13c>)
 8001cf8:	f000 fe86 	bl	8002a08 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	4a07      	ldr	r2, [pc, #28]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001d06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_I2C_MspInit+0x12c>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	3730      	adds	r7, #48	@ 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40005400 	.word	0x40005400
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40005c00 	.word	0x40005c00
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020000 	.word	0x40020000

08001d38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0b      	ldr	r2, [pc, #44]	@ (8001d74 <HAL_TIM_Base_MspInit+0x3c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d10d      	bne.n	8001d66 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_TIM_Base_MspInit+0x40>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	4a09      	ldr	r2, [pc, #36]	@ (8001d78 <HAL_TIM_Base_MspInit+0x40>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <HAL_TIM_Base_MspInit+0x40>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40023800 	.word	0x40023800

08001d7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <HAL_TIM_MspPostInit+0x68>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d11e      	bne.n	8001ddc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_TIM_MspPostInit+0x6c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a10      	ldr	r2, [pc, #64]	@ (8001de8 <HAL_TIM_MspPostInit+0x6c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <HAL_TIM_MspPostInit+0x6c>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4805      	ldr	r0, [pc, #20]	@ (8001dec <HAL_TIM_MspPostInit+0x70>)
 8001dd8:	f000 fe16 	bl	8002a08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020000 	.word	0x40020000

08001df0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08e      	sub	sp, #56	@ 0x38
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f3c <HAL_UART_MspInit+0x14c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d12d      	bne.n	8001e6e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
 8001e16:	4b4a      	ldr	r3, [pc, #296]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4a49      	ldr	r2, [pc, #292]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e1c:	f043 0310 	orr.w	r3, r3, #16
 8001e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e22:	4b47      	ldr	r3, [pc, #284]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	623b      	str	r3, [r7, #32]
 8001e2c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	4b43      	ldr	r3, [pc, #268]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a42      	ldr	r2, [pc, #264]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b40      	ldr	r3, [pc, #256]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001e4a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	4837      	ldr	r0, [pc, #220]	@ (8001f44 <HAL_UART_MspInit+0x154>)
 8001e68:	f000 fdce 	bl	8002a08 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e6c:	e062      	b.n	8001f34 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a35      	ldr	r2, [pc, #212]	@ (8001f48 <HAL_UART_MspInit+0x158>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d12c      	bne.n	8001ed2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	4b30      	ldr	r3, [pc, #192]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	4a2f      	ldr	r2, [pc, #188]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e88:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	4b29      	ldr	r3, [pc, #164]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9c:	4a28      	ldr	r2, [pc, #160]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea4:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec0:	2307      	movs	r3, #7
 8001ec2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481e      	ldr	r0, [pc, #120]	@ (8001f44 <HAL_UART_MspInit+0x154>)
 8001ecc:	f000 fd9c 	bl	8002a08 <HAL_GPIO_Init>
}
 8001ed0:	e030      	b.n	8001f34 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f4c <HAL_UART_MspInit+0x15c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d12b      	bne.n	8001f34 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee4:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001ee6:	f043 0320 	orr.w	r3, r3, #32
 8001eea:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eec:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f00:	4a0f      	ldr	r2, [pc, #60]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f08:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <HAL_UART_MspInit+0x150>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f14:	23c0      	movs	r3, #192	@ 0xc0
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f24:	2308      	movs	r3, #8
 8001f26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4808      	ldr	r0, [pc, #32]	@ (8001f50 <HAL_UART_MspInit+0x160>)
 8001f30:	f000 fd6a 	bl	8002a08 <HAL_GPIO_Init>
}
 8001f34:	bf00      	nop
 8001f36:	3738      	adds	r7, #56	@ 0x38
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40011000 	.word	0x40011000
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000
 8001f48:	40004400 	.word	0x40004400
 8001f4c:	40011400 	.word	0x40011400
 8001f50:	40020800 	.word	0x40020800

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <NMI_Handler+0x4>

08001f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <BusFault_Handler+0x4>

08001f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <UsageFault_Handler+0x4>

08001f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f8e:	f000 f973 	bl	8002278 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f92:	f006 fbe1 	bl	8008758 <xTaskGetSchedulerState>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d001      	beq.n	8001fa0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f9c:	f007 fadc 	bl	8009558 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
	if(ADC1->SR & 0x00000002){
 8001fa8:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <ADC_IRQHandler+0x24>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <ADC_IRQHandler+0x1a>
			  dust = ADC1->DR;
 8001fb4:	4b04      	ldr	r3, [pc, #16]	@ (8001fc8 <ADC_IRQHandler+0x24>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <ADC_IRQHandler+0x28>)
 8001fbc:	801a      	strh	r2, [r3, #0]
		  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40012000 	.word	0x40012000
 8001fcc:	20000214 	.word	0x20000214

08001fd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return 1;
 8001fd4:	2301      	movs	r3, #1
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_kill>:

int _kill(int pid, int sig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fea:	f008 fb05 	bl	800a5f8 <__errno>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2216      	movs	r2, #22
 8001ff2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_exit>:

void _exit (int status)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ffe7 	bl	8001fe0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002012:	bf00      	nop
 8002014:	e7fd      	b.n	8002012 <_exit+0x12>

08002016 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e00a      	b.n	800203e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002028:	f3af 8000 	nop.w
 800202c:	4601      	mov	r1, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	60ba      	str	r2, [r7, #8]
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	dbf0      	blt.n	8002028 <_read+0x12>
  }

  return len;
 8002046:	687b      	ldr	r3, [r7, #4]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e009      	b.n	8002076 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	60ba      	str	r2, [r7, #8]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	3301      	adds	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	dbf1      	blt.n	8002062 <_write+0x12>
  }
  return len;
 800207e:	687b      	ldr	r3, [r7, #4]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_close>:

int _close(int file)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020b0:	605a      	str	r2, [r3, #4]
  return 0;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_isatty>:

int _isatty(int file)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	@ (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f008 fa6a 	bl	800a5f8 <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	@ (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20020000 	.word	0x20020000
 8002150:	00000400 	.word	0x00000400
 8002154:	20000638 	.word	0x20000638
 8002158:	200050e0 	.word	0x200050e0

0800215c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <SystemInit+0x20>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002166:	4a05      	ldr	r2, [pc, #20]	@ (800217c <SystemInit+0x20>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002184:	f7ff ffea 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	@ (80021bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	@ (80021c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	@ (80021c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	@ (80021cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ae:	f008 fa29 	bl	800a604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b2:	f7ff f8b5 	bl	8001320 <main>
  bx  lr    
 80021b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80021c4:	0800cc4c 	.word	0x0800cc4c
  ldr r2, =_sbss
 80021c8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021cc:	200050dc 	.word	0x200050dc

080021d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <DMA1_Stream0_IRQHandler>
	...

080021d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_Init+0x40>)
 80021de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <HAL_Init+0x40>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a07      	ldr	r2, [pc, #28]	@ (8002214 <HAL_Init+0x40>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 fbc1 	bl	8002984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002202:	200f      	movs	r0, #15
 8002204:	f000 f808 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002208:	f7ff fc7e 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002220:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_InitTick+0x54>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_InitTick+0x58>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fbd9 	bl	80029ee <HAL_SYSTICK_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00e      	b.n	8002264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0f      	cmp	r3, #15
 800224a:	d80a      	bhi.n	8002262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224c:	2200      	movs	r2, #0
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f000 fba1 	bl	800299a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002258:	4a06      	ldr	r2, [pc, #24]	@ (8002274 <HAL_InitTick+0x5c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000000 	.word	0x20000000
 8002270:	20000008 	.word	0x20000008
 8002274:	20000004 	.word	0x20000004

08002278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x20>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_IncTick+0x24>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a04      	ldr	r2, [pc, #16]	@ (800229c <HAL_IncTick+0x24>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000008 	.word	0x20000008
 800229c:	2000063c 	.word	0x2000063c

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_GetTick+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	2000063c 	.word	0x2000063c

080022b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff ffee 	bl	80022a0 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d005      	beq.n	80022de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <HAL_Delay+0x44>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022de:	bf00      	nop
 80022e0:	f7ff ffde 	bl	80022a0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d8f7      	bhi.n	80022e0 <HAL_Delay+0x28>
  {
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000008 	.word	0x20000008

08002300 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e033      	b.n	800237e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fc1e 	bl	8001b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d118      	bne.n	8002370 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002346:	f023 0302 	bic.w	r3, r3, #2
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f94a 	bl	80025ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	641a      	str	r2, [r3, #64]	@ 0x40
 800236e:	e001      	b.n	8002374 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800237c:	7bfb      	ldrb	r3, [r7, #15]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1c>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e113      	b.n	80025cc <HAL_ADC_ConfigChannel+0x244>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b09      	cmp	r3, #9
 80023b2:	d925      	bls.n	8002400 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68d9      	ldr	r1, [r3, #12]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1e      	subs	r3, #30
 80023ca:	2207      	movs	r2, #7
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43da      	mvns	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	400a      	ands	r2, r1
 80023d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68d9      	ldr	r1, [r3, #12]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	4603      	mov	r3, r0
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4403      	add	r3, r0
 80023f2:	3b1e      	subs	r3, #30
 80023f4:	409a      	lsls	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	e022      	b.n	8002446 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6919      	ldr	r1, [r3, #16]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	2207      	movs	r2, #7
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	4603      	mov	r3, r0
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4403      	add	r3, r0
 800243c:	409a      	lsls	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b06      	cmp	r3, #6
 800244c:	d824      	bhi.n	8002498 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b05      	subs	r3, #5
 8002460:	221f      	movs	r2, #31
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	400a      	ands	r2, r1
 800246e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b05      	subs	r3, #5
 800248a:	fa00 f203 	lsl.w	r2, r0, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	635a      	str	r2, [r3, #52]	@ 0x34
 8002496:	e04c      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	d824      	bhi.n	80024ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b23      	subs	r3, #35	@ 0x23
 80024b2:	221f      	movs	r2, #31
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43da      	mvns	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	400a      	ands	r2, r1
 80024c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	3b23      	subs	r3, #35	@ 0x23
 80024dc:	fa00 f203 	lsl.w	r2, r0, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024e8:	e023      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b41      	subs	r3, #65	@ 0x41
 80024fc:	221f      	movs	r2, #31
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	400a      	ands	r2, r1
 800250a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	3b41      	subs	r3, #65	@ 0x41
 8002526:	fa00 f203 	lsl.w	r2, r0, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <HAL_ADC_ConfigChannel+0x250>)
 8002534:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a28      	ldr	r2, [pc, #160]	@ (80025dc <HAL_ADC_ConfigChannel+0x254>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d10f      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1d8>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d10b      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <HAL_ADC_ConfigChannel+0x254>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d12b      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x23a>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1c      	ldr	r2, [pc, #112]	@ (80025e0 <HAL_ADC_ConfigChannel+0x258>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d003      	beq.n	800257c <HAL_ADC_ConfigChannel+0x1f4>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b11      	cmp	r3, #17
 800257a:	d122      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <HAL_ADC_ConfigChannel+0x258>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d111      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800259e:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <HAL_ADC_ConfigChannel+0x25c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_ADC_ConfigChannel+0x260>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	0c9a      	lsrs	r2, r3, #18
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025b4:	e002      	b.n	80025bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f9      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40012300 	.word	0x40012300
 80025dc:	40012000 	.word	0x40012000
 80025e0:	10000012 	.word	0x10000012
 80025e4:	20000000 	.word	0x20000000
 80025e8:	431bde83 	.word	0x431bde83

080025ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f4:	4b79      	ldr	r3, [pc, #484]	@ (80027dc <ADC_Init+0x1f0>)
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	021a      	lsls	r2, r3, #8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267e:	4a58      	ldr	r2, [pc, #352]	@ (80027e0 <ADC_Init+0x1f4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002692:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6899      	ldr	r1, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	e00f      	b.n	80026ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0202 	bic.w	r2, r2, #2
 80026f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7e1b      	ldrb	r3, [r3, #24]
 8002704:	005a      	lsls	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01b      	beq.n	8002750 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002726:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002736:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	3b01      	subs	r3, #1
 8002744:	035a      	lsls	r2, r3, #13
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	e007      	b.n	8002760 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800276e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	3b01      	subs	r3, #1
 800277c:	051a      	lsls	r2, r3, #20
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6899      	ldr	r1, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027a2:	025a      	lsls	r2, r3, #9
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	029a      	lsls	r2, r3, #10
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40012300 	.word	0x40012300
 80027e0:	0f000001 	.word	0x0f000001

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800280c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	@ (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db0b      	blt.n	8002872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4907      	ldr	r1, [pc, #28]	@ (8002880 <__NVIC_EnableIRQ+0x38>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2001      	movs	r0, #1
 800286a:	fa00 f202 	lsl.w	r2, r0, r2
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100

08002884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	db0a      	blt.n	80028ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	490c      	ldr	r1, [pc, #48]	@ (80028d0 <__NVIC_SetPriority+0x4c>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	0112      	lsls	r2, r2, #4
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	440b      	add	r3, r1
 80028a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ac:	e00a      	b.n	80028c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4908      	ldr	r1, [pc, #32]	@ (80028d4 <__NVIC_SetPriority+0x50>)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	3b04      	subs	r3, #4
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	440b      	add	r3, r1
 80028c2:	761a      	strb	r2, [r3, #24]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000e100 	.word	0xe000e100
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	@ 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f1c3 0307 	rsb	r3, r3, #7
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	bf28      	it	cs
 80028f6:	2304      	movcs	r3, #4
 80028f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d902      	bls.n	8002908 <NVIC_EncodePriority+0x30>
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3b03      	subs	r3, #3
 8002906:	e000      	b.n	800290a <NVIC_EncodePriority+0x32>
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	401a      	ands	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002920:	f04f 31ff 	mov.w	r1, #4294967295
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43d9      	mvns	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	4313      	orrs	r3, r2
         );
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	@ 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002950:	d301      	bcc.n	8002956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002952:	2301      	movs	r3, #1
 8002954:	e00f      	b.n	8002976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <SysTick_Config+0x40>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295e:	210f      	movs	r1, #15
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	f7ff ff8e 	bl	8002884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <SysTick_Config+0x40>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <SysTick_Config+0x40>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff29 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ac:	f7ff ff3e 	bl	800282c <__NVIC_GetPriorityGrouping>
 80029b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ff8e 	bl	80028d8 <NVIC_EncodePriority>
 80029bc:	4602      	mov	r2, r0
 80029be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff5d 	bl	8002884 <__NVIC_SetPriority>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff31 	bl	8002848 <__NVIC_EnableIRQ>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffa2 	bl	8002940 <SysTick_Config>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	@ 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	e159      	b.n	8002cd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a24:	2201      	movs	r2, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	f040 8148 	bne.w	8002cd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d005      	beq.n	8002a5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d130      	bne.n	8002abc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 0201 	and.w	r2, r3, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d017      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d123      	bne.n	8002b4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3208      	adds	r2, #8
 8002b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	08da      	lsrs	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3208      	adds	r2, #8
 8002b46:	69b9      	ldr	r1, [r7, #24]
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2203      	movs	r2, #3
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0203 	and.w	r2, r3, #3
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80a2 	beq.w	8002cd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b57      	ldr	r3, [pc, #348]	@ (8002cf0 <HAL_GPIO_Init+0x2e8>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	4a56      	ldr	r2, [pc, #344]	@ (8002cf0 <HAL_GPIO_Init+0x2e8>)
 8002b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b9e:	4b54      	ldr	r3, [pc, #336]	@ (8002cf0 <HAL_GPIO_Init+0x2e8>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002baa:	4a52      	ldr	r2, [pc, #328]	@ (8002cf4 <HAL_GPIO_Init+0x2ec>)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	220f      	movs	r2, #15
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a49      	ldr	r2, [pc, #292]	@ (8002cf8 <HAL_GPIO_Init+0x2f0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d019      	beq.n	8002c0a <HAL_GPIO_Init+0x202>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a48      	ldr	r2, [pc, #288]	@ (8002cfc <HAL_GPIO_Init+0x2f4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0x1fe>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a47      	ldr	r2, [pc, #284]	@ (8002d00 <HAL_GPIO_Init+0x2f8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00d      	beq.n	8002c02 <HAL_GPIO_Init+0x1fa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a46      	ldr	r2, [pc, #280]	@ (8002d04 <HAL_GPIO_Init+0x2fc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <HAL_GPIO_Init+0x1f6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a45      	ldr	r2, [pc, #276]	@ (8002d08 <HAL_GPIO_Init+0x300>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_GPIO_Init+0x1f2>
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	e008      	b.n	8002c0c <HAL_GPIO_Init+0x204>
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	e006      	b.n	8002c0c <HAL_GPIO_Init+0x204>
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e004      	b.n	8002c0c <HAL_GPIO_Init+0x204>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e002      	b.n	8002c0c <HAL_GPIO_Init+0x204>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_GPIO_Init+0x204>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	f002 0203 	and.w	r2, r2, #3
 8002c12:	0092      	lsls	r2, r2, #2
 8002c14:	4093      	lsls	r3, r2
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c1c:	4935      	ldr	r1, [pc, #212]	@ (8002cf4 <HAL_GPIO_Init+0x2ec>)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	3302      	adds	r3, #2
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2a:	4b38      	ldr	r3, [pc, #224]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c54:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c78:	4a24      	ldr	r2, [pc, #144]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c7e:	4b23      	ldr	r3, [pc, #140]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca8:	4b18      	ldr	r3, [pc, #96]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8002d0c <HAL_GPIO_Init+0x304>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b0f      	cmp	r3, #15
 8002cdc:	f67f aea2 	bls.w	8002a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	3724      	adds	r7, #36	@ 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	40020400 	.word	0x40020400
 8002d00:	40020800 	.word	0x40020800
 8002d04:	40020c00 	.word	0x40020c00
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40013c00 	.word	0x40013c00

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d20:	787b      	ldrb	r3, [r7, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d2c:	e003      	b.n	8002d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	041a      	lsls	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	619a      	str	r2, [r3, #24]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e12b      	b.n	8002fae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe ff44 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	@ 0x24
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da8:	f002 f8e0 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 8002dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a81      	ldr	r2, [pc, #516]	@ (8002fb8 <HAL_I2C_Init+0x274>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d807      	bhi.n	8002dc8 <HAL_I2C_Init+0x84>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a80      	ldr	r2, [pc, #512]	@ (8002fbc <HAL_I2C_Init+0x278>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e006      	b.n	8002dd6 <HAL_I2C_Init+0x92>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a7d      	ldr	r2, [pc, #500]	@ (8002fc0 <HAL_I2C_Init+0x27c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bf94      	ite	ls
 8002dd0:	2301      	movls	r3, #1
 8002dd2:	2300      	movhi	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0e7      	b.n	8002fae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a78      	ldr	r2, [pc, #480]	@ (8002fc4 <HAL_I2C_Init+0x280>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0c9b      	lsrs	r3, r3, #18
 8002de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a6a      	ldr	r2, [pc, #424]	@ (8002fb8 <HAL_I2C_Init+0x274>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d802      	bhi.n	8002e18 <HAL_I2C_Init+0xd4>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	3301      	adds	r3, #1
 8002e16:	e009      	b.n	8002e2c <HAL_I2C_Init+0xe8>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	4a69      	ldr	r2, [pc, #420]	@ (8002fc8 <HAL_I2C_Init+0x284>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	495c      	ldr	r1, [pc, #368]	@ (8002fb8 <HAL_I2C_Init+0x274>)
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	d819      	bhi.n	8002e80 <HAL_I2C_Init+0x13c>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1e59      	subs	r1, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5a:	1c59      	adds	r1, r3, #1
 8002e5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e60:	400b      	ands	r3, r1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_I2C_Init+0x138>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e59      	subs	r1, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7a:	e051      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	e04f      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d111      	bne.n	8002eac <HAL_I2C_Init+0x168>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e012      	b.n	8002ed2 <HAL_I2C_Init+0x18e>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e58      	subs	r0, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	0099      	lsls	r1, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Init+0x196>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e022      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10e      	bne.n	8002f00 <HAL_I2C_Init+0x1bc>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1e58      	subs	r0, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	440b      	add	r3, r1
 8002ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002efe:	e00f      	b.n	8002f20 <HAL_I2C_Init+0x1dc>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1e58      	subs	r0, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	0099      	lsls	r1, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	6809      	ldr	r1, [r1, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6911      	ldr	r1, [r2, #16]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68d2      	ldr	r2, [r2, #12]
 8002f5a:	4311      	orrs	r1, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	000186a0 	.word	0x000186a0
 8002fbc:	001e847f 	.word	0x001e847f
 8002fc0:	003d08ff 	.word	0x003d08ff
 8002fc4:	431bde83 	.word	0x431bde83
 8002fc8:	10624dd3 	.word	0x10624dd3

08002fcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	460b      	mov	r3, r1
 8002fda:	817b      	strh	r3, [r7, #10]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff f95e 	bl	80022a0 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	f040 80e0 	bne.w	80031b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2319      	movs	r3, #25
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4970      	ldr	r1, [pc, #448]	@ (80031c0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f001 f90e 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
 800300c:	e0d3      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_I2C_Master_Transmit+0x50>
 8003018:	2302      	movs	r3, #2
 800301a:	e0cc      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d007      	beq.n	8003042 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0201 	orr.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003050:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2221      	movs	r2, #33	@ 0x21
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2210      	movs	r2, #16
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	893a      	ldrh	r2, [r7, #8]
 8003072:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4a50      	ldr	r2, [pc, #320]	@ (80031c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003082:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003084:	8979      	ldrh	r1, [r7, #10]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fdfa 	bl	8003c84 <I2C_MasterRequestWrite>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e08d      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030b0:	e066      	b.n	8003180 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	6a39      	ldr	r1, [r7, #32]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f001 f9cc 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d107      	bne.n	80030da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06b      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b04      	cmp	r3, #4
 800311a:	d11b      	bne.n	8003154 <HAL_I2C_Master_Transmit+0x188>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	d017      	beq.n	8003154 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	6a39      	ldr	r1, [r7, #32]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f001 f9c3 	bl	80044e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	2b04      	cmp	r3, #4
 800316a:	d107      	bne.n	800317c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e01a      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	d194      	bne.n	80030b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	00100002 	.word	0x00100002
 80031c4:	ffff0000 	.word	0xffff0000

080031c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	@ 0x30
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	461a      	mov	r2, r3
 80031d4:	460b      	mov	r3, r1
 80031d6:	817b      	strh	r3, [r7, #10]
 80031d8:	4613      	mov	r3, r2
 80031da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031dc:	f7ff f860 	bl	80022a0 <HAL_GetTick>
 80031e0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	f040 8217 	bne.w	800361e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2319      	movs	r3, #25
 80031f6:	2201      	movs	r2, #1
 80031f8:	497c      	ldr	r1, [pc, #496]	@ (80033ec <HAL_I2C_Master_Receive+0x224>)
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f001 f810 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	e20a      	b.n	8003620 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_I2C_Master_Receive+0x50>
 8003214:	2302      	movs	r3, #2
 8003216:	e203      	b.n	8003620 <HAL_I2C_Master_Receive+0x458>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d007      	beq.n	800323e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0201 	orr.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800324c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2222      	movs	r2, #34	@ 0x22
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2210      	movs	r2, #16
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	893a      	ldrh	r2, [r7, #8]
 800326e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a5c      	ldr	r2, [pc, #368]	@ (80033f0 <HAL_I2C_Master_Receive+0x228>)
 800327e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003280:	8979      	ldrh	r1, [r7, #10]
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fd7e 	bl	8003d88 <I2C_MasterRequestRead>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1c4      	b.n	8003620 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329a:	2b00      	cmp	r3, #0
 800329c:	d113      	bne.n	80032c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329e:	2300      	movs	r3, #0
 80032a0:	623b      	str	r3, [r7, #32]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	623b      	str	r3, [r7, #32]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	623b      	str	r3, [r7, #32]
 80032b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	e198      	b.n	80035f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d11b      	bne.n	8003306 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e178      	b.n	80035f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	2b02      	cmp	r3, #2
 800330c:	d11b      	bne.n	8003346 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800332c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	e158      	b.n	80035f8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003354:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800336c:	e144      	b.n	80035f8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	2b03      	cmp	r3, #3
 8003374:	f200 80f1 	bhi.w	800355a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337c:	2b01      	cmp	r3, #1
 800337e:	d123      	bne.n	80033c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003382:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f001 f8f5 	bl	8004574 <I2C_WaitOnRXNEFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e145      	b.n	8003620 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033c6:	e117      	b.n	80035f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d14e      	bne.n	800346e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d6:	2200      	movs	r2, #0
 80033d8:	4906      	ldr	r1, [pc, #24]	@ (80033f4 <HAL_I2C_Master_Receive+0x22c>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 ff20 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e11a      	b.n	8003620 <HAL_I2C_Master_Receive+0x458>
 80033ea:	bf00      	nop
 80033ec:	00100002 	.word	0x00100002
 80033f0:	ffff0000 	.word	0xffff0000
 80033f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800346c:	e0c4      	b.n	80035f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003474:	2200      	movs	r2, #0
 8003476:	496c      	ldr	r1, [pc, #432]	@ (8003628 <HAL_I2C_Master_Receive+0x460>)
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fed1 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0cb      	b.n	8003620 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d0:	2200      	movs	r2, #0
 80034d2:	4955      	ldr	r1, [pc, #340]	@ (8003628 <HAL_I2C_Master_Receive+0x460>)
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fea3 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e09d      	b.n	8003620 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003558:	e04e      	b.n	80035f8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f001 f808 	bl	8004574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e058      	b.n	8003620 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d124      	bne.n	80035f8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d107      	bne.n	80035c6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f47f aeb6 	bne.w	800336e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
  }
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	@ 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	00010004 	.word	0x00010004

0800362c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	460b      	mov	r3, r1
 8003640:	813b      	strh	r3, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003646:	f7fe fe2b 	bl	80022a0 <HAL_GetTick>
 800364a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b20      	cmp	r3, #32
 8003656:	f040 80d9 	bne.w	800380c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	2319      	movs	r3, #25
 8003660:	2201      	movs	r2, #1
 8003662:	496d      	ldr	r1, [pc, #436]	@ (8003818 <HAL_I2C_Mem_Write+0x1ec>)
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fddb 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
 8003672:	e0cc      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_I2C_Mem_Write+0x56>
 800367e:	2302      	movs	r3, #2
 8003680:	e0c5      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d007      	beq.n	80036a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2221      	movs	r2, #33	@ 0x21
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2240      	movs	r2, #64	@ 0x40
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a4d      	ldr	r2, [pc, #308]	@ (800381c <HAL_I2C_Mem_Write+0x1f0>)
 80036e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ea:	88f8      	ldrh	r0, [r7, #6]
 80036ec:	893a      	ldrh	r2, [r7, #8]
 80036ee:	8979      	ldrh	r1, [r7, #10]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	4603      	mov	r3, r0
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fc12 	bl	8003f24 <I2C_RequestMemoryWrite>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d052      	beq.n	80037ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e081      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fea0 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	2b04      	cmp	r3, #4
 8003720:	d107      	bne.n	8003732 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e06b      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b04      	cmp	r3, #4
 8003772:	d11b      	bne.n	80037ac <HAL_I2C_Mem_Write+0x180>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d017      	beq.n	80037ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1aa      	bne.n	800370a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fe93 	bl	80044e4 <I2C_WaitOnBTFFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d107      	bne.n	80037dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e016      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	00100002 	.word	0x00100002
 800381c:	ffff0000 	.word	0xffff0000

08003820 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	@ 0x30
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	4608      	mov	r0, r1
 800382a:	4611      	mov	r1, r2
 800382c:	461a      	mov	r2, r3
 800382e:	4603      	mov	r3, r0
 8003830:	817b      	strh	r3, [r7, #10]
 8003832:	460b      	mov	r3, r1
 8003834:	813b      	strh	r3, [r7, #8]
 8003836:	4613      	mov	r3, r2
 8003838:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800383a:	f7fe fd31 	bl	80022a0 <HAL_GetTick>
 800383e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b20      	cmp	r3, #32
 800384a:	f040 8214 	bne.w	8003c76 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2319      	movs	r3, #25
 8003854:	2201      	movs	r2, #1
 8003856:	497b      	ldr	r1, [pc, #492]	@ (8003a44 <HAL_I2C_Mem_Read+0x224>)
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fce1 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
 8003866:	e207      	b.n	8003c78 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_I2C_Mem_Read+0x56>
 8003872:	2302      	movs	r3, #2
 8003874:	e200      	b.n	8003c78 <HAL_I2C_Mem_Read+0x458>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d007      	beq.n	800389c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2222      	movs	r2, #34	@ 0x22
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2240      	movs	r2, #64	@ 0x40
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a5b      	ldr	r2, [pc, #364]	@ (8003a48 <HAL_I2C_Mem_Read+0x228>)
 80038dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038de:	88f8      	ldrh	r0, [r7, #6]
 80038e0:	893a      	ldrh	r2, [r7, #8]
 80038e2:	8979      	ldrh	r1, [r7, #10]
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	4603      	mov	r3, r0
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fbae 	bl	8004050 <I2C_RequestMemoryRead>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e1bc      	b.n	8003c78 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d113      	bne.n	800392e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003906:	2300      	movs	r3, #0
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	623b      	str	r3, [r7, #32]
 800391a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e190      	b.n	8003c50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003932:	2b01      	cmp	r3, #1
 8003934:	d11b      	bne.n	800396e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003944:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e170      	b.n	8003c50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003972:	2b02      	cmp	r3, #2
 8003974:	d11b      	bne.n	80039ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003984:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003994:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	e150      	b.n	8003c50 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039c4:	e144      	b.n	8003c50 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	f200 80f1 	bhi.w	8003bb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d123      	bne.n	8003a20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fdc9 	bl	8004574 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e145      	b.n	8003c78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a1e:	e117      	b.n	8003c50 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d14e      	bne.n	8003ac6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4906      	ldr	r1, [pc, #24]	@ (8003a4c <HAL_I2C_Mem_Read+0x22c>)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fbf4 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e11a      	b.n	8003c78 <HAL_I2C_Mem_Read+0x458>
 8003a42:	bf00      	nop
 8003a44:	00100002 	.word	0x00100002
 8003a48:	ffff0000 	.word	0xffff0000
 8003a4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ac4:	e0c4      	b.n	8003c50 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	2200      	movs	r2, #0
 8003ace:	496c      	ldr	r1, [pc, #432]	@ (8003c80 <HAL_I2C_Mem_Read+0x460>)
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fba5 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0cb      	b.n	8003c78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4955      	ldr	r1, [pc, #340]	@ (8003c80 <HAL_I2C_Mem_Read+0x460>)
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fb77 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e09d      	b.n	8003c78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bb0:	e04e      	b.n	8003c50 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fcdc 	bl	8004574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e058      	b.n	8003c78 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d124      	bne.n	8003c50 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d107      	bne.n	8003c1e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c1c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f47f aeb6 	bne.w	80039c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3728      	adds	r7, #40	@ 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	00010004 	.word	0x00010004

08003c84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	460b      	mov	r3, r1
 8003c92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d006      	beq.n	8003cae <I2C_MasterRequestWrite+0x2a>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d003      	beq.n	8003cae <I2C_MasterRequestWrite+0x2a>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cac:	d108      	bne.n	8003cc0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e00b      	b.n	8003cd8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	2b12      	cmp	r3, #18
 8003cc6:	d107      	bne.n	8003cd8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fa9b 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00d      	beq.n	8003d0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cfe:	d103      	bne.n	8003d08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e035      	b.n	8003d78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d14:	d108      	bne.n	8003d28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d16:	897b      	ldrh	r3, [r7, #10]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d24:	611a      	str	r2, [r3, #16]
 8003d26:	e01b      	b.n	8003d60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d28:	897b      	ldrh	r3, [r7, #10]
 8003d2a:	11db      	asrs	r3, r3, #7
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0306 	and.w	r3, r3, #6
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f063 030f 	orn	r3, r3, #15
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	490e      	ldr	r1, [pc, #56]	@ (8003d80 <I2C_MasterRequestWrite+0xfc>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fae4 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e010      	b.n	8003d78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4907      	ldr	r1, [pc, #28]	@ (8003d84 <I2C_MasterRequestWrite+0x100>)
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fad4 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	00010008 	.word	0x00010008
 8003d84:	00010002 	.word	0x00010002

08003d88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	460b      	mov	r3, r1
 8003d96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d006      	beq.n	8003dc2 <I2C_MasterRequestRead+0x3a>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d003      	beq.n	8003dc2 <I2C_MasterRequestRead+0x3a>
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dc0:	d108      	bne.n	8003dd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e00b      	b.n	8003dec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	2b11      	cmp	r3, #17
 8003dda:	d107      	bne.n	8003dec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fa11 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e12:	d103      	bne.n	8003e1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e079      	b.n	8003f14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e28:	d108      	bne.n	8003e3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e2a:	897b      	ldrh	r3, [r7, #10]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]
 8003e3a:	e05f      	b.n	8003efc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e3c:	897b      	ldrh	r3, [r7, #10]
 8003e3e:	11db      	asrs	r3, r3, #7
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 0306 	and.w	r3, r3, #6
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f063 030f 	orn	r3, r3, #15
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4930      	ldr	r1, [pc, #192]	@ (8003f1c <I2C_MasterRequestRead+0x194>)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fa5a 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e054      	b.n	8003f14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e6a:	897b      	ldrh	r3, [r7, #10]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4929      	ldr	r1, [pc, #164]	@ (8003f20 <I2C_MasterRequestRead+0x198>)
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fa4a 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e044      	b.n	8003f14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f9af 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed6:	d103      	bne.n	8003ee0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e017      	b.n	8003f14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ee4:	897b      	ldrh	r3, [r7, #10]
 8003ee6:	11db      	asrs	r3, r3, #7
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0306 	and.w	r3, r3, #6
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f063 030e 	orn	r3, r3, #14
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4907      	ldr	r1, [pc, #28]	@ (8003f20 <I2C_MasterRequestRead+0x198>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa06 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	00010008 	.word	0x00010008
 8003f20:	00010002 	.word	0x00010002

08003f24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f960 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f74:	d103      	bne.n	8003f7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e05f      	b.n	8004042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	6a3a      	ldr	r2, [r7, #32]
 8003f96:	492d      	ldr	r1, [pc, #180]	@ (800404c <I2C_RequestMemoryWrite+0x128>)
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f9bb 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e04c      	b.n	8004042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc0:	6a39      	ldr	r1, [r7, #32]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fa46 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00d      	beq.n	8003fea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d107      	bne.n	8003fe6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e02b      	b.n	8004042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d105      	bne.n	8003ffc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff0:	893b      	ldrh	r3, [r7, #8]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	611a      	str	r2, [r3, #16]
 8003ffa:	e021      	b.n	8004040 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ffc:	893b      	ldrh	r3, [r7, #8]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	b29b      	uxth	r3, r3
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800400a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400c:	6a39      	ldr	r1, [r7, #32]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fa20 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00d      	beq.n	8004036 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	2b04      	cmp	r3, #4
 8004020:	d107      	bne.n	8004032 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004030:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e005      	b.n	8004042 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004036:	893b      	ldrh	r3, [r7, #8]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	00010002 	.word	0x00010002

08004050 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	461a      	mov	r2, r3
 800405e:	4603      	mov	r3, r0
 8004060:	817b      	strh	r3, [r7, #10]
 8004062:	460b      	mov	r3, r1
 8004064:	813b      	strh	r3, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004078:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004088:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	2200      	movs	r2, #0
 8004092:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f8c2 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00d      	beq.n	80040be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040b0:	d103      	bne.n	80040ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0aa      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	6a3a      	ldr	r2, [r7, #32]
 80040d2:	4952      	ldr	r1, [pc, #328]	@ (800421c <I2C_RequestMemoryRead+0x1cc>)
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f91d 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e097      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fc:	6a39      	ldr	r1, [r7, #32]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f9a8 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	2b04      	cmp	r3, #4
 8004110:	d107      	bne.n	8004122 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004120:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e076      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d105      	bne.n	8004138 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800412c:	893b      	ldrh	r3, [r7, #8]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	611a      	str	r2, [r3, #16]
 8004136:	e021      	b.n	800417c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004138:	893b      	ldrh	r3, [r7, #8]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	b29b      	uxth	r3, r3
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004148:	6a39      	ldr	r1, [r7, #32]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f982 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00d      	beq.n	8004172 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	2b04      	cmp	r3, #4
 800415c:	d107      	bne.n	800416e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e050      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004172:	893b      	ldrh	r3, [r7, #8]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	6a39      	ldr	r1, [r7, #32]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f967 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00d      	beq.n	80041a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	2b04      	cmp	r3, #4
 8004192:	d107      	bne.n	80041a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e035      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	2200      	movs	r2, #0
 80041c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f82b 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00d      	beq.n	80041ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041de:	d103      	bne.n	80041e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e013      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041ec:	897b      	ldrh	r3, [r7, #10]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	6a3a      	ldr	r2, [r7, #32]
 8004200:	4906      	ldr	r1, [pc, #24]	@ (800421c <I2C_RequestMemoryRead+0x1cc>)
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f886 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	00010002 	.word	0x00010002

08004220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004230:	e048      	b.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d044      	beq.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fe f831 	bl	80022a0 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d139      	bne.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10d      	bne.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x56>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	43da      	mvns	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	e00c      	b.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	43da      	mvns	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4013      	ands	r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	429a      	cmp	r2, r3
 8004294:	d116      	bne.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f043 0220 	orr.w	r2, r3, #32
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e023      	b.n	800430c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10d      	bne.n	80042ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	e00c      	b.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	43da      	mvns	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	429a      	cmp	r2, r3
 8004308:	d093      	beq.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004322:	e071      	b.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004332:	d123      	bne.n	800437c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004342:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800434c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	f043 0204 	orr.w	r2, r3, #4
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e067      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d041      	beq.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004384:	f7fd ff8c 	bl	80022a0 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d136      	bne.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10c      	bne.n	80043be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bf14      	ite	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	2300      	moveq	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e00b      	b.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	43da      	mvns	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e021      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10c      	bne.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e00b      	b.n	8004444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4013      	ands	r3, r2
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	f47f af6d 	bne.w	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004460:	e034      	b.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f8e3 	bl	800462e <I2C_IsAcknowledgeFailed>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e034      	b.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d028      	beq.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fd ff11 	bl	80022a0 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11d      	bne.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449a:	2b80      	cmp	r3, #128	@ 0x80
 800449c:	d016      	beq.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e007      	b.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d1c3      	bne.n	8004462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f0:	e034      	b.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f89b 	bl	800462e <I2C_IsAcknowledgeFailed>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e034      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d028      	beq.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fd fec9 	bl	80022a0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d11d      	bne.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d016      	beq.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e007      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b04      	cmp	r3, #4
 8004568:	d1c3      	bne.n	80044f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004580:	e049      	b.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b10      	cmp	r3, #16
 800458e:	d119      	bne.n	80045c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0210 	mvn.w	r2, #16
 8004598:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e030      	b.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c4:	f7fd fe6c 	bl	80022a0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d302      	bcc.n	80045da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d11d      	bne.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e4:	2b40      	cmp	r3, #64	@ 0x40
 80045e6:	d016      	beq.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e007      	b.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004620:	2b40      	cmp	r3, #64	@ 0x40
 8004622:	d1ae      	bne.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004644:	d11b      	bne.n	800467e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800464e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f043 0204 	orr.w	r2, r3, #4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e267      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d075      	beq.n	8004796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046aa:	4b88      	ldr	r3, [pc, #544]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d00c      	beq.n	80046d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046b6:	4b85      	ldr	r3, [pc, #532]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d112      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c2:	4b82      	ldr	r3, [pc, #520]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ce:	d10b      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	4b7e      	ldr	r3, [pc, #504]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05b      	beq.n	8004794 <HAL_RCC_OscConfig+0x108>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d157      	bne.n	8004794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e242      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f0:	d106      	bne.n	8004700 <HAL_RCC_OscConfig+0x74>
 80046f2:	4b76      	ldr	r3, [pc, #472]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a75      	ldr	r2, [pc, #468]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80046f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e01d      	b.n	800473c <HAL_RCC_OscConfig+0xb0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004708:	d10c      	bne.n	8004724 <HAL_RCC_OscConfig+0x98>
 800470a:	4b70      	ldr	r3, [pc, #448]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a6f      	ldr	r2, [pc, #444]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	4b6d      	ldr	r3, [pc, #436]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a6c      	ldr	r2, [pc, #432]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e00b      	b.n	800473c <HAL_RCC_OscConfig+0xb0>
 8004724:	4b69      	ldr	r3, [pc, #420]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a68      	ldr	r2, [pc, #416]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800472a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b66      	ldr	r3, [pc, #408]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a65      	ldr	r2, [pc, #404]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800473a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d013      	beq.n	800476c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fd fdac 	bl	80022a0 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7fd fda8 	bl	80022a0 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	@ 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e207      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	4b5b      	ldr	r3, [pc, #364]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0xc0>
 800476a:	e014      	b.n	8004796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fd fd98 	bl	80022a0 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004774:	f7fd fd94 	bl	80022a0 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	@ 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e1f3      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004786:	4b51      	ldr	r3, [pc, #324]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0xe8>
 8004792:	e000      	b.n	8004796 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d063      	beq.n	800486a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047a2:	4b4a      	ldr	r3, [pc, #296]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ae:	4b47      	ldr	r3, [pc, #284]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d11c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ba:	4b44      	ldr	r3, [pc, #272]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d116      	bne.n	80047f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c6:	4b41      	ldr	r3, [pc, #260]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_RCC_OscConfig+0x152>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d001      	beq.n	80047de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e1c7      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047de:	4b3b      	ldr	r3, [pc, #236]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4937      	ldr	r1, [pc, #220]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	e03a      	b.n	800486a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047fc:	4b34      	ldr	r3, [pc, #208]	@ (80048d0 <HAL_RCC_OscConfig+0x244>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fd fd4d 	bl	80022a0 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480a:	f7fd fd49 	bl	80022a0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e1a8      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	4b2b      	ldr	r3, [pc, #172]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004828:	4b28      	ldr	r3, [pc, #160]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4925      	ldr	r1, [pc, #148]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]
 800483c:	e015      	b.n	800486a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <HAL_RCC_OscConfig+0x244>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fd fd2c 	bl	80022a0 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484c:	f7fd fd28 	bl	80022a0 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e187      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d036      	beq.n	80048e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d016      	beq.n	80048ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800487e:	4b15      	ldr	r3, [pc, #84]	@ (80048d4 <HAL_RCC_OscConfig+0x248>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fd fd0c 	bl	80022a0 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488c:	f7fd fd08 	bl	80022a0 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e167      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489e:	4b0b      	ldr	r3, [pc, #44]	@ (80048cc <HAL_RCC_OscConfig+0x240>)
 80048a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x200>
 80048aa:	e01b      	b.n	80048e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <HAL_RCC_OscConfig+0x248>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b2:	f7fd fcf5 	bl	80022a0 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	e00e      	b.n	80048d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fd fcf1 	bl	80022a0 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d907      	bls.n	80048d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e150      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
 80048cc:	40023800 	.word	0x40023800
 80048d0:	42470000 	.word	0x42470000
 80048d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d8:	4b88      	ldr	r3, [pc, #544]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80048da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ea      	bne.n	80048ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8097 	beq.w	8004a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f6:	4b81      	ldr	r3, [pc, #516]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	4b7d      	ldr	r3, [pc, #500]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	4a7c      	ldr	r2, [pc, #496]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004910:	6413      	str	r3, [r2, #64]	@ 0x40
 8004912:	4b7a      	ldr	r3, [pc, #488]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004922:	4b77      	ldr	r3, [pc, #476]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d118      	bne.n	8004960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492e:	4b74      	ldr	r3, [pc, #464]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a73      	ldr	r2, [pc, #460]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493a:	f7fd fcb1 	bl	80022a0 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004942:	f7fd fcad 	bl	80022a0 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e10c      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	4b6a      	ldr	r3, [pc, #424]	@ (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d106      	bne.n	8004976 <HAL_RCC_OscConfig+0x2ea>
 8004968:	4b64      	ldr	r3, [pc, #400]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496c:	4a63      	ldr	r2, [pc, #396]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	@ 0x70
 8004974:	e01c      	b.n	80049b0 <HAL_RCC_OscConfig+0x324>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b05      	cmp	r3, #5
 800497c:	d10c      	bne.n	8004998 <HAL_RCC_OscConfig+0x30c>
 800497e:	4b5f      	ldr	r3, [pc, #380]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004982:	4a5e      	ldr	r2, [pc, #376]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	6713      	str	r3, [r2, #112]	@ 0x70
 800498a:	4b5c      	ldr	r3, [pc, #368]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498e:	4a5b      	ldr	r2, [pc, #364]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6713      	str	r3, [r2, #112]	@ 0x70
 8004996:	e00b      	b.n	80049b0 <HAL_RCC_OscConfig+0x324>
 8004998:	4b58      	ldr	r3, [pc, #352]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499c:	4a57      	ldr	r2, [pc, #348]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a4:	4b55      	ldr	r3, [pc, #340]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a8:	4a54      	ldr	r2, [pc, #336]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80049aa:	f023 0304 	bic.w	r3, r3, #4
 80049ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d015      	beq.n	80049e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd fc72 	bl	80022a0 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fd fc6e 	bl	80022a0 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0cb      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	4b49      	ldr	r3, [pc, #292]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ee      	beq.n	80049c0 <HAL_RCC_OscConfig+0x334>
 80049e2:	e014      	b.n	8004a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e4:	f7fd fc5c 	bl	80022a0 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fd fc58 	bl	80022a0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0b5      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a02:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1ee      	bne.n	80049ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d105      	bne.n	8004a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a14:	4b39      	ldr	r3, [pc, #228]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	4a38      	ldr	r2, [pc, #224]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80a1 	beq.w	8004b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a2a:	4b34      	ldr	r3, [pc, #208]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d05c      	beq.n	8004af0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d141      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3e:	4b31      	ldr	r3, [pc, #196]	@ (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7fd fc2c 	bl	80022a0 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fd fc28 	bl	80022a0 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e087      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	019b      	lsls	r3, r3, #6
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	3b01      	subs	r3, #1
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	491b      	ldr	r1, [pc, #108]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a94:	4b1b      	ldr	r3, [pc, #108]	@ (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9a:	f7fd fc01 	bl	80022a0 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7fd fbfd 	bl	80022a0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e05c      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab4:	4b11      	ldr	r3, [pc, #68]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x416>
 8004ac0:	e054      	b.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac2:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fd fbea 	bl	80022a0 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fd fbe6 	bl	80022a0 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e045      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae2:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <HAL_RCC_OscConfig+0x470>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x444>
 8004aee:	e03d      	b.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d107      	bne.n	8004b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e038      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40007000 	.word	0x40007000
 8004b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b08:	4b1b      	ldr	r3, [pc, #108]	@ (8004b78 <HAL_RCC_OscConfig+0x4ec>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d028      	beq.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d121      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d11a      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d111      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	3b01      	subs	r3, #1
 8004b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d107      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800

08004b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0cc      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b90:	4b68      	ldr	r3, [pc, #416]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d90c      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b65      	ldr	r3, [pc, #404]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b63      	ldr	r3, [pc, #396]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0b8      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd0:	4b59      	ldr	r3, [pc, #356]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4a58      	ldr	r2, [pc, #352]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be8:	4b53      	ldr	r3, [pc, #332]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a52      	ldr	r2, [pc, #328]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf4:	4b50      	ldr	r3, [pc, #320]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	494d      	ldr	r1, [pc, #308]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d044      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	4b47      	ldr	r3, [pc, #284]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d119      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d107      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e06f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e067      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c5a:	4b37      	ldr	r3, [pc, #220]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f023 0203 	bic.w	r2, r3, #3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4934      	ldr	r1, [pc, #208]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c6c:	f7fd fb18 	bl	80022a0 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c74:	f7fd fb14 	bl	80022a0 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e04f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 020c 	and.w	r2, r3, #12
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d1eb      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c9c:	4b25      	ldr	r3, [pc, #148]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d20c      	bcs.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004caa:	4b22      	ldr	r3, [pc, #136]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb2:	4b20      	ldr	r3, [pc, #128]	@ (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e032      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd0:	4b19      	ldr	r3, [pc, #100]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4916      	ldr	r1, [pc, #88]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cee:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	490e      	ldr	r1, [pc, #56]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d02:	f000 f821 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8004d06:	4602      	mov	r2, r0
 8004d08:	4b0b      	ldr	r3, [pc, #44]	@ (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	490a      	ldr	r1, [pc, #40]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	5ccb      	ldrb	r3, [r1, r3]
 8004d16:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1a:	4a09      	ldr	r2, [pc, #36]	@ (8004d40 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d1e:	4b09      	ldr	r3, [pc, #36]	@ (8004d44 <HAL_RCC_ClockConfig+0x1c8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd fa78 	bl	8002218 <HAL_InitTick>

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40023c00 	.word	0x40023c00
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	0800c8ac 	.word	0x0800c8ac
 8004d40:	20000000 	.word	0x20000000
 8004d44:	20000004 	.word	0x20000004

08004d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d4c:	b094      	sub	sp, #80	@ 0x50
 8004d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d60:	4b79      	ldr	r3, [pc, #484]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d00d      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x40>
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	f200 80e1 	bhi.w	8004f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x34>
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d003      	beq.n	8004d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d7a:	e0db      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b73      	ldr	r3, [pc, #460]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d80:	e0db      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d82:	4b73      	ldr	r3, [pc, #460]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d86:	e0d8      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d88:	4b6f      	ldr	r3, [pc, #444]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d92:	4b6d      	ldr	r3, [pc, #436]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d063      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	2200      	movs	r2, #0
 8004da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004db2:	2300      	movs	r3, #0
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dba:	4622      	mov	r2, r4
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	f04f 0000 	mov.w	r0, #0
 8004dc2:	f04f 0100 	mov.w	r1, #0
 8004dc6:	0159      	lsls	r1, r3, #5
 8004dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dcc:	0150      	lsls	r0, r2, #5
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	1a51      	subs	r1, r2, r1
 8004dd6:	6139      	str	r1, [r7, #16]
 8004dd8:	4629      	mov	r1, r5
 8004dda:	eb63 0301 	sbc.w	r3, r3, r1
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dec:	4659      	mov	r1, fp
 8004dee:	018b      	lsls	r3, r1, #6
 8004df0:	4651      	mov	r1, sl
 8004df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004df6:	4651      	mov	r1, sl
 8004df8:	018a      	lsls	r2, r1, #6
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8004e00:	4659      	mov	r1, fp
 8004e02:	eb63 0901 	sbc.w	r9, r3, r1
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e1a:	4690      	mov	r8, r2
 8004e1c:	4699      	mov	r9, r3
 8004e1e:	4623      	mov	r3, r4
 8004e20:	eb18 0303 	adds.w	r3, r8, r3
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	462b      	mov	r3, r5
 8004e28:	eb49 0303 	adc.w	r3, r9, r3
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	024b      	lsls	r3, r1, #9
 8004e3e:	4621      	mov	r1, r4
 8004e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e44:	4621      	mov	r1, r4
 8004e46:	024a      	lsls	r2, r1, #9
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4e:	2200      	movs	r2, #0
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e58:	f7fb fefe 	bl	8000c58 <__aeabi_uldivmod>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4613      	mov	r3, r2
 8004e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e64:	e058      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e66:	4b38      	ldr	r3, [pc, #224]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	099b      	lsrs	r3, r3, #6
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	4611      	mov	r1, r2
 8004e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	f04f 0000 	mov.w	r0, #0
 8004e88:	f04f 0100 	mov.w	r1, #0
 8004e8c:	0159      	lsls	r1, r3, #5
 8004e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e92:	0150      	lsls	r0, r2, #5
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4641      	mov	r1, r8
 8004e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8004ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	00eb      	lsls	r3, r5, #3
 8004eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ece:	00e2      	lsls	r2, r4, #3
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	4643      	mov	r3, r8
 8004ed6:	18e3      	adds	r3, r4, r3
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	464b      	mov	r3, r9
 8004edc:	eb45 0303 	adc.w	r3, r5, r3
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eee:	4629      	mov	r1, r5
 8004ef0:	028b      	lsls	r3, r1, #10
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ef8:	4621      	mov	r1, r4
 8004efa:	028a      	lsls	r2, r1, #10
 8004efc:	4610      	mov	r0, r2
 8004efe:	4619      	mov	r1, r3
 8004f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f02:	2200      	movs	r2, #0
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	61fa      	str	r2, [r7, #28]
 8004f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f0c:	f7fb fea4 	bl	8000c58 <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4613      	mov	r3, r2
 8004f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f18:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	3301      	adds	r3, #1
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f32:	e002      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f34:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3750      	adds	r7, #80	@ 0x50
 8004f40:	46bd      	mov	sp, r7
 8004f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	007a1200 	.word	0x007a1200

08004f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f58:	4b03      	ldr	r3, [pc, #12]	@ (8004f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000000 	.word	0x20000000

08004f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f70:	f7ff fff0 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b05      	ldr	r3, [pc, #20]	@ (8004f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	0a9b      	lsrs	r3, r3, #10
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	4903      	ldr	r1, [pc, #12]	@ (8004f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f82:	5ccb      	ldrb	r3, [r1, r3]
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	0800c8bc 	.word	0x0800c8bc

08004f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f98:	f7ff ffdc 	bl	8004f54 <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	0b5b      	lsrs	r3, r3, #13
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4903      	ldr	r1, [pc, #12]	@ (8004fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	0800c8bc 	.word	0x0800c8bc

08004fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e041      	b.n	8005052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc fea8 	bl	8001d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f000 fa10 	bl	8005420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e041      	b.n	80050f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f839 	bl	80050f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f000 f9c1 	bl	8005420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005126:	2302      	movs	r3, #2
 8005128:	e0ae      	b.n	8005288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	f200 809f 	bhi.w	8005278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800513a:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005175 	.word	0x08005175
 8005144:	08005279 	.word	0x08005279
 8005148:	08005279 	.word	0x08005279
 800514c:	08005279 	.word	0x08005279
 8005150:	080051b5 	.word	0x080051b5
 8005154:	08005279 	.word	0x08005279
 8005158:	08005279 	.word	0x08005279
 800515c:	08005279 	.word	0x08005279
 8005160:	080051f7 	.word	0x080051f7
 8005164:	08005279 	.word	0x08005279
 8005168:	08005279 	.word	0x08005279
 800516c:	08005279 	.word	0x08005279
 8005170:	08005237 	.word	0x08005237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f9d6 	bl	800552c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0208 	orr.w	r2, r2, #8
 800518e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0204 	bic.w	r2, r2, #4
 800519e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6999      	ldr	r1, [r3, #24]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	619a      	str	r2, [r3, #24]
      break;
 80051b2:	e064      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fa1c 	bl	80055f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6999      	ldr	r1, [r3, #24]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	021a      	lsls	r2, r3, #8
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	619a      	str	r2, [r3, #24]
      break;
 80051f4:	e043      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fa67 	bl	80056d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0208 	orr.w	r2, r2, #8
 8005210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0204 	bic.w	r2, r2, #4
 8005220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69d9      	ldr	r1, [r3, #28]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	61da      	str	r2, [r3, #28]
      break;
 8005234:	e023      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fab1 	bl	80057a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69d9      	ldr	r1, [r3, #28]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	021a      	lsls	r2, r3, #8
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	61da      	str	r2, [r3, #28]
      break;
 8005276:	e002      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
      break;
 800527c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_TIM_ConfigClockSource+0x1c>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e0b4      	b.n	8005416 <HAL_TIM_ConfigClockSource+0x186>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e4:	d03e      	beq.n	8005364 <HAL_TIM_ConfigClockSource+0xd4>
 80052e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ea:	f200 8087 	bhi.w	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f2:	f000 8086 	beq.w	8005402 <HAL_TIM_ConfigClockSource+0x172>
 80052f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052fa:	d87f      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 80052fc:	2b70      	cmp	r3, #112	@ 0x70
 80052fe:	d01a      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0xa6>
 8005300:	2b70      	cmp	r3, #112	@ 0x70
 8005302:	d87b      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 8005304:	2b60      	cmp	r3, #96	@ 0x60
 8005306:	d050      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x11a>
 8005308:	2b60      	cmp	r3, #96	@ 0x60
 800530a:	d877      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 800530c:	2b50      	cmp	r3, #80	@ 0x50
 800530e:	d03c      	beq.n	800538a <HAL_TIM_ConfigClockSource+0xfa>
 8005310:	2b50      	cmp	r3, #80	@ 0x50
 8005312:	d873      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 8005314:	2b40      	cmp	r3, #64	@ 0x40
 8005316:	d058      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x13a>
 8005318:	2b40      	cmp	r3, #64	@ 0x40
 800531a:	d86f      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 800531c:	2b30      	cmp	r3, #48	@ 0x30
 800531e:	d064      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15a>
 8005320:	2b30      	cmp	r3, #48	@ 0x30
 8005322:	d86b      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	2b20      	cmp	r3, #32
 8005326:	d060      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15a>
 8005328:	2b20      	cmp	r3, #32
 800532a:	d867      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d05c      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15a>
 8005330:	2b10      	cmp	r3, #16
 8005332:	d05a      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15a>
 8005334:	e062      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005346:	f000 faf7 	bl	8005938 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	609a      	str	r2, [r3, #8]
      break;
 8005362:	e04f      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005374:	f000 fae0 	bl	8005938 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005386:	609a      	str	r2, [r3, #8]
      break;
 8005388:	e03c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005396:	461a      	mov	r2, r3
 8005398:	f000 fa54 	bl	8005844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2150      	movs	r1, #80	@ 0x50
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 faad 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 80053a8:	e02c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b6:	461a      	mov	r2, r3
 80053b8:	f000 fa73 	bl	80058a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2160      	movs	r1, #96	@ 0x60
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fa9d 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 80053c8:	e01c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d6:	461a      	mov	r2, r3
 80053d8:	f000 fa34 	bl	8005844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2140      	movs	r1, #64	@ 0x40
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fa8d 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 80053e8:	e00c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f000 fa84 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 80053fa:	e003      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e000      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a37      	ldr	r2, [pc, #220]	@ (8005510 <TIM_Base_SetConfig+0xf0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00f      	beq.n	8005458 <TIM_Base_SetConfig+0x38>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543e:	d00b      	beq.n	8005458 <TIM_Base_SetConfig+0x38>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a34      	ldr	r2, [pc, #208]	@ (8005514 <TIM_Base_SetConfig+0xf4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <TIM_Base_SetConfig+0x38>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a33      	ldr	r2, [pc, #204]	@ (8005518 <TIM_Base_SetConfig+0xf8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_Base_SetConfig+0x38>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a32      	ldr	r2, [pc, #200]	@ (800551c <TIM_Base_SetConfig+0xfc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d108      	bne.n	800546a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800545e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a28      	ldr	r2, [pc, #160]	@ (8005510 <TIM_Base_SetConfig+0xf0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01b      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005478:	d017      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a25      	ldr	r2, [pc, #148]	@ (8005514 <TIM_Base_SetConfig+0xf4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a24      	ldr	r2, [pc, #144]	@ (8005518 <TIM_Base_SetConfig+0xf8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00f      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a23      	ldr	r2, [pc, #140]	@ (800551c <TIM_Base_SetConfig+0xfc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00b      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a22      	ldr	r2, [pc, #136]	@ (8005520 <TIM_Base_SetConfig+0x100>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a21      	ldr	r2, [pc, #132]	@ (8005524 <TIM_Base_SetConfig+0x104>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_Base_SetConfig+0x8a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a20      	ldr	r2, [pc, #128]	@ (8005528 <TIM_Base_SetConfig+0x108>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d108      	bne.n	80054bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005510 <TIM_Base_SetConfig+0xf0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d103      	bne.n	80054ea <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f043 0204 	orr.w	r2, r3, #4
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	601a      	str	r2, [r3, #0]
}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40010000 	.word	0x40010000
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40014000 	.word	0x40014000
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800

0800552c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f023 0201 	bic.w	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0303 	bic.w	r3, r3, #3
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f023 0302 	bic.w	r3, r3, #2
 8005574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a1c      	ldr	r2, [pc, #112]	@ (80055f4 <TIM_OC1_SetConfig+0xc8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d10c      	bne.n	80055a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0308 	bic.w	r3, r3, #8
 800558e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a13      	ldr	r2, [pc, #76]	@ (80055f4 <TIM_OC1_SetConfig+0xc8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d111      	bne.n	80055ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	621a      	str	r2, [r3, #32]
}
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40010000 	.word	0x40010000

080055f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f023 0210 	bic.w	r2, r3, #16
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800562e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0320 	bic.w	r3, r3, #32
 8005642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a1e      	ldr	r2, [pc, #120]	@ (80056cc <TIM_OC2_SetConfig+0xd4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d10d      	bne.n	8005674 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800565e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a15      	ldr	r2, [pc, #84]	@ (80056cc <TIM_OC2_SetConfig+0xd4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d113      	bne.n	80056a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800568a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40010000 	.word	0x40010000

080056d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a1d      	ldr	r2, [pc, #116]	@ (80057a0 <TIM_OC3_SetConfig+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10d      	bne.n	800574a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a14      	ldr	r2, [pc, #80]	@ (80057a0 <TIM_OC3_SetConfig+0xd0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d113      	bne.n	800577a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40010000 	.word	0x40010000

080057a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	031b      	lsls	r3, r3, #12
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a10      	ldr	r2, [pc, #64]	@ (8005840 <TIM_OC4_SetConfig+0x9c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d109      	bne.n	8005818 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800580a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	019b      	lsls	r3, r3, #6
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40010000 	.word	0x40010000

08005844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f023 0201 	bic.w	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800586e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 030a 	bic.w	r3, r3, #10
 8005880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b087      	sub	sp, #28
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f023 0210 	bic.w	r2, r3, #16
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	031b      	lsls	r3, r3, #12
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	f043 0307 	orr.w	r3, r3, #7
 8005924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	431a      	orrs	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4313      	orrs	r3, r2
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800598c:	2302      	movs	r3, #2
 800598e:	e050      	b.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d018      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059dc:	d013      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a18      	ldr	r2, [pc, #96]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a16      	ldr	r2, [pc, #88]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a15      	ldr	r2, [pc, #84]	@ (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a13      	ldr	r2, [pc, #76]	@ (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d10c      	bne.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40014000 	.word	0x40014000

08005a54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e03d      	b.n	8005aec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e042      	b.n	8005b90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fc f966 	bl	8001df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2224      	movs	r2, #36	@ 0x24
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f973 	bl	8005e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	@ 0x28
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d175      	bne.n	8005ca4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_UART_Transmit+0x2c>
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e06e      	b.n	8005ca6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2221      	movs	r2, #33	@ 0x21
 8005bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bd6:	f7fc fb63 	bl	80022a0 <HAL_GetTick>
 8005bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	88fa      	ldrh	r2, [r7, #6]
 8005be0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	88fa      	ldrh	r2, [r7, #6]
 8005be6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bf0:	d108      	bne.n	8005c04 <HAL_UART_Transmit+0x6c>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d104      	bne.n	8005c04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e003      	b.n	8005c0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c0c:	e02e      	b.n	8005c6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	2180      	movs	r1, #128	@ 0x80
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f848 	bl	8005cae <UART_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e03a      	b.n	8005ca6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10b      	bne.n	8005c4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	3302      	adds	r3, #2
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	e007      	b.n	8005c5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1cb      	bne.n	8005c0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2140      	movs	r1, #64	@ 0x40
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f814 	bl	8005cae <UART_WaitOnFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e006      	b.n	8005ca6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e000      	b.n	8005ca6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ca4:	2302      	movs	r3, #2
  }
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3720      	adds	r7, #32
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b086      	sub	sp, #24
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	603b      	str	r3, [r7, #0]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cbe:	e03b      	b.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d037      	beq.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc8:	f7fc faea 	bl	80022a0 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <UART_WaitOnFlagUntilTimeout+0x30>
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e03a      	b.n	8005d58 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d023      	beq.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b80      	cmp	r3, #128	@ 0x80
 8005cf4:	d020      	beq.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b40      	cmp	r3, #64	@ 0x40
 8005cfa:	d01d      	beq.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d116      	bne.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f81d 	bl	8005d60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2208      	movs	r2, #8
 8005d2a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e00f      	b.n	8005d58 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	bf0c      	ite	eq
 8005d48:	2301      	moveq	r3, #1
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d0b4      	beq.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b095      	sub	sp, #84	@ 0x54
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d88:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e5      	bne.n	8005d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3314      	adds	r3, #20
 8005da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3314      	adds	r3, #20
 8005dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d119      	bne.n	8005e0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f023 0310 	bic.w	r3, r3, #16
 8005dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005df8:	61ba      	str	r2, [r7, #24]
 8005dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6979      	ldr	r1, [r7, #20]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	613b      	str	r3, [r7, #16]
   return(result);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e5      	bne.n	8005dd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e1a:	bf00      	nop
 8005e1c:	3754      	adds	r7, #84	@ 0x54
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e2c:	b0c0      	sub	sp, #256	@ 0x100
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	68d9      	ldr	r1, [r3, #12]
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	ea40 0301 	orr.w	r3, r0, r1
 8005e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e80:	f021 010c 	bic.w	r1, r1, #12
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea2:	6999      	ldr	r1, [r3, #24]
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	ea40 0301 	orr.w	r3, r0, r1
 8005eae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4b8f      	ldr	r3, [pc, #572]	@ (80060f4 <UART_SetConfig+0x2cc>)
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d005      	beq.n	8005ec8 <UART_SetConfig+0xa0>
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b8d      	ldr	r3, [pc, #564]	@ (80060f8 <UART_SetConfig+0x2d0>)
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d104      	bne.n	8005ed2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ec8:	f7ff f864 	bl	8004f94 <HAL_RCC_GetPCLK2Freq>
 8005ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ed0:	e003      	b.n	8005eda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ed2:	f7ff f84b 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 8005ed6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ee4:	f040 810c 	bne.w	8006100 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005efa:	4622      	mov	r2, r4
 8005efc:	462b      	mov	r3, r5
 8005efe:	1891      	adds	r1, r2, r2
 8005f00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f02:	415b      	adcs	r3, r3
 8005f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	eb12 0801 	adds.w	r8, r2, r1
 8005f10:	4629      	mov	r1, r5
 8005f12:	eb43 0901 	adc.w	r9, r3, r1
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f2a:	4690      	mov	r8, r2
 8005f2c:	4699      	mov	r9, r3
 8005f2e:	4623      	mov	r3, r4
 8005f30:	eb18 0303 	adds.w	r3, r8, r3
 8005f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f38:	462b      	mov	r3, r5
 8005f3a:	eb49 0303 	adc.w	r3, r9, r3
 8005f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f56:	460b      	mov	r3, r1
 8005f58:	18db      	adds	r3, r3, r3
 8005f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	eb42 0303 	adc.w	r3, r2, r3
 8005f62:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f6c:	f7fa fe74 	bl	8000c58 <__aeabi_uldivmod>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4b61      	ldr	r3, [pc, #388]	@ (80060fc <UART_SetConfig+0x2d4>)
 8005f76:	fba3 2302 	umull	r2, r3, r3, r2
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	011c      	lsls	r4, r3, #4
 8005f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f90:	4642      	mov	r2, r8
 8005f92:	464b      	mov	r3, r9
 8005f94:	1891      	adds	r1, r2, r2
 8005f96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f98:	415b      	adcs	r3, r3
 8005f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fc0:	4692      	mov	sl, r2
 8005fc2:	469b      	mov	fp, r3
 8005fc4:	4643      	mov	r3, r8
 8005fc6:	eb1a 0303 	adds.w	r3, sl, r3
 8005fca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fce:	464b      	mov	r3, r9
 8005fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8005fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fec:	460b      	mov	r3, r1
 8005fee:	18db      	adds	r3, r3, r3
 8005ff0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	eb42 0303 	adc.w	r3, r2, r3
 8005ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006002:	f7fa fe29 	bl	8000c58 <__aeabi_uldivmod>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4611      	mov	r1, r2
 800600c:	4b3b      	ldr	r3, [pc, #236]	@ (80060fc <UART_SetConfig+0x2d4>)
 800600e:	fba3 2301 	umull	r2, r3, r3, r1
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	2264      	movs	r2, #100	@ 0x64
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	1acb      	subs	r3, r1, r3
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006022:	4b36      	ldr	r3, [pc, #216]	@ (80060fc <UART_SetConfig+0x2d4>)
 8006024:	fba3 2302 	umull	r2, r3, r3, r2
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006030:	441c      	add	r4, r3
 8006032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006036:	2200      	movs	r2, #0
 8006038:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800603c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006040:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006044:	4642      	mov	r2, r8
 8006046:	464b      	mov	r3, r9
 8006048:	1891      	adds	r1, r2, r2
 800604a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800604c:	415b      	adcs	r3, r3
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006054:	4641      	mov	r1, r8
 8006056:	1851      	adds	r1, r2, r1
 8006058:	6339      	str	r1, [r7, #48]	@ 0x30
 800605a:	4649      	mov	r1, r9
 800605c:	414b      	adcs	r3, r1
 800605e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800606c:	4659      	mov	r1, fp
 800606e:	00cb      	lsls	r3, r1, #3
 8006070:	4651      	mov	r1, sl
 8006072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006076:	4651      	mov	r1, sl
 8006078:	00ca      	lsls	r2, r1, #3
 800607a:	4610      	mov	r0, r2
 800607c:	4619      	mov	r1, r3
 800607e:	4603      	mov	r3, r0
 8006080:	4642      	mov	r2, r8
 8006082:	189b      	adds	r3, r3, r2
 8006084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006088:	464b      	mov	r3, r9
 800608a:	460a      	mov	r2, r1
 800608c:	eb42 0303 	adc.w	r3, r2, r3
 8006090:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060a8:	460b      	mov	r3, r1
 80060aa:	18db      	adds	r3, r3, r3
 80060ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ae:	4613      	mov	r3, r2
 80060b0:	eb42 0303 	adc.w	r3, r2, r3
 80060b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060be:	f7fa fdcb 	bl	8000c58 <__aeabi_uldivmod>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4b0d      	ldr	r3, [pc, #52]	@ (80060fc <UART_SetConfig+0x2d4>)
 80060c8:	fba3 1302 	umull	r1, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	2164      	movs	r1, #100	@ 0x64
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	3332      	adds	r3, #50	@ 0x32
 80060da:	4a08      	ldr	r2, [pc, #32]	@ (80060fc <UART_SetConfig+0x2d4>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	f003 0207 	and.w	r2, r3, #7
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4422      	add	r2, r4
 80060ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060f0:	e106      	b.n	8006300 <UART_SetConfig+0x4d8>
 80060f2:	bf00      	nop
 80060f4:	40011000 	.word	0x40011000
 80060f8:	40011400 	.word	0x40011400
 80060fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006104:	2200      	movs	r2, #0
 8006106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800610a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800610e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006112:	4642      	mov	r2, r8
 8006114:	464b      	mov	r3, r9
 8006116:	1891      	adds	r1, r2, r2
 8006118:	6239      	str	r1, [r7, #32]
 800611a:	415b      	adcs	r3, r3
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
 800611e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006122:	4641      	mov	r1, r8
 8006124:	1854      	adds	r4, r2, r1
 8006126:	4649      	mov	r1, r9
 8006128:	eb43 0501 	adc.w	r5, r3, r1
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	00eb      	lsls	r3, r5, #3
 8006136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800613a:	00e2      	lsls	r2, r4, #3
 800613c:	4614      	mov	r4, r2
 800613e:	461d      	mov	r5, r3
 8006140:	4643      	mov	r3, r8
 8006142:	18e3      	adds	r3, r4, r3
 8006144:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006148:	464b      	mov	r3, r9
 800614a:	eb45 0303 	adc.w	r3, r5, r3
 800614e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800615e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800616e:	4629      	mov	r1, r5
 8006170:	008b      	lsls	r3, r1, #2
 8006172:	4621      	mov	r1, r4
 8006174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006178:	4621      	mov	r1, r4
 800617a:	008a      	lsls	r2, r1, #2
 800617c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006180:	f7fa fd6a 	bl	8000c58 <__aeabi_uldivmod>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4b60      	ldr	r3, [pc, #384]	@ (800630c <UART_SetConfig+0x4e4>)
 800618a:	fba3 2302 	umull	r2, r3, r3, r2
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	011c      	lsls	r4, r3, #4
 8006192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006196:	2200      	movs	r2, #0
 8006198:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800619c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061a4:	4642      	mov	r2, r8
 80061a6:	464b      	mov	r3, r9
 80061a8:	1891      	adds	r1, r2, r2
 80061aa:	61b9      	str	r1, [r7, #24]
 80061ac:	415b      	adcs	r3, r3
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061b4:	4641      	mov	r1, r8
 80061b6:	1851      	adds	r1, r2, r1
 80061b8:	6139      	str	r1, [r7, #16]
 80061ba:	4649      	mov	r1, r9
 80061bc:	414b      	adcs	r3, r1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061cc:	4659      	mov	r1, fp
 80061ce:	00cb      	lsls	r3, r1, #3
 80061d0:	4651      	mov	r1, sl
 80061d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061d6:	4651      	mov	r1, sl
 80061d8:	00ca      	lsls	r2, r1, #3
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	4642      	mov	r2, r8
 80061e2:	189b      	adds	r3, r3, r2
 80061e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061e8:	464b      	mov	r3, r9
 80061ea:	460a      	mov	r2, r1
 80061ec:	eb42 0303 	adc.w	r3, r2, r3
 80061f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800620c:	4649      	mov	r1, r9
 800620e:	008b      	lsls	r3, r1, #2
 8006210:	4641      	mov	r1, r8
 8006212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006216:	4641      	mov	r1, r8
 8006218:	008a      	lsls	r2, r1, #2
 800621a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800621e:	f7fa fd1b 	bl	8000c58 <__aeabi_uldivmod>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4611      	mov	r1, r2
 8006228:	4b38      	ldr	r3, [pc, #224]	@ (800630c <UART_SetConfig+0x4e4>)
 800622a:	fba3 2301 	umull	r2, r3, r3, r1
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	2264      	movs	r2, #100	@ 0x64
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	1acb      	subs	r3, r1, r3
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	3332      	adds	r3, #50	@ 0x32
 800623c:	4a33      	ldr	r2, [pc, #204]	@ (800630c <UART_SetConfig+0x4e4>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006248:	441c      	add	r4, r3
 800624a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800624e:	2200      	movs	r2, #0
 8006250:	673b      	str	r3, [r7, #112]	@ 0x70
 8006252:	677a      	str	r2, [r7, #116]	@ 0x74
 8006254:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006258:	4642      	mov	r2, r8
 800625a:	464b      	mov	r3, r9
 800625c:	1891      	adds	r1, r2, r2
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	415b      	adcs	r3, r3
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006268:	4641      	mov	r1, r8
 800626a:	1851      	adds	r1, r2, r1
 800626c:	6039      	str	r1, [r7, #0]
 800626e:	4649      	mov	r1, r9
 8006270:	414b      	adcs	r3, r1
 8006272:	607b      	str	r3, [r7, #4]
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006280:	4659      	mov	r1, fp
 8006282:	00cb      	lsls	r3, r1, #3
 8006284:	4651      	mov	r1, sl
 8006286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800628a:	4651      	mov	r1, sl
 800628c:	00ca      	lsls	r2, r1, #3
 800628e:	4610      	mov	r0, r2
 8006290:	4619      	mov	r1, r3
 8006292:	4603      	mov	r3, r0
 8006294:	4642      	mov	r2, r8
 8006296:	189b      	adds	r3, r3, r2
 8006298:	66bb      	str	r3, [r7, #104]	@ 0x68
 800629a:	464b      	mov	r3, r9
 800629c:	460a      	mov	r2, r1
 800629e:	eb42 0303 	adc.w	r3, r2, r3
 80062a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80062ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062bc:	4649      	mov	r1, r9
 80062be:	008b      	lsls	r3, r1, #2
 80062c0:	4641      	mov	r1, r8
 80062c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c6:	4641      	mov	r1, r8
 80062c8:	008a      	lsls	r2, r1, #2
 80062ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062ce:	f7fa fcc3 	bl	8000c58 <__aeabi_uldivmod>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <UART_SetConfig+0x4e4>)
 80062d8:	fba3 1302 	umull	r1, r3, r3, r2
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	2164      	movs	r1, #100	@ 0x64
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	3332      	adds	r3, #50	@ 0x32
 80062ea:	4a08      	ldr	r2, [pc, #32]	@ (800630c <UART_SetConfig+0x4e4>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	f003 020f 	and.w	r2, r3, #15
 80062f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4422      	add	r2, r4
 80062fe:	609a      	str	r2, [r3, #8]
}
 8006300:	bf00      	nop
 8006302:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006306:	46bd      	mov	sp, r7
 8006308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630c:	51eb851f 	.word	0x51eb851f

08006310 <__NVIC_SetPriority>:
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	6039      	str	r1, [r7, #0]
 800631a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800631c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006320:	2b00      	cmp	r3, #0
 8006322:	db0a      	blt.n	800633a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	b2da      	uxtb	r2, r3
 8006328:	490c      	ldr	r1, [pc, #48]	@ (800635c <__NVIC_SetPriority+0x4c>)
 800632a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632e:	0112      	lsls	r2, r2, #4
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	440b      	add	r3, r1
 8006334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006338:	e00a      	b.n	8006350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	4908      	ldr	r1, [pc, #32]	@ (8006360 <__NVIC_SetPriority+0x50>)
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	3b04      	subs	r3, #4
 8006348:	0112      	lsls	r2, r2, #4
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	440b      	add	r3, r1
 800634e:	761a      	strb	r2, [r3, #24]
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	e000e100 	.word	0xe000e100
 8006360:	e000ed00 	.word	0xe000ed00

08006364 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006368:	2100      	movs	r1, #0
 800636a:	f06f 0004 	mvn.w	r0, #4
 800636e:	f7ff ffcf 	bl	8006310 <__NVIC_SetPriority>
#endif
}
 8006372:	bf00      	nop
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800637e:	f3ef 8305 	mrs	r3, IPSR
 8006382:	603b      	str	r3, [r7, #0]
  return(result);
 8006384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800638a:	f06f 0305 	mvn.w	r3, #5
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	e00c      	b.n	80063ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006392:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <osKernelInitialize+0x44>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d105      	bne.n	80063a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800639a:	4b08      	ldr	r3, [pc, #32]	@ (80063bc <osKernelInitialize+0x44>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	607b      	str	r3, [r7, #4]
 80063a4:	e002      	b.n	80063ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80063a6:	f04f 33ff 	mov.w	r3, #4294967295
 80063aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063ac:	687b      	ldr	r3, [r7, #4]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000640 	.word	0x20000640

080063c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063c6:	f3ef 8305 	mrs	r3, IPSR
 80063ca:	603b      	str	r3, [r7, #0]
  return(result);
 80063cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <osKernelStart+0x1a>
    stat = osErrorISR;
 80063d2:	f06f 0305 	mvn.w	r3, #5
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	e010      	b.n	80063fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063da:	4b0b      	ldr	r3, [pc, #44]	@ (8006408 <osKernelStart+0x48>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d109      	bne.n	80063f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063e2:	f7ff ffbf 	bl	8006364 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063e6:	4b08      	ldr	r3, [pc, #32]	@ (8006408 <osKernelStart+0x48>)
 80063e8:	2202      	movs	r2, #2
 80063ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063ec:	f001 fd56 	bl	8007e9c <vTaskStartScheduler>
      stat = osOK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	607b      	str	r3, [r7, #4]
 80063f4:	e002      	b.n	80063fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80063f6:	f04f 33ff 	mov.w	r3, #4294967295
 80063fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063fc:	687b      	ldr	r3, [r7, #4]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000640 	.word	0x20000640

0800640c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800640c:	b580      	push	{r7, lr}
 800640e:	b08e      	sub	sp, #56	@ 0x38
 8006410:	af04      	add	r7, sp, #16
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800641c:	f3ef 8305 	mrs	r3, IPSR
 8006420:	617b      	str	r3, [r7, #20]
  return(result);
 8006422:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006424:	2b00      	cmp	r3, #0
 8006426:	d17e      	bne.n	8006526 <osThreadNew+0x11a>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d07b      	beq.n	8006526 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800642e:	2380      	movs	r3, #128	@ 0x80
 8006430:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006432:	2318      	movs	r3, #24
 8006434:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800643a:	f04f 33ff 	mov.w	r3, #4294967295
 800643e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d045      	beq.n	80064d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <osThreadNew+0x48>
        name = attr->name;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <osThreadNew+0x6e>
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b38      	cmp	r3, #56	@ 0x38
 800646c:	d805      	bhi.n	800647a <osThreadNew+0x6e>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <osThreadNew+0x72>
        return (NULL);
 800647a:	2300      	movs	r3, #0
 800647c:	e054      	b.n	8006528 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	089b      	lsrs	r3, r3, #2
 800648c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00e      	beq.n	80064b4 <osThreadNew+0xa8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	2b5b      	cmp	r3, #91	@ 0x5b
 800649c:	d90a      	bls.n	80064b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d006      	beq.n	80064b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <osThreadNew+0xa8>
        mem = 1;
 80064ae:	2301      	movs	r3, #1
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	e010      	b.n	80064d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10c      	bne.n	80064d6 <osThreadNew+0xca>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d108      	bne.n	80064d6 <osThreadNew+0xca>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d104      	bne.n	80064d6 <osThreadNew+0xca>
          mem = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	e001      	b.n	80064d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d110      	bne.n	80064fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064e4:	9202      	str	r2, [sp, #8]
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6a3a      	ldr	r2, [r7, #32]
 80064f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f001 faf6 	bl	8007ae4 <xTaskCreateStatic>
 80064f8:	4603      	mov	r3, r0
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	e013      	b.n	8006526 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d110      	bne.n	8006526 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	b29a      	uxth	r2, r3
 8006508:	f107 0310 	add.w	r3, r7, #16
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f001 fb44 	bl	8007ba4 <xTaskCreate>
 800651c:	4603      	mov	r3, r0
 800651e:	2b01      	cmp	r3, #1
 8006520:	d001      	beq.n	8006526 <osThreadNew+0x11a>
            hTask = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006526:	693b      	ldr	r3, [r7, #16]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3728      	adds	r7, #40	@ 0x28
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006538:	f3ef 8305 	mrs	r3, IPSR
 800653c:	60bb      	str	r3, [r7, #8]
  return(result);
 800653e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <osDelay+0x1c>
    stat = osErrorISR;
 8006544:	f06f 0305 	mvn.w	r3, #5
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	e007      	b.n	800655c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 fc6a 	bl	8007e30 <vTaskDelay>
    }
  }

  return (stat);
 800655c:	68fb      	ldr	r3, [r7, #12]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006566:	b580      	push	{r7, lr}
 8006568:	b088      	sub	sp, #32
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006572:	f3ef 8305 	mrs	r3, IPSR
 8006576:	60bb      	str	r3, [r7, #8]
  return(result);
 8006578:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800657a:	2b00      	cmp	r3, #0
 800657c:	d174      	bne.n	8006668 <osMutexNew+0x102>
    if (attr != NULL) {
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <osMutexNew+0x26>
      type = attr->attr_bits;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	e001      	b.n	8006590 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <osMutexNew+0x3a>
      rmtx = 1U;
 800659a:	2301      	movs	r3, #1
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e001      	b.n	80065a4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d15c      	bne.n	8006668 <osMutexNew+0x102>
      mem = -1;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d015      	beq.n	80065e6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d006      	beq.n	80065d0 <osMutexNew+0x6a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80065c8:	d902      	bls.n	80065d0 <osMutexNew+0x6a>
          mem = 1;
 80065ca:	2301      	movs	r3, #1
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	e00c      	b.n	80065ea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d108      	bne.n	80065ea <osMutexNew+0x84>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <osMutexNew+0x84>
            mem = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	e001      	b.n	80065ea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d112      	bne.n	8006616 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	4619      	mov	r1, r3
 80065fc:	2004      	movs	r0, #4
 80065fe:	f000 fc50 	bl	8006ea2 <xQueueCreateMutexStatic>
 8006602:	61f8      	str	r0, [r7, #28]
 8006604:	e016      	b.n	8006634 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4619      	mov	r1, r3
 800660c:	2001      	movs	r0, #1
 800660e:	f000 fc48 	bl	8006ea2 <xQueueCreateMutexStatic>
 8006612:	61f8      	str	r0, [r7, #28]
 8006614:	e00e      	b.n	8006634 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d004      	beq.n	800662c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006622:	2004      	movs	r0, #4
 8006624:	f000 fc25 	bl	8006e72 <xQueueCreateMutex>
 8006628:	61f8      	str	r0, [r7, #28]
 800662a:	e003      	b.n	8006634 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800662c:	2001      	movs	r0, #1
 800662e:	f000 fc20 	bl	8006e72 <xQueueCreateMutex>
 8006632:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <osMutexNew+0xee>
        if (attr != NULL) {
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <osMutexNew+0xe2>
          name = attr->name;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e001      	b.n	800664c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800664c:	68f9      	ldr	r1, [r7, #12]
 800664e:	69f8      	ldr	r0, [r7, #28]
 8006650:	f001 f9ea 	bl	8007a28 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d006      	beq.n	8006668 <osMutexNew+0x102>
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006668:	69fb      	ldr	r3, [r7, #28]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006672:	b580      	push	{r7, lr}
 8006674:	b086      	sub	sp, #24
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f023 0301 	bic.w	r3, r3, #1
 8006682:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006690:	f3ef 8305 	mrs	r3, IPSR
 8006694:	60bb      	str	r3, [r7, #8]
  return(result);
 8006696:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800669c:	f06f 0305 	mvn.w	r3, #5
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e02c      	b.n	80066fe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d103      	bne.n	80066b2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80066aa:	f06f 0303 	mvn.w	r3, #3
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e025      	b.n	80066fe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d011      	beq.n	80066dc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6938      	ldr	r0, [r7, #16]
 80066bc:	f000 fc41 	bl	8006f42 <xQueueTakeMutexRecursive>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d01b      	beq.n	80066fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d003      	beq.n	80066d4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80066cc:	f06f 0301 	mvn.w	r3, #1
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e014      	b.n	80066fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80066d4:	f06f 0302 	mvn.w	r3, #2
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e010      	b.n	80066fe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6938      	ldr	r0, [r7, #16]
 80066e0:	f000 fee8 	bl	80074b4 <xQueueSemaphoreTake>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d009      	beq.n	80066fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80066f0:	f06f 0301 	mvn.w	r3, #1
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	e002      	b.n	80066fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80066f8:	f06f 0302 	mvn.w	r3, #2
 80066fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80066fe:	697b      	ldr	r3, [r7, #20]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006724:	f3ef 8305 	mrs	r3, IPSR
 8006728:	60bb      	str	r3, [r7, #8]
  return(result);
 800672a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006730:	f06f 0305 	mvn.w	r3, #5
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e01f      	b.n	8006778 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800673e:	f06f 0303 	mvn.w	r3, #3
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	e018      	b.n	8006778 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d009      	beq.n	8006760 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800674c:	6938      	ldr	r0, [r7, #16]
 800674e:	f000 fbc3 	bl	8006ed8 <xQueueGiveMutexRecursive>
 8006752:	4603      	mov	r3, r0
 8006754:	2b01      	cmp	r3, #1
 8006756:	d00f      	beq.n	8006778 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006758:	f06f 0302 	mvn.w	r3, #2
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e00b      	b.n	8006778 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006760:	2300      	movs	r3, #0
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	6938      	ldr	r0, [r7, #16]
 8006768:	f000 fc22 	bl	8006fb0 <xQueueGenericSend>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	d002      	beq.n	8006778 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006772:	f06f 0302 	mvn.w	r3, #2
 8006776:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006778:	697b      	ldr	r3, [r7, #20]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006782:	b580      	push	{r7, lr}
 8006784:	b08a      	sub	sp, #40	@ 0x28
 8006786:	af02      	add	r7, sp, #8
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006792:	f3ef 8305 	mrs	r3, IPSR
 8006796:	613b      	str	r3, [r7, #16]
  return(result);
 8006798:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800679a:	2b00      	cmp	r3, #0
 800679c:	d15f      	bne.n	800685e <osMessageQueueNew+0xdc>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d05c      	beq.n	800685e <osMessageQueueNew+0xdc>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d059      	beq.n	800685e <osMessageQueueNew+0xdc>
    mem = -1;
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
 80067ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d029      	beq.n	800680a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d012      	beq.n	80067e4 <osMessageQueueNew+0x62>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80067c4:	d90e      	bls.n	80067e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695a      	ldr	r2, [r3, #20]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	fb01 f303 	mul.w	r3, r1, r3
 80067da:	429a      	cmp	r2, r3
 80067dc:	d302      	bcc.n	80067e4 <osMessageQueueNew+0x62>
        mem = 1;
 80067de:	2301      	movs	r3, #1
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	e014      	b.n	800680e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d110      	bne.n	800680e <osMessageQueueNew+0x8c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10c      	bne.n	800680e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d108      	bne.n	800680e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d104      	bne.n	800680e <osMessageQueueNew+0x8c>
          mem = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	e001      	b.n	800680e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d10b      	bne.n	800682c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2100      	movs	r1, #0
 800681e:	9100      	str	r1, [sp, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fa30 	bl	8006c88 <xQueueGenericCreateStatic>
 8006828:	61f8      	str	r0, [r7, #28]
 800682a:	e008      	b.n	800683e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d105      	bne.n	800683e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006832:	2200      	movs	r2, #0
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 faa3 	bl	8006d82 <xQueueGenericCreate>
 800683c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00c      	beq.n	800685e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <osMessageQueueNew+0xd0>
        name = attr->name;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e001      	b.n	8006856 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006856:	6979      	ldr	r1, [r7, #20]
 8006858:	69f8      	ldr	r0, [r7, #28]
 800685a:	f001 f8e5 	bl	8007a28 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800685e:	69fb      	ldr	r3, [r7, #28]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006880:	f3ef 8305 	mrs	r3, IPSR
 8006884:	617b      	str	r3, [r7, #20]
  return(result);
 8006886:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006888:	2b00      	cmp	r3, #0
 800688a:	d028      	beq.n	80068de <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <osMessageQueuePut+0x36>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <osMessageQueuePut+0x36>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800689e:	f06f 0303 	mvn.w	r3, #3
 80068a2:	61fb      	str	r3, [r7, #28]
 80068a4:	e038      	b.n	8006918 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80068a6:	2300      	movs	r3, #0
 80068a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80068aa:	f107 0210 	add.w	r2, r7, #16
 80068ae:	2300      	movs	r3, #0
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	69b8      	ldr	r0, [r7, #24]
 80068b4:	f000 fc7e 	bl	80071b4 <xQueueGenericSendFromISR>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d003      	beq.n	80068c6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80068be:	f06f 0302 	mvn.w	r3, #2
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	e028      	b.n	8006918 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d025      	beq.n	8006918 <osMessageQueuePut+0xb0>
 80068cc:	4b15      	ldr	r3, [pc, #84]	@ (8006924 <osMessageQueuePut+0xbc>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	e01c      	b.n	8006918 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <osMessageQueuePut+0x82>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80068ea:	f06f 0303 	mvn.w	r3, #3
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	e012      	b.n	8006918 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80068f2:	2300      	movs	r3, #0
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	69b8      	ldr	r0, [r7, #24]
 80068fa:	f000 fb59 	bl	8006fb0 <xQueueGenericSend>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b01      	cmp	r3, #1
 8006902:	d009      	beq.n	8006918 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800690a:	f06f 0301 	mvn.w	r3, #1
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e002      	b.n	8006918 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006912:	f06f 0302 	mvn.w	r3, #2
 8006916:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006918:	69fb      	ldr	r3, [r7, #28]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800693a:	2300      	movs	r3, #0
 800693c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800693e:	f3ef 8305 	mrs	r3, IPSR
 8006942:	617b      	str	r3, [r7, #20]
  return(result);
 8006944:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006946:	2b00      	cmp	r3, #0
 8006948:	d028      	beq.n	800699c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d005      	beq.n	800695c <osMessageQueueGet+0x34>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <osMessageQueueGet+0x34>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800695c:	f06f 0303 	mvn.w	r3, #3
 8006960:	61fb      	str	r3, [r7, #28]
 8006962:	e037      	b.n	80069d4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006968:	f107 0310 	add.w	r3, r7, #16
 800696c:	461a      	mov	r2, r3
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	69b8      	ldr	r0, [r7, #24]
 8006972:	f000 feaf 	bl	80076d4 <xQueueReceiveFromISR>
 8006976:	4603      	mov	r3, r0
 8006978:	2b01      	cmp	r3, #1
 800697a:	d003      	beq.n	8006984 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800697c:	f06f 0302 	mvn.w	r3, #2
 8006980:	61fb      	str	r3, [r7, #28]
 8006982:	e027      	b.n	80069d4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d024      	beq.n	80069d4 <osMessageQueueGet+0xac>
 800698a:	4b15      	ldr	r3, [pc, #84]	@ (80069e0 <osMessageQueueGet+0xb8>)
 800698c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	e01b      	b.n	80069d4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <osMessageQueueGet+0x80>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d103      	bne.n	80069b0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80069a8:	f06f 0303 	mvn.w	r3, #3
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	e011      	b.n	80069d4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	69b8      	ldr	r0, [r7, #24]
 80069b6:	f000 fc9b 	bl	80072f0 <xQueueReceive>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d009      	beq.n	80069d4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80069c6:	f06f 0301 	mvn.w	r3, #1
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	e002      	b.n	80069d4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80069ce:	f06f 0302 	mvn.w	r3, #2
 80069d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80069d4:	69fb      	ldr	r3, [r7, #28]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	e000ed04 	.word	0xe000ed04

080069e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4a07      	ldr	r2, [pc, #28]	@ (8006a10 <vApplicationGetIdleTaskMemory+0x2c>)
 80069f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	4a06      	ldr	r2, [pc, #24]	@ (8006a14 <vApplicationGetIdleTaskMemory+0x30>)
 80069fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2280      	movs	r2, #128	@ 0x80
 8006a00:	601a      	str	r2, [r3, #0]
}
 8006a02:	bf00      	nop
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	20000644 	.word	0x20000644
 8006a14:	200006a0 	.word	0x200006a0

08006a18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4a07      	ldr	r2, [pc, #28]	@ (8006a44 <vApplicationGetTimerTaskMemory+0x2c>)
 8006a28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	4a06      	ldr	r2, [pc, #24]	@ (8006a48 <vApplicationGetTimerTaskMemory+0x30>)
 8006a2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a36:	601a      	str	r2, [r3, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	200008a0 	.word	0x200008a0
 8006a48:	200008fc 	.word	0x200008fc

08006a4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f103 0208 	add.w	r2, r3, #8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f04f 32ff 	mov.w	r2, #4294967295
 8006a64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f103 0208 	add.w	r2, r3, #8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f103 0208 	add.w	r2, r3, #8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	601a      	str	r2, [r3, #0]
}
 8006ae2:	bf00      	nop
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d103      	bne.n	8006b0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e00c      	b.n	8006b28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3308      	adds	r3, #8
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	e002      	b.n	8006b1c <vListInsert+0x2e>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d2f6      	bcs.n	8006b16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
}
 8006b54:	bf00      	nop
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6892      	ldr	r2, [r2, #8]
 8006b76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6852      	ldr	r2, [r2, #4]
 8006b80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d103      	bne.n	8006b94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	1e5a      	subs	r2, r3, #1
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10b      	bne.n	8006be0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bda:	bf00      	nop
 8006bdc:	bf00      	nop
 8006bde:	e7fd      	b.n	8006bdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006be0:	f002 fc2a 	bl	8009438 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bec:	68f9      	ldr	r1, [r7, #12]
 8006bee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bf0:	fb01 f303 	mul.w	r3, r1, r3
 8006bf4:	441a      	add	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c10:	3b01      	subs	r3, #1
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c16:	fb01 f303 	mul.w	r3, r1, r3
 8006c1a:	441a      	add	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	22ff      	movs	r2, #255	@ 0xff
 8006c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	22ff      	movs	r2, #255	@ 0xff
 8006c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d114      	bne.n	8006c60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01a      	beq.n	8006c74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3310      	adds	r3, #16
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 fbb8 	bl	80083b8 <xTaskRemoveFromEventList>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d012      	beq.n	8006c74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <xQueueGenericReset+0xd0>)
 8006c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	e009      	b.n	8006c74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3310      	adds	r3, #16
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff fef1 	bl	8006a4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3324      	adds	r3, #36	@ 0x24
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff feec 	bl	8006a4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c74:	f002 fc12 	bl	800949c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c78:	2301      	movs	r3, #1
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	e000ed04 	.word	0xe000ed04

08006c88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08e      	sub	sp, #56	@ 0x38
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10b      	bne.n	8006cb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cae:	bf00      	nop
 8006cb0:	bf00      	nop
 8006cb2:	e7fd      	b.n	8006cb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	e7fd      	b.n	8006cce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <xQueueGenericCreateStatic+0x56>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <xQueueGenericCreateStatic+0x5a>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <xQueueGenericCreateStatic+0x5c>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10b      	bne.n	8006d00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	623b      	str	r3, [r7, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	bf00      	nop
 8006cfe:	e7fd      	b.n	8006cfc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d102      	bne.n	8006d0c <xQueueGenericCreateStatic+0x84>
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <xQueueGenericCreateStatic+0x88>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <xQueueGenericCreateStatic+0x8a>
 8006d10:	2300      	movs	r3, #0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10b      	bne.n	8006d2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	61fb      	str	r3, [r7, #28]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d2e:	2350      	movs	r3, #80	@ 0x50
 8006d30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b50      	cmp	r3, #80	@ 0x50
 8006d36:	d00b      	beq.n	8006d50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	61bb      	str	r3, [r7, #24]
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	e7fd      	b.n	8006d4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00d      	beq.n	8006d78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 f840 	bl	8006df8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3730      	adds	r7, #48	@ 0x30
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b08a      	sub	sp, #40	@ 0x28
 8006d86:	af02      	add	r7, sp, #8
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <xQueueGenericCreate+0x2c>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	613b      	str	r3, [r7, #16]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	fb02 f303 	mul.w	r3, r2, r3
 8006db6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3350      	adds	r3, #80	@ 0x50
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f002 fc5d 	bl	800967c <pvPortMalloc>
 8006dc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d011      	beq.n	8006dee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	3350      	adds	r3, #80	@ 0x50
 8006dd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ddc:	79fa      	ldrb	r2, [r7, #7]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	4613      	mov	r3, r2
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	68b9      	ldr	r1, [r7, #8]
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f805 	bl	8006df8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dee:	69bb      	ldr	r3, [r7, #24]
	}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3720      	adds	r7, #32
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d103      	bne.n	8006e14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	e002      	b.n	8006e1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e26:	2101      	movs	r1, #1
 8006e28:	69b8      	ldr	r0, [r7, #24]
 8006e2a:	f7ff fec3 	bl	8006bb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00e      	beq.n	8006e6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2200      	movs	r2, #0
 8006e62:	2100      	movs	r1, #0
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f8a3 	bl	8006fb0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b086      	sub	sp, #24
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	4603      	mov	r3, r0
 8006e7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	461a      	mov	r2, r3
 8006e88:	6939      	ldr	r1, [r7, #16]
 8006e8a:	6978      	ldr	r0, [r7, #20]
 8006e8c:	f7ff ff79 	bl	8006d82 <xQueueGenericCreate>
 8006e90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f7ff ffd3 	bl	8006e3e <prvInitialiseMutex>

		return xNewQueue;
 8006e98:	68fb      	ldr	r3, [r7, #12]
	}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b088      	sub	sp, #32
 8006ea6:	af02      	add	r7, sp, #8
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	6039      	str	r1, [r7, #0]
 8006eac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	617b      	str	r3, [r7, #20]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	6939      	ldr	r1, [r7, #16]
 8006ec0:	6978      	ldr	r0, [r7, #20]
 8006ec2:	f7ff fee1 	bl	8006c88 <xQueueGenericCreateStatic>
 8006ec6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7ff ffb8 	bl	8006e3e <prvInitialiseMutex>

		return xNewQueue;
 8006ece:	68fb      	ldr	r3, [r7, #12]
	}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	60fb      	str	r3, [r7, #12]
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	e7fd      	b.n	8006efe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	689c      	ldr	r4, [r3, #8]
 8006f06:	f001 fc17 	bl	8008738 <xTaskGetCurrentTaskHandle>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	429c      	cmp	r4, r3
 8006f0e:	d111      	bne.n	8006f34 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	1e5a      	subs	r2, r3, #1
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d105      	bne.n	8006f2e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006f22:	2300      	movs	r3, #0
 8006f24:	2200      	movs	r2, #0
 8006f26:	2100      	movs	r1, #0
 8006f28:	6938      	ldr	r0, [r7, #16]
 8006f2a:	f000 f841 	bl	8006fb0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
 8006f32:	e001      	b.n	8006f38 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006f38:	697b      	ldr	r3, [r7, #20]
	}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd90      	pop	{r4, r7, pc}

08006f42 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006f42:	b590      	push	{r4, r7, lr}
 8006f44:	b087      	sub	sp, #28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	689c      	ldr	r4, [r3, #8]
 8006f72:	f001 fbe1 	bl	8008738 <xTaskGetCurrentTaskHandle>
 8006f76:	4603      	mov	r3, r0
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	d107      	bne.n	8006f8c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006f86:	2301      	movs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	e00c      	b.n	8006fa6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6938      	ldr	r0, [r7, #16]
 8006f90:	f000 fa90 	bl	80074b4 <xQueueSemaphoreTake>
 8006f94:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006fa6:	697b      	ldr	r3, [r7, #20]
	}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	371c      	adds	r7, #28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd90      	pop	{r4, r7, pc}

08006fb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08e      	sub	sp, #56	@ 0x38
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <xQueueGenericSend+0x34>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fde:	bf00      	nop
 8006fe0:	bf00      	nop
 8006fe2:	e7fd      	b.n	8006fe0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d103      	bne.n	8006ff2 <xQueueGenericSend+0x42>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <xQueueGenericSend+0x46>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <xQueueGenericSend+0x48>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10b      	bne.n	8007014 <xQueueGenericSend+0x64>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	e7fd      	b.n	8007010 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d103      	bne.n	8007022 <xQueueGenericSend+0x72>
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <xQueueGenericSend+0x76>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <xQueueGenericSend+0x78>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10b      	bne.n	8007044 <xQueueGenericSend+0x94>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	623b      	str	r3, [r7, #32]
}
 800703e:	bf00      	nop
 8007040:	bf00      	nop
 8007042:	e7fd      	b.n	8007040 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007044:	f001 fb88 	bl	8008758 <xTaskGetSchedulerState>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d102      	bne.n	8007054 <xQueueGenericSend+0xa4>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <xQueueGenericSend+0xa8>
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <xQueueGenericSend+0xaa>
 8007058:	2300      	movs	r3, #0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10b      	bne.n	8007076 <xQueueGenericSend+0xc6>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	61fb      	str	r3, [r7, #28]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007076:	f002 f9df 	bl	8009438 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007082:	429a      	cmp	r2, r3
 8007084:	d302      	bcc.n	800708c <xQueueGenericSend+0xdc>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d129      	bne.n	80070e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	68b9      	ldr	r1, [r7, #8]
 8007090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007092:	f000 fbb9 	bl	8007808 <prvCopyDataToQueue>
 8007096:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	d010      	beq.n	80070c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a2:	3324      	adds	r3, #36	@ 0x24
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 f987 	bl	80083b8 <xTaskRemoveFromEventList>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d013      	beq.n	80070d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070b0:	4b3f      	ldr	r3, [pc, #252]	@ (80071b0 <xQueueGenericSend+0x200>)
 80070b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	e00a      	b.n	80070d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d007      	beq.n	80070d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070c8:	4b39      	ldr	r3, [pc, #228]	@ (80071b0 <xQueueGenericSend+0x200>)
 80070ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80070d8:	f002 f9e0 	bl	800949c <vPortExitCritical>
				return pdPASS;
 80070dc:	2301      	movs	r3, #1
 80070de:	e063      	b.n	80071a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d103      	bne.n	80070ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070e6:	f002 f9d9 	bl	800949c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	e05c      	b.n	80071a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d106      	bne.n	8007102 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070f4:	f107 0314 	add.w	r3, r7, #20
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 f9c1 	bl	8008480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070fe:	2301      	movs	r3, #1
 8007100:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007102:	f002 f9cb 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007106:	f000 ff31 	bl	8007f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800710a:	f002 f995 	bl	8009438 <vPortEnterCritical>
 800710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007110:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007114:	b25b      	sxtb	r3, r3
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711a:	d103      	bne.n	8007124 <xQueueGenericSend+0x174>
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800712a:	b25b      	sxtb	r3, r3
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007130:	d103      	bne.n	800713a <xQueueGenericSend+0x18a>
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800713a:	f002 f9af 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800713e:	1d3a      	adds	r2, r7, #4
 8007140:	f107 0314 	add.w	r3, r7, #20
 8007144:	4611      	mov	r1, r2
 8007146:	4618      	mov	r0, r3
 8007148:	f001 f9b0 	bl	80084ac <xTaskCheckForTimeOut>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d124      	bne.n	800719c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007152:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007154:	f000 fc50 	bl	80079f8 <prvIsQueueFull>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d018      	beq.n	8007190 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	3310      	adds	r3, #16
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	4611      	mov	r1, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f001 f8d4 	bl	8008314 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800716c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800716e:	f000 fbdb 	bl	8007928 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007172:	f000 ff09 	bl	8007f88 <xTaskResumeAll>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	f47f af7c 	bne.w	8007076 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800717e:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <xQueueGenericSend+0x200>)
 8007180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	e772      	b.n	8007076 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007190:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007192:	f000 fbc9 	bl	8007928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007196:	f000 fef7 	bl	8007f88 <xTaskResumeAll>
 800719a:	e76c      	b.n	8007076 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800719c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800719e:	f000 fbc3 	bl	8007928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071a2:	f000 fef1 	bl	8007f88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3738      	adds	r7, #56	@ 0x38
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b090      	sub	sp, #64	@ 0x40
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10b      	bne.n	80071e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <xQueueGenericSendFromISR+0x3e>
 80071ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <xQueueGenericSendFromISR+0x42>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <xQueueGenericSendFromISR+0x44>
 80071f6:	2300      	movs	r3, #0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	e7fd      	b.n	8007210 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b02      	cmp	r3, #2
 8007218:	d103      	bne.n	8007222 <xQueueGenericSendFromISR+0x6e>
 800721a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <xQueueGenericSendFromISR+0x72>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <xQueueGenericSendFromISR+0x74>
 8007226:	2300      	movs	r3, #0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10b      	bne.n	8007244 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	623b      	str	r3, [r7, #32]
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	e7fd      	b.n	8007240 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007244:	f002 f9d8 	bl	80095f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007248:	f3ef 8211 	mrs	r2, BASEPRI
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	61fa      	str	r2, [r7, #28]
 800725e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007260:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007262:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726c:	429a      	cmp	r2, r3
 800726e:	d302      	bcc.n	8007276 <xQueueGenericSendFromISR+0xc2>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b02      	cmp	r3, #2
 8007274:	d12f      	bne.n	80072d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007278:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800727c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007284:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800728c:	f000 fabc 	bl	8007808 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007290:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d112      	bne.n	80072c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800729a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d016      	beq.n	80072d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a4:	3324      	adds	r3, #36	@ 0x24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 f886 	bl	80083b8 <xTaskRemoveFromEventList>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00e      	beq.n	80072d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e007      	b.n	80072d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80072c4:	3301      	adds	r3, #1
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	b25a      	sxtb	r2, r3
 80072ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80072d0:	2301      	movs	r3, #1
 80072d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80072d4:	e001      	b.n	80072da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3740      	adds	r7, #64	@ 0x40
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08c      	sub	sp, #48	@ 0x30
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072fc:	2300      	movs	r3, #0
 80072fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10b      	bne.n	8007322 <xQueueReceive+0x32>
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	623b      	str	r3, [r7, #32]
}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	e7fd      	b.n	800731e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d103      	bne.n	8007330 <xQueueReceive+0x40>
 8007328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <xQueueReceive+0x44>
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <xQueueReceive+0x46>
 8007334:	2300      	movs	r3, #0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10b      	bne.n	8007352 <xQueueReceive+0x62>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	61fb      	str	r3, [r7, #28]
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	e7fd      	b.n	800734e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007352:	f001 fa01 	bl	8008758 <xTaskGetSchedulerState>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d102      	bne.n	8007362 <xQueueReceive+0x72>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <xQueueReceive+0x76>
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <xQueueReceive+0x78>
 8007366:	2300      	movs	r3, #0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10b      	bne.n	8007384 <xQueueReceive+0x94>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	61bb      	str	r3, [r7, #24]
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007384:	f002 f858 	bl	8009438 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800738e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01f      	beq.n	80073d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007398:	f000 faa0 	bl	80078dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	1e5a      	subs	r2, r3, #1
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00f      	beq.n	80073cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ae:	3310      	adds	r3, #16
 80073b0:	4618      	mov	r0, r3
 80073b2:	f001 f801 	bl	80083b8 <xTaskRemoveFromEventList>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d007      	beq.n	80073cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073bc:	4b3c      	ldr	r3, [pc, #240]	@ (80074b0 <xQueueReceive+0x1c0>)
 80073be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073cc:	f002 f866 	bl	800949c <vPortExitCritical>
				return pdPASS;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e069      	b.n	80074a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073da:	f002 f85f 	bl	800949c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073de:	2300      	movs	r3, #0
 80073e0:	e062      	b.n	80074a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073e8:	f107 0310 	add.w	r3, r7, #16
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 f847 	bl	8008480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073f2:	2301      	movs	r3, #1
 80073f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073f6:	f002 f851 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073fa:	f000 fdb7 	bl	8007f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073fe:	f002 f81b 	bl	8009438 <vPortEnterCritical>
 8007402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007404:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007408:	b25b      	sxtb	r3, r3
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d103      	bne.n	8007418 <xQueueReceive+0x128>
 8007410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800741e:	b25b      	sxtb	r3, r3
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007424:	d103      	bne.n	800742e <xQueueReceive+0x13e>
 8007426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800742e:	f002 f835 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007432:	1d3a      	adds	r2, r7, #4
 8007434:	f107 0310 	add.w	r3, r7, #16
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f001 f836 	bl	80084ac <xTaskCheckForTimeOut>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d123      	bne.n	800748e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007448:	f000 fac0 	bl	80079cc <prvIsQueueEmpty>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d017      	beq.n	8007482 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	3324      	adds	r3, #36	@ 0x24
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4611      	mov	r1, r2
 800745a:	4618      	mov	r0, r3
 800745c:	f000 ff5a 	bl	8008314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007462:	f000 fa61 	bl	8007928 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007466:	f000 fd8f 	bl	8007f88 <xTaskResumeAll>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d189      	bne.n	8007384 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007470:	4b0f      	ldr	r3, [pc, #60]	@ (80074b0 <xQueueReceive+0x1c0>)
 8007472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	e780      	b.n	8007384 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007484:	f000 fa50 	bl	8007928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007488:	f000 fd7e 	bl	8007f88 <xTaskResumeAll>
 800748c:	e77a      	b.n	8007384 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800748e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007490:	f000 fa4a 	bl	8007928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007494:	f000 fd78 	bl	8007f88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007498:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800749a:	f000 fa97 	bl	80079cc <prvIsQueueEmpty>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f43f af6f 	beq.w	8007384 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3730      	adds	r7, #48	@ 0x30
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08e      	sub	sp, #56	@ 0x38
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80074be:	2300      	movs	r3, #0
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80074c6:	2300      	movs	r3, #0
 80074c8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	623b      	str	r3, [r7, #32]
}
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	61fb      	str	r3, [r7, #28]
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	e7fd      	b.n	8007504 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007508:	f001 f926 	bl	8008758 <xTaskGetSchedulerState>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <xQueueSemaphoreTake+0x64>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <xQueueSemaphoreTake+0x68>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <xQueueSemaphoreTake+0x6a>
 800751c:	2300      	movs	r3, #0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10b      	bne.n	800753a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	61bb      	str	r3, [r7, #24]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800753a:	f001 ff7d 	bl	8009438 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800753e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007542:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007546:	2b00      	cmp	r3, #0
 8007548:	d024      	beq.n	8007594 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800754a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754c:	1e5a      	subs	r2, r3, #1
 800754e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007550:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800755a:	f001 fa77 	bl	8008a4c <pvTaskIncrementMutexHeldCount>
 800755e:	4602      	mov	r2, r0
 8007560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007562:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00f      	beq.n	800758c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800756c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756e:	3310      	adds	r3, #16
 8007570:	4618      	mov	r0, r3
 8007572:	f000 ff21 	bl	80083b8 <xTaskRemoveFromEventList>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800757c:	4b54      	ldr	r3, [pc, #336]	@ (80076d0 <xQueueSemaphoreTake+0x21c>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800758c:	f001 ff86 	bl	800949c <vPortExitCritical>
				return pdPASS;
 8007590:	2301      	movs	r3, #1
 8007592:	e098      	b.n	80076c6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d112      	bne.n	80075c0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	617b      	str	r3, [r7, #20]
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	e7fd      	b.n	80075b4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80075b8:	f001 ff70 	bl	800949c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075bc:	2300      	movs	r3, #0
 80075be:	e082      	b.n	80076c6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075c6:	f107 030c 	add.w	r3, r7, #12
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 ff58 	bl	8008480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075d4:	f001 ff62 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075d8:	f000 fcc8 	bl	8007f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075dc:	f001 ff2c 	bl	8009438 <vPortEnterCritical>
 80075e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075e6:	b25b      	sxtb	r3, r3
 80075e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ec:	d103      	bne.n	80075f6 <xQueueSemaphoreTake+0x142>
 80075ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075fc:	b25b      	sxtb	r3, r3
 80075fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007602:	d103      	bne.n	800760c <xQueueSemaphoreTake+0x158>
 8007604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800760c:	f001 ff46 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007610:	463a      	mov	r2, r7
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	4611      	mov	r1, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f000 ff47 	bl	80084ac <xTaskCheckForTimeOut>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d132      	bne.n	800768a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007624:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007626:	f000 f9d1 	bl	80079cc <prvIsQueueEmpty>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d026      	beq.n	800767e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d109      	bne.n	800764c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007638:	f001 fefe 	bl	8009438 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800763c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	4618      	mov	r0, r3
 8007642:	f001 f8a7 	bl	8008794 <xTaskPriorityInherit>
 8007646:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007648:	f001 ff28 	bl	800949c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800764c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764e:	3324      	adds	r3, #36	@ 0x24
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fe5d 	bl	8008314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800765a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800765c:	f000 f964 	bl	8007928 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007660:	f000 fc92 	bl	8007f88 <xTaskResumeAll>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	f47f af67 	bne.w	800753a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800766c:	4b18      	ldr	r3, [pc, #96]	@ (80076d0 <xQueueSemaphoreTake+0x21c>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	e75d      	b.n	800753a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800767e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007680:	f000 f952 	bl	8007928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007684:	f000 fc80 	bl	8007f88 <xTaskResumeAll>
 8007688:	e757      	b.n	800753a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800768a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800768c:	f000 f94c 	bl	8007928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007690:	f000 fc7a 	bl	8007f88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007694:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007696:	f000 f999 	bl	80079cc <prvIsQueueEmpty>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	f43f af4c 	beq.w	800753a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00d      	beq.n	80076c4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80076a8:	f001 fec6 	bl	8009438 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80076ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076ae:	f000 f893 	bl	80077d8 <prvGetDisinheritPriorityAfterTimeout>
 80076b2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80076b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076ba:	4618      	mov	r0, r3
 80076bc:	f001 f942 	bl	8008944 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80076c0:	f001 feec 	bl	800949c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3738      	adds	r7, #56	@ 0x38
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	e000ed04 	.word	0xe000ed04

080076d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08e      	sub	sp, #56	@ 0x38
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10b      	bne.n	8007702 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	623b      	str	r3, [r7, #32]
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	e7fd      	b.n	80076fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d103      	bne.n	8007710 <xQueueReceiveFromISR+0x3c>
 8007708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <xQueueReceiveFromISR+0x40>
 8007710:	2301      	movs	r3, #1
 8007712:	e000      	b.n	8007716 <xQueueReceiveFromISR+0x42>
 8007714:	2300      	movs	r3, #0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10b      	bne.n	8007732 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	61fb      	str	r3, [r7, #28]
}
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	e7fd      	b.n	800772e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007732:	f001 ff61 	bl	80095f8 <vPortValidateInterruptPriority>
	__asm volatile
 8007736:	f3ef 8211 	mrs	r2, BASEPRI
 800773a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	61ba      	str	r2, [r7, #24]
 800774c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800774e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007750:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007756:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d02f      	beq.n	80077be <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800776c:	f000 f8b6 	bl	80078dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007772:	1e5a      	subs	r2, r3, #1
 8007774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007776:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007778:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d112      	bne.n	80077a8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d016      	beq.n	80077b8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800778a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778c:	3310      	adds	r3, #16
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fe12 	bl	80083b8 <xTaskRemoveFromEventList>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00e      	beq.n	80077b8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e007      	b.n	80077b8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80077a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077ac:	3301      	adds	r3, #1
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	b25a      	sxtb	r2, r3
 80077b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80077b8:	2301      	movs	r3, #1
 80077ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80077bc:	e001      	b.n	80077c2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80077be:	2300      	movs	r3, #0
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f383 8811 	msr	BASEPRI, r3
}
 80077cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3738      	adds	r7, #56	@ 0x38
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d006      	beq.n	80077f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e001      	b.n	80077fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077fa:	68fb      	ldr	r3, [r7, #12]
	}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007814:	2300      	movs	r3, #0
 8007816:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10d      	bne.n	8007842 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d14d      	bne.n	80078ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	4618      	mov	r0, r3
 8007834:	f001 f816 	bl	8008864 <xTaskPriorityDisinherit>
 8007838:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	609a      	str	r2, [r3, #8]
 8007840:	e043      	b.n	80078ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d119      	bne.n	800787c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6858      	ldr	r0, [r3, #4]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007850:	461a      	mov	r2, r3
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	f002 fefd 	bl	800a652 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007860:	441a      	add	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	429a      	cmp	r2, r3
 8007870:	d32b      	bcc.n	80078ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	e026      	b.n	80078ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	68d8      	ldr	r0, [r3, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007884:	461a      	mov	r2, r3
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	f002 fee3 	bl	800a652 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007894:	425b      	negs	r3, r3
 8007896:	441a      	add	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d207      	bcs.n	80078b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b0:	425b      	negs	r3, r3
 80078b2:	441a      	add	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d105      	bne.n	80078ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80078d2:	697b      	ldr	r3, [r7, #20]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d018      	beq.n	8007920 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f6:	441a      	add	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68da      	ldr	r2, [r3, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	429a      	cmp	r2, r3
 8007906:	d303      	bcc.n	8007910 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68d9      	ldr	r1, [r3, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007918:	461a      	mov	r2, r3
 800791a:	6838      	ldr	r0, [r7, #0]
 800791c:	f002 fe99 	bl	800a652 <memcpy>
	}
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007930:	f001 fd82 	bl	8009438 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800793a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800793c:	e011      	b.n	8007962 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007942:	2b00      	cmp	r3, #0
 8007944:	d012      	beq.n	800796c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3324      	adds	r3, #36	@ 0x24
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fd34 	bl	80083b8 <xTaskRemoveFromEventList>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007956:	f000 fe0d 	bl	8008574 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	3b01      	subs	r3, #1
 800795e:	b2db      	uxtb	r3, r3
 8007960:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007966:	2b00      	cmp	r3, #0
 8007968:	dce9      	bgt.n	800793e <prvUnlockQueue+0x16>
 800796a:	e000      	b.n	800796e <prvUnlockQueue+0x46>
					break;
 800796c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	22ff      	movs	r2, #255	@ 0xff
 8007972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007976:	f001 fd91 	bl	800949c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800797a:	f001 fd5d 	bl	8009438 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007984:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007986:	e011      	b.n	80079ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d012      	beq.n	80079b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3310      	adds	r3, #16
 8007994:	4618      	mov	r0, r3
 8007996:	f000 fd0f 	bl	80083b8 <xTaskRemoveFromEventList>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079a0:	f000 fde8 	bl	8008574 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	dce9      	bgt.n	8007988 <prvUnlockQueue+0x60>
 80079b4:	e000      	b.n	80079b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	22ff      	movs	r2, #255	@ 0xff
 80079bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80079c0:	f001 fd6c 	bl	800949c <vPortExitCritical>
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079d4:	f001 fd30 	bl	8009438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d102      	bne.n	80079e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079e0:	2301      	movs	r3, #1
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	e001      	b.n	80079ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079ea:	f001 fd57 	bl	800949c <vPortExitCritical>

	return xReturn;
 80079ee:	68fb      	ldr	r3, [r7, #12]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a00:	f001 fd1a 	bl	8009438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d102      	bne.n	8007a16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a10:	2301      	movs	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e001      	b.n	8007a1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a1a:	f001 fd3f 	bl	800949c <vPortExitCritical>

	return xReturn;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	e014      	b.n	8007a62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a38:	4a0f      	ldr	r2, [pc, #60]	@ (8007a78 <vQueueAddToRegistry+0x50>)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10b      	bne.n	8007a5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a44:	490c      	ldr	r1, [pc, #48]	@ (8007a78 <vQueueAddToRegistry+0x50>)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a78 <vQueueAddToRegistry+0x50>)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4413      	add	r3, r2
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a5a:	e006      	b.n	8007a6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b07      	cmp	r3, #7
 8007a66:	d9e7      	bls.n	8007a38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	20000cfc 	.word	0x20000cfc

08007a7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a8c:	f001 fcd4 	bl	8009438 <vPortEnterCritical>
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a96:	b25b      	sxtb	r3, r3
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d103      	bne.n	8007aa6 <vQueueWaitForMessageRestricted+0x2a>
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007aac:	b25b      	sxtb	r3, r3
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab2:	d103      	bne.n	8007abc <vQueueWaitForMessageRestricted+0x40>
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007abc:	f001 fcee 	bl	800949c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	3324      	adds	r3, #36	@ 0x24
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fc45 	bl	8008360 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ad6:	6978      	ldr	r0, [r7, #20]
 8007ad8:	f7ff ff26 	bl	8007928 <prvUnlockQueue>
	}
 8007adc:	bf00      	nop
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08e      	sub	sp, #56	@ 0x38
 8007ae8:	af04      	add	r7, sp, #16
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10b      	bne.n	8007b10 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	623b      	str	r3, [r7, #32]
}
 8007b0a:	bf00      	nop
 8007b0c:	bf00      	nop
 8007b0e:	e7fd      	b.n	8007b0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10b      	bne.n	8007b2e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	61fb      	str	r3, [r7, #28]
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b2e:	235c      	movs	r3, #92	@ 0x5c
 8007b30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b36:	d00b      	beq.n	8007b50 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	61bb      	str	r3, [r7, #24]
}
 8007b4a:	bf00      	nop
 8007b4c:	bf00      	nop
 8007b4e:	e7fd      	b.n	8007b4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01e      	beq.n	8007b96 <xTaskCreateStatic+0xb2>
 8007b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d01b      	beq.n	8007b96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b70:	2300      	movs	r3, #0
 8007b72:	9303      	str	r3, [sp, #12]
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	9302      	str	r3, [sp, #8]
 8007b78:	f107 0314 	add.w	r3, r7, #20
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 f850 	bl	8007c2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b90:	f000 f8de 	bl	8007d50 <prvAddNewTaskToReadyList>
 8007b94:	e001      	b.n	8007b9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b9a:	697b      	ldr	r3, [r7, #20]
	}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3728      	adds	r7, #40	@ 0x28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08c      	sub	sp, #48	@ 0x30
 8007ba8:	af04      	add	r7, sp, #16
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bb4:	88fb      	ldrh	r3, [r7, #6]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 fd5f 	bl	800967c <pvPortMalloc>
 8007bbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00e      	beq.n	8007be4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bc6:	205c      	movs	r0, #92	@ 0x5c
 8007bc8:	f001 fd58 	bl	800967c <pvPortMalloc>
 8007bcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007bda:	e005      	b.n	8007be8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bdc:	6978      	ldr	r0, [r7, #20]
 8007bde:	f001 fe1b 	bl	8009818 <vPortFree>
 8007be2:	e001      	b.n	8007be8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d017      	beq.n	8007c1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bf6:	88fa      	ldrh	r2, [r7, #6]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	9303      	str	r3, [sp, #12]
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	9302      	str	r3, [sp, #8]
 8007c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	68b9      	ldr	r1, [r7, #8]
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f80e 	bl	8007c2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c12:	69f8      	ldr	r0, [r7, #28]
 8007c14:	f000 f89c 	bl	8007d50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	e002      	b.n	8007c24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c24:	69bb      	ldr	r3, [r7, #24]
	}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3720      	adds	r7, #32
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b088      	sub	sp, #32
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	461a      	mov	r2, r3
 8007c46:	21a5      	movs	r1, #165	@ 0xa5
 8007c48:	f002 fc83 	bl	800a552 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c56:	3b01      	subs	r3, #1
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	f023 0307 	bic.w	r3, r3, #7
 8007c64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	617b      	str	r3, [r7, #20]
}
 8007c82:	bf00      	nop
 8007c84:	bf00      	nop
 8007c86:	e7fd      	b.n	8007c84 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d01f      	beq.n	8007cce <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c8e:	2300      	movs	r3, #0
 8007c90:	61fb      	str	r3, [r7, #28]
 8007c92:	e012      	b.n	8007cba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	4413      	add	r3, r2
 8007c9a:	7819      	ldrb	r1, [r3, #0]
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	3334      	adds	r3, #52	@ 0x34
 8007ca4:	460a      	mov	r2, r1
 8007ca6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	4413      	add	r3, r2
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d006      	beq.n	8007cc2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	2b0f      	cmp	r3, #15
 8007cbe:	d9e9      	bls.n	8007c94 <prvInitialiseNewTask+0x66>
 8007cc0:	e000      	b.n	8007cc4 <prvInitialiseNewTask+0x96>
			{
				break;
 8007cc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ccc:	e003      	b.n	8007cd6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd8:	2b37      	cmp	r3, #55	@ 0x37
 8007cda:	d901      	bls.n	8007ce0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cdc:	2337      	movs	r3, #55	@ 0x37
 8007cde:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cee:	2200      	movs	r2, #0
 8007cf0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fec8 	bl	8006a8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfe:	3318      	adds	r3, #24
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe fec3 	bl	8006a8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	2200      	movs	r2, #0
 8007d20:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	68f9      	ldr	r1, [r7, #12]
 8007d2e:	69b8      	ldr	r0, [r7, #24]
 8007d30:	f001 fa4e 	bl	80091d0 <pxPortInitialiseStack>
 8007d34:	4602      	mov	r2, r0
 8007d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d46:	bf00      	nop
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d58:	f001 fb6e 	bl	8009438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e14 <prvAddNewTaskToReadyList+0xc4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3301      	adds	r3, #1
 8007d62:	4a2c      	ldr	r2, [pc, #176]	@ (8007e14 <prvAddNewTaskToReadyList+0xc4>)
 8007d64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d66:	4b2c      	ldr	r3, [pc, #176]	@ (8007e18 <prvAddNewTaskToReadyList+0xc8>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8007e18 <prvAddNewTaskToReadyList+0xc8>)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d74:	4b27      	ldr	r3, [pc, #156]	@ (8007e14 <prvAddNewTaskToReadyList+0xc4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d110      	bne.n	8007d9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d7c:	f000 fc1e 	bl	80085bc <prvInitialiseTaskLists>
 8007d80:	e00d      	b.n	8007d9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d82:	4b26      	ldr	r3, [pc, #152]	@ (8007e1c <prvAddNewTaskToReadyList+0xcc>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d8a:	4b23      	ldr	r3, [pc, #140]	@ (8007e18 <prvAddNewTaskToReadyList+0xc8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d802      	bhi.n	8007d9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d98:	4a1f      	ldr	r2, [pc, #124]	@ (8007e18 <prvAddNewTaskToReadyList+0xc8>)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d9e:	4b20      	ldr	r3, [pc, #128]	@ (8007e20 <prvAddNewTaskToReadyList+0xd0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3301      	adds	r3, #1
 8007da4:	4a1e      	ldr	r2, [pc, #120]	@ (8007e20 <prvAddNewTaskToReadyList+0xd0>)
 8007da6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007da8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e20 <prvAddNewTaskToReadyList+0xd0>)
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e24 <prvAddNewTaskToReadyList+0xd4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d903      	bls.n	8007dc4 <prvAddNewTaskToReadyList+0x74>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc0:	4a18      	ldr	r2, [pc, #96]	@ (8007e24 <prvAddNewTaskToReadyList+0xd4>)
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4a15      	ldr	r2, [pc, #84]	@ (8007e28 <prvAddNewTaskToReadyList+0xd8>)
 8007dd2:	441a      	add	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f7fe fe63 	bl	8006aa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007de0:	f001 fb5c 	bl	800949c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007de4:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <prvAddNewTaskToReadyList+0xcc>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00e      	beq.n	8007e0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007dec:	4b0a      	ldr	r3, [pc, #40]	@ (8007e18 <prvAddNewTaskToReadyList+0xc8>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d207      	bcs.n	8007e0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8007e2c <prvAddNewTaskToReadyList+0xdc>)
 8007dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20001210 	.word	0x20001210
 8007e18:	20000d3c 	.word	0x20000d3c
 8007e1c:	2000121c 	.word	0x2000121c
 8007e20:	2000122c 	.word	0x2000122c
 8007e24:	20001218 	.word	0x20001218
 8007e28:	20000d40 	.word	0x20000d40
 8007e2c:	e000ed04 	.word	0xe000ed04

08007e30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d018      	beq.n	8007e74 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e42:	4b14      	ldr	r3, [pc, #80]	@ (8007e94 <vTaskDelay+0x64>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00b      	beq.n	8007e62 <vTaskDelay+0x32>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60bb      	str	r3, [r7, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	e7fd      	b.n	8007e5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e62:	f000 f883 	bl	8007f6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e66:	2100      	movs	r1, #0
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fe03 	bl	8008a74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e6e:	f000 f88b 	bl	8007f88 <xTaskResumeAll>
 8007e72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d107      	bne.n	8007e8a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007e7a:	4b07      	ldr	r3, [pc, #28]	@ (8007e98 <vTaskDelay+0x68>)
 8007e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20001238 	.word	0x20001238
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	@ 0x28
 8007ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007eaa:	463a      	mov	r2, r7
 8007eac:	1d39      	adds	r1, r7, #4
 8007eae:	f107 0308 	add.w	r3, r7, #8
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fd96 	bl	80069e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	9202      	str	r2, [sp, #8]
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	460a      	mov	r2, r1
 8007eca:	4922      	ldr	r1, [pc, #136]	@ (8007f54 <vTaskStartScheduler+0xb8>)
 8007ecc:	4822      	ldr	r0, [pc, #136]	@ (8007f58 <vTaskStartScheduler+0xbc>)
 8007ece:	f7ff fe09 	bl	8007ae4 <xTaskCreateStatic>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	4a21      	ldr	r2, [pc, #132]	@ (8007f5c <vTaskStartScheduler+0xc0>)
 8007ed6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ed8:	4b20      	ldr	r3, [pc, #128]	@ (8007f5c <vTaskStartScheduler+0xc0>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	617b      	str	r3, [r7, #20]
 8007ee4:	e001      	b.n	8007eea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d102      	bne.n	8007ef6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ef0:	f000 fe14 	bl	8008b1c <xTimerCreateTimerTask>
 8007ef4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d116      	bne.n	8007f2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	613b      	str	r3, [r7, #16]
}
 8007f0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f10:	4b13      	ldr	r3, [pc, #76]	@ (8007f60 <vTaskStartScheduler+0xc4>)
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295
 8007f16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f18:	4b12      	ldr	r3, [pc, #72]	@ (8007f64 <vTaskStartScheduler+0xc8>)
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f1e:	4b12      	ldr	r3, [pc, #72]	@ (8007f68 <vTaskStartScheduler+0xcc>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f24:	f001 f9e4 	bl	80092f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f28:	e00f      	b.n	8007f4a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f30:	d10b      	bne.n	8007f4a <vTaskStartScheduler+0xae>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	60fb      	str	r3, [r7, #12]
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop
 8007f48:	e7fd      	b.n	8007f46 <vTaskStartScheduler+0xaa>
}
 8007f4a:	bf00      	nop
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	0800c7cc 	.word	0x0800c7cc
 8007f58:	0800858d 	.word	0x0800858d
 8007f5c:	20001234 	.word	0x20001234
 8007f60:	20001230 	.word	0x20001230
 8007f64:	2000121c 	.word	0x2000121c
 8007f68:	20001214 	.word	0x20001214

08007f6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f70:	4b04      	ldr	r3, [pc, #16]	@ (8007f84 <vTaskSuspendAll+0x18>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a03      	ldr	r2, [pc, #12]	@ (8007f84 <vTaskSuspendAll+0x18>)
 8007f78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f7a:	bf00      	nop
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	20001238 	.word	0x20001238

08007f88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f96:	4b42      	ldr	r3, [pc, #264]	@ (80080a0 <xTaskResumeAll+0x118>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10b      	bne.n	8007fb6 <xTaskResumeAll+0x2e>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	603b      	str	r3, [r7, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	e7fd      	b.n	8007fb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fb6:	f001 fa3f 	bl	8009438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fba:	4b39      	ldr	r3, [pc, #228]	@ (80080a0 <xTaskResumeAll+0x118>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	4a37      	ldr	r2, [pc, #220]	@ (80080a0 <xTaskResumeAll+0x118>)
 8007fc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fc4:	4b36      	ldr	r3, [pc, #216]	@ (80080a0 <xTaskResumeAll+0x118>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d162      	bne.n	8008092 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fcc:	4b35      	ldr	r3, [pc, #212]	@ (80080a4 <xTaskResumeAll+0x11c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d05e      	beq.n	8008092 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fd4:	e02f      	b.n	8008036 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd6:	4b34      	ldr	r3, [pc, #208]	@ (80080a8 <xTaskResumeAll+0x120>)
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3318      	adds	r3, #24
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fdbc 	bl	8006b60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe fdb7 	bl	8006b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80080ac <xTaskResumeAll+0x124>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d903      	bls.n	8008006 <xTaskResumeAll+0x7e>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008002:	4a2a      	ldr	r2, [pc, #168]	@ (80080ac <xTaskResumeAll+0x124>)
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4a27      	ldr	r2, [pc, #156]	@ (80080b0 <xTaskResumeAll+0x128>)
 8008014:	441a      	add	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3304      	adds	r3, #4
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f7fe fd42 	bl	8006aa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008026:	4b23      	ldr	r3, [pc, #140]	@ (80080b4 <xTaskResumeAll+0x12c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802c:	429a      	cmp	r2, r3
 800802e:	d302      	bcc.n	8008036 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008030:	4b21      	ldr	r3, [pc, #132]	@ (80080b8 <xTaskResumeAll+0x130>)
 8008032:	2201      	movs	r2, #1
 8008034:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008036:	4b1c      	ldr	r3, [pc, #112]	@ (80080a8 <xTaskResumeAll+0x120>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1cb      	bne.n	8007fd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008044:	f000 fb58 	bl	80086f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008048:	4b1c      	ldr	r3, [pc, #112]	@ (80080bc <xTaskResumeAll+0x134>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d010      	beq.n	8008076 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008054:	f000 f846 	bl	80080e4 <xTaskIncrementTick>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800805e:	4b16      	ldr	r3, [pc, #88]	@ (80080b8 <xTaskResumeAll+0x130>)
 8008060:	2201      	movs	r2, #1
 8008062:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3b01      	subs	r3, #1
 8008068:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1f1      	bne.n	8008054 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008070:	4b12      	ldr	r3, [pc, #72]	@ (80080bc <xTaskResumeAll+0x134>)
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008076:	4b10      	ldr	r3, [pc, #64]	@ (80080b8 <xTaskResumeAll+0x130>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800807e:	2301      	movs	r3, #1
 8008080:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008082:	4b0f      	ldr	r3, [pc, #60]	@ (80080c0 <xTaskResumeAll+0x138>)
 8008084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008092:	f001 fa03 	bl	800949c <vPortExitCritical>

	return xAlreadyYielded;
 8008096:	68bb      	ldr	r3, [r7, #8]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20001238 	.word	0x20001238
 80080a4:	20001210 	.word	0x20001210
 80080a8:	200011d0 	.word	0x200011d0
 80080ac:	20001218 	.word	0x20001218
 80080b0:	20000d40 	.word	0x20000d40
 80080b4:	20000d3c 	.word	0x20000d3c
 80080b8:	20001224 	.word	0x20001224
 80080bc:	20001220 	.word	0x20001220
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080ca:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <xTaskGetTickCount+0x1c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080d0:	687b      	ldr	r3, [r7, #4]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	20001214 	.word	0x20001214

080080e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ee:	4b4f      	ldr	r3, [pc, #316]	@ (800822c <xTaskIncrementTick+0x148>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f040 8090 	bne.w	8008218 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008230 <xTaskIncrementTick+0x14c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3301      	adds	r3, #1
 80080fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008100:	4a4b      	ldr	r2, [pc, #300]	@ (8008230 <xTaskIncrementTick+0x14c>)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d121      	bne.n	8008150 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800810c:	4b49      	ldr	r3, [pc, #292]	@ (8008234 <xTaskIncrementTick+0x150>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00b      	beq.n	800812e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	603b      	str	r3, [r7, #0]
}
 8008128:	bf00      	nop
 800812a:	bf00      	nop
 800812c:	e7fd      	b.n	800812a <xTaskIncrementTick+0x46>
 800812e:	4b41      	ldr	r3, [pc, #260]	@ (8008234 <xTaskIncrementTick+0x150>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	4b40      	ldr	r3, [pc, #256]	@ (8008238 <xTaskIncrementTick+0x154>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a3e      	ldr	r2, [pc, #248]	@ (8008234 <xTaskIncrementTick+0x150>)
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	4a3e      	ldr	r2, [pc, #248]	@ (8008238 <xTaskIncrementTick+0x154>)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	4b3e      	ldr	r3, [pc, #248]	@ (800823c <xTaskIncrementTick+0x158>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3301      	adds	r3, #1
 8008148:	4a3c      	ldr	r2, [pc, #240]	@ (800823c <xTaskIncrementTick+0x158>)
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	f000 fad4 	bl	80086f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008150:	4b3b      	ldr	r3, [pc, #236]	@ (8008240 <xTaskIncrementTick+0x15c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	429a      	cmp	r2, r3
 8008158:	d349      	bcc.n	80081ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800815a:	4b36      	ldr	r3, [pc, #216]	@ (8008234 <xTaskIncrementTick+0x150>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d104      	bne.n	800816e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008164:	4b36      	ldr	r3, [pc, #216]	@ (8008240 <xTaskIncrementTick+0x15c>)
 8008166:	f04f 32ff 	mov.w	r2, #4294967295
 800816a:	601a      	str	r2, [r3, #0]
					break;
 800816c:	e03f      	b.n	80081ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800816e:	4b31      	ldr	r3, [pc, #196]	@ (8008234 <xTaskIncrementTick+0x150>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	429a      	cmp	r2, r3
 8008184:	d203      	bcs.n	800818e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008186:	4a2e      	ldr	r2, [pc, #184]	@ (8008240 <xTaskIncrementTick+0x15c>)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800818c:	e02f      	b.n	80081ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	3304      	adds	r3, #4
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe fce4 	bl	8006b60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819c:	2b00      	cmp	r3, #0
 800819e:	d004      	beq.n	80081aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	3318      	adds	r3, #24
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe fcdb 	bl	8006b60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ae:	4b25      	ldr	r3, [pc, #148]	@ (8008244 <xTaskIncrementTick+0x160>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d903      	bls.n	80081be <xTaskIncrementTick+0xda>
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ba:	4a22      	ldr	r2, [pc, #136]	@ (8008244 <xTaskIncrementTick+0x160>)
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c2:	4613      	mov	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008248 <xTaskIncrementTick+0x164>)
 80081cc:	441a      	add	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	3304      	adds	r3, #4
 80081d2:	4619      	mov	r1, r3
 80081d4:	4610      	mov	r0, r2
 80081d6:	f7fe fc66 	bl	8006aa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081de:	4b1b      	ldr	r3, [pc, #108]	@ (800824c <xTaskIncrementTick+0x168>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d3b8      	bcc.n	800815a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80081e8:	2301      	movs	r3, #1
 80081ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081ec:	e7b5      	b.n	800815a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081ee:	4b17      	ldr	r3, [pc, #92]	@ (800824c <xTaskIncrementTick+0x168>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f4:	4914      	ldr	r1, [pc, #80]	@ (8008248 <xTaskIncrementTick+0x164>)
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d901      	bls.n	800820a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008206:	2301      	movs	r3, #1
 8008208:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800820a:	4b11      	ldr	r3, [pc, #68]	@ (8008250 <xTaskIncrementTick+0x16c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d007      	beq.n	8008222 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008212:	2301      	movs	r3, #1
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e004      	b.n	8008222 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008218:	4b0e      	ldr	r3, [pc, #56]	@ (8008254 <xTaskIncrementTick+0x170>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3301      	adds	r3, #1
 800821e:	4a0d      	ldr	r2, [pc, #52]	@ (8008254 <xTaskIncrementTick+0x170>)
 8008220:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008222:	697b      	ldr	r3, [r7, #20]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20001238 	.word	0x20001238
 8008230:	20001214 	.word	0x20001214
 8008234:	200011c8 	.word	0x200011c8
 8008238:	200011cc 	.word	0x200011cc
 800823c:	20001228 	.word	0x20001228
 8008240:	20001230 	.word	0x20001230
 8008244:	20001218 	.word	0x20001218
 8008248:	20000d40 	.word	0x20000d40
 800824c:	20000d3c 	.word	0x20000d3c
 8008250:	20001224 	.word	0x20001224
 8008254:	20001220 	.word	0x20001220

08008258 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800825e:	4b28      	ldr	r3, [pc, #160]	@ (8008300 <vTaskSwitchContext+0xa8>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008266:	4b27      	ldr	r3, [pc, #156]	@ (8008304 <vTaskSwitchContext+0xac>)
 8008268:	2201      	movs	r2, #1
 800826a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800826c:	e042      	b.n	80082f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800826e:	4b25      	ldr	r3, [pc, #148]	@ (8008304 <vTaskSwitchContext+0xac>)
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008274:	4b24      	ldr	r3, [pc, #144]	@ (8008308 <vTaskSwitchContext+0xb0>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	e011      	b.n	80082a0 <vTaskSwitchContext+0x48>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10b      	bne.n	800829a <vTaskSwitchContext+0x42>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	607b      	str	r3, [r7, #4]
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	e7fd      	b.n	8008296 <vTaskSwitchContext+0x3e>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3b01      	subs	r3, #1
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	491a      	ldr	r1, [pc, #104]	@ (800830c <vTaskSwitchContext+0xb4>)
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0e3      	beq.n	800827c <vTaskSwitchContext+0x24>
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4a13      	ldr	r2, [pc, #76]	@ (800830c <vTaskSwitchContext+0xb4>)
 80082c0:	4413      	add	r3, r2
 80082c2:	60bb      	str	r3, [r7, #8]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	605a      	str	r2, [r3, #4]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	3308      	adds	r3, #8
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d104      	bne.n	80082e4 <vTaskSwitchContext+0x8c>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	605a      	str	r2, [r3, #4]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	4a09      	ldr	r2, [pc, #36]	@ (8008310 <vTaskSwitchContext+0xb8>)
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	4a06      	ldr	r2, [pc, #24]	@ (8008308 <vTaskSwitchContext+0xb0>)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6013      	str	r3, [r2, #0]
}
 80082f4:	bf00      	nop
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	20001238 	.word	0x20001238
 8008304:	20001224 	.word	0x20001224
 8008308:	20001218 	.word	0x20001218
 800830c:	20000d40 	.word	0x20000d40
 8008310:	20000d3c 	.word	0x20000d3c

08008314 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10b      	bne.n	800833c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	60fb      	str	r3, [r7, #12]
}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	e7fd      	b.n	8008338 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800833c:	4b07      	ldr	r3, [pc, #28]	@ (800835c <vTaskPlaceOnEventList+0x48>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3318      	adds	r3, #24
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7fe fbd2 	bl	8006aee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800834a:	2101      	movs	r1, #1
 800834c:	6838      	ldr	r0, [r7, #0]
 800834e:	f000 fb91 	bl	8008a74 <prvAddCurrentTaskToDelayedList>
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000d3c 	.word	0x20000d3c

08008360 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10b      	bne.n	800838a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	617b      	str	r3, [r7, #20]
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	e7fd      	b.n	8008386 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800838a:	4b0a      	ldr	r3, [pc, #40]	@ (80083b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3318      	adds	r3, #24
 8008390:	4619      	mov	r1, r3
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7fe fb87 	bl	8006aa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	68b8      	ldr	r0, [r7, #8]
 80083a8:	f000 fb64 	bl	8008a74 <prvAddCurrentTaskToDelayedList>
	}
 80083ac:	bf00      	nop
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20000d3c 	.word	0x20000d3c

080083b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10b      	bne.n	80083e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60fb      	str	r3, [r7, #12]
}
 80083e0:	bf00      	nop
 80083e2:	bf00      	nop
 80083e4:	e7fd      	b.n	80083e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	3318      	adds	r3, #24
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fbb8 	bl	8006b60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008468 <xTaskRemoveFromEventList+0xb0>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d11d      	bne.n	8008434 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe fbaf 	bl	8006b60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008406:	4b19      	ldr	r3, [pc, #100]	@ (800846c <xTaskRemoveFromEventList+0xb4>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d903      	bls.n	8008416 <xTaskRemoveFromEventList+0x5e>
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008412:	4a16      	ldr	r2, [pc, #88]	@ (800846c <xTaskRemoveFromEventList+0xb4>)
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4a13      	ldr	r2, [pc, #76]	@ (8008470 <xTaskRemoveFromEventList+0xb8>)
 8008424:	441a      	add	r2, r3
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	3304      	adds	r3, #4
 800842a:	4619      	mov	r1, r3
 800842c:	4610      	mov	r0, r2
 800842e:	f7fe fb3a 	bl	8006aa6 <vListInsertEnd>
 8008432:	e005      	b.n	8008440 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	3318      	adds	r3, #24
 8008438:	4619      	mov	r1, r3
 800843a:	480e      	ldr	r0, [pc, #56]	@ (8008474 <xTaskRemoveFromEventList+0xbc>)
 800843c:	f7fe fb33 	bl	8006aa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008444:	4b0c      	ldr	r3, [pc, #48]	@ (8008478 <xTaskRemoveFromEventList+0xc0>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844a:	429a      	cmp	r2, r3
 800844c:	d905      	bls.n	800845a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800844e:	2301      	movs	r3, #1
 8008450:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008452:	4b0a      	ldr	r3, [pc, #40]	@ (800847c <xTaskRemoveFromEventList+0xc4>)
 8008454:	2201      	movs	r2, #1
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	e001      	b.n	800845e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800845a:	2300      	movs	r3, #0
 800845c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800845e:	697b      	ldr	r3, [r7, #20]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	20001238 	.word	0x20001238
 800846c:	20001218 	.word	0x20001218
 8008470:	20000d40 	.word	0x20000d40
 8008474:	200011d0 	.word	0x200011d0
 8008478:	20000d3c 	.word	0x20000d3c
 800847c:	20001224 	.word	0x20001224

08008480 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008488:	4b06      	ldr	r3, [pc, #24]	@ (80084a4 <vTaskInternalSetTimeOutState+0x24>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008490:	4b05      	ldr	r3, [pc, #20]	@ (80084a8 <vTaskInternalSetTimeOutState+0x28>)
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	605a      	str	r2, [r3, #4]
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	20001228 	.word	0x20001228
 80084a8:	20001214 	.word	0x20001214

080084ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	613b      	str	r3, [r7, #16]
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	e7fd      	b.n	80084d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10b      	bne.n	80084f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	60fb      	str	r3, [r7, #12]
}
 80084ec:	bf00      	nop
 80084ee:	bf00      	nop
 80084f0:	e7fd      	b.n	80084ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80084f2:	f000 ffa1 	bl	8009438 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084f6:	4b1d      	ldr	r3, [pc, #116]	@ (800856c <xTaskCheckForTimeOut+0xc0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d102      	bne.n	8008516 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008510:	2300      	movs	r3, #0
 8008512:	61fb      	str	r3, [r7, #28]
 8008514:	e023      	b.n	800855e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	4b15      	ldr	r3, [pc, #84]	@ (8008570 <xTaskCheckForTimeOut+0xc4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d007      	beq.n	8008532 <xTaskCheckForTimeOut+0x86>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	429a      	cmp	r2, r3
 800852a:	d302      	bcc.n	8008532 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800852c:	2301      	movs	r3, #1
 800852e:	61fb      	str	r3, [r7, #28]
 8008530:	e015      	b.n	800855e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	429a      	cmp	r2, r3
 800853a:	d20b      	bcs.n	8008554 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff ff99 	bl	8008480 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	e004      	b.n	800855e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800855a:	2301      	movs	r3, #1
 800855c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800855e:	f000 ff9d 	bl	800949c <vPortExitCritical>

	return xReturn;
 8008562:	69fb      	ldr	r3, [r7, #28]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3720      	adds	r7, #32
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20001214 	.word	0x20001214
 8008570:	20001228 	.word	0x20001228

08008574 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008578:	4b03      	ldr	r3, [pc, #12]	@ (8008588 <vTaskMissedYield+0x14>)
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]
}
 800857e:	bf00      	nop
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	20001224 	.word	0x20001224

0800858c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008594:	f000 f852 	bl	800863c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008598:	4b06      	ldr	r3, [pc, #24]	@ (80085b4 <prvIdleTask+0x28>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d9f9      	bls.n	8008594 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085a0:	4b05      	ldr	r3, [pc, #20]	@ (80085b8 <prvIdleTask+0x2c>)
 80085a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085b0:	e7f0      	b.n	8008594 <prvIdleTask+0x8>
 80085b2:	bf00      	nop
 80085b4:	20000d40 	.word	0x20000d40
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085c2:	2300      	movs	r3, #0
 80085c4:	607b      	str	r3, [r7, #4]
 80085c6:	e00c      	b.n	80085e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4a12      	ldr	r2, [pc, #72]	@ (800861c <prvInitialiseTaskLists+0x60>)
 80085d4:	4413      	add	r3, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe fa38 	bl	8006a4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3301      	adds	r3, #1
 80085e0:	607b      	str	r3, [r7, #4]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b37      	cmp	r3, #55	@ 0x37
 80085e6:	d9ef      	bls.n	80085c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085e8:	480d      	ldr	r0, [pc, #52]	@ (8008620 <prvInitialiseTaskLists+0x64>)
 80085ea:	f7fe fa2f 	bl	8006a4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085ee:	480d      	ldr	r0, [pc, #52]	@ (8008624 <prvInitialiseTaskLists+0x68>)
 80085f0:	f7fe fa2c 	bl	8006a4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085f4:	480c      	ldr	r0, [pc, #48]	@ (8008628 <prvInitialiseTaskLists+0x6c>)
 80085f6:	f7fe fa29 	bl	8006a4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085fa:	480c      	ldr	r0, [pc, #48]	@ (800862c <prvInitialiseTaskLists+0x70>)
 80085fc:	f7fe fa26 	bl	8006a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008600:	480b      	ldr	r0, [pc, #44]	@ (8008630 <prvInitialiseTaskLists+0x74>)
 8008602:	f7fe fa23 	bl	8006a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008606:	4b0b      	ldr	r3, [pc, #44]	@ (8008634 <prvInitialiseTaskLists+0x78>)
 8008608:	4a05      	ldr	r2, [pc, #20]	@ (8008620 <prvInitialiseTaskLists+0x64>)
 800860a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800860c:	4b0a      	ldr	r3, [pc, #40]	@ (8008638 <prvInitialiseTaskLists+0x7c>)
 800860e:	4a05      	ldr	r2, [pc, #20]	@ (8008624 <prvInitialiseTaskLists+0x68>)
 8008610:	601a      	str	r2, [r3, #0]
}
 8008612:	bf00      	nop
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20000d40 	.word	0x20000d40
 8008620:	200011a0 	.word	0x200011a0
 8008624:	200011b4 	.word	0x200011b4
 8008628:	200011d0 	.word	0x200011d0
 800862c:	200011e4 	.word	0x200011e4
 8008630:	200011fc 	.word	0x200011fc
 8008634:	200011c8 	.word	0x200011c8
 8008638:	200011cc 	.word	0x200011cc

0800863c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008642:	e019      	b.n	8008678 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008644:	f000 fef8 	bl	8009438 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008648:	4b10      	ldr	r3, [pc, #64]	@ (800868c <prvCheckTasksWaitingTermination+0x50>)
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3304      	adds	r3, #4
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fa83 	bl	8006b60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800865a:	4b0d      	ldr	r3, [pc, #52]	@ (8008690 <prvCheckTasksWaitingTermination+0x54>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3b01      	subs	r3, #1
 8008660:	4a0b      	ldr	r2, [pc, #44]	@ (8008690 <prvCheckTasksWaitingTermination+0x54>)
 8008662:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008664:	4b0b      	ldr	r3, [pc, #44]	@ (8008694 <prvCheckTasksWaitingTermination+0x58>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3b01      	subs	r3, #1
 800866a:	4a0a      	ldr	r2, [pc, #40]	@ (8008694 <prvCheckTasksWaitingTermination+0x58>)
 800866c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800866e:	f000 ff15 	bl	800949c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f810 	bl	8008698 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008678:	4b06      	ldr	r3, [pc, #24]	@ (8008694 <prvCheckTasksWaitingTermination+0x58>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e1      	bne.n	8008644 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200011e4 	.word	0x200011e4
 8008690:	20001210 	.word	0x20001210
 8008694:	200011f8 	.word	0x200011f8

08008698 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d108      	bne.n	80086bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ae:	4618      	mov	r0, r3
 80086b0:	f001 f8b2 	bl	8009818 <vPortFree>
				vPortFree( pxTCB );
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 f8af 	bl	8009818 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086ba:	e019      	b.n	80086f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d103      	bne.n	80086ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 f8a6 	bl	8009818 <vPortFree>
	}
 80086cc:	e010      	b.n	80086f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d00b      	beq.n	80086f0 <prvDeleteTCB+0x58>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	60fb      	str	r3, [r7, #12]
}
 80086ea:	bf00      	nop
 80086ec:	bf00      	nop
 80086ee:	e7fd      	b.n	80086ec <prvDeleteTCB+0x54>
	}
 80086f0:	bf00      	nop
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008730 <prvResetNextTaskUnblockTime+0x38>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008708:	4b0a      	ldr	r3, [pc, #40]	@ (8008734 <prvResetNextTaskUnblockTime+0x3c>)
 800870a:	f04f 32ff 	mov.w	r2, #4294967295
 800870e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008710:	e008      	b.n	8008724 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008712:	4b07      	ldr	r3, [pc, #28]	@ (8008730 <prvResetNextTaskUnblockTime+0x38>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	4a04      	ldr	r2, [pc, #16]	@ (8008734 <prvResetNextTaskUnblockTime+0x3c>)
 8008722:	6013      	str	r3, [r2, #0]
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	200011c8 	.word	0x200011c8
 8008734:	20001230 	.word	0x20001230

08008738 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800873e:	4b05      	ldr	r3, [pc, #20]	@ (8008754 <xTaskGetCurrentTaskHandle+0x1c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008744:	687b      	ldr	r3, [r7, #4]
	}
 8008746:	4618      	mov	r0, r3
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20000d3c 	.word	0x20000d3c

08008758 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800875e:	4b0b      	ldr	r3, [pc, #44]	@ (800878c <xTaskGetSchedulerState+0x34>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d102      	bne.n	800876c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008766:	2301      	movs	r3, #1
 8008768:	607b      	str	r3, [r7, #4]
 800876a:	e008      	b.n	800877e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800876c:	4b08      	ldr	r3, [pc, #32]	@ (8008790 <xTaskGetSchedulerState+0x38>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008774:	2302      	movs	r3, #2
 8008776:	607b      	str	r3, [r7, #4]
 8008778:	e001      	b.n	800877e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800877a:	2300      	movs	r3, #0
 800877c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800877e:	687b      	ldr	r3, [r7, #4]
	}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	2000121c 	.word	0x2000121c
 8008790:	20001238 	.word	0x20001238

08008794 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d051      	beq.n	800884e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ae:	4b2a      	ldr	r3, [pc, #168]	@ (8008858 <xTaskPriorityInherit+0xc4>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d241      	bcs.n	800883c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	db06      	blt.n	80087ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087c0:	4b25      	ldr	r3, [pc, #148]	@ (8008858 <xTaskPriorityInherit+0xc4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6959      	ldr	r1, [r3, #20]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4a1f      	ldr	r2, [pc, #124]	@ (800885c <xTaskPriorityInherit+0xc8>)
 80087e0:	4413      	add	r3, r2
 80087e2:	4299      	cmp	r1, r3
 80087e4:	d122      	bne.n	800882c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	3304      	adds	r3, #4
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe f9b8 	bl	8006b60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087f0:	4b19      	ldr	r3, [pc, #100]	@ (8008858 <xTaskPriorityInherit+0xc4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fe:	4b18      	ldr	r3, [pc, #96]	@ (8008860 <xTaskPriorityInherit+0xcc>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d903      	bls.n	800880e <xTaskPriorityInherit+0x7a>
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880a:	4a15      	ldr	r2, [pc, #84]	@ (8008860 <xTaskPriorityInherit+0xcc>)
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4a10      	ldr	r2, [pc, #64]	@ (800885c <xTaskPriorityInherit+0xc8>)
 800881c:	441a      	add	r2, r3
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	3304      	adds	r3, #4
 8008822:	4619      	mov	r1, r3
 8008824:	4610      	mov	r0, r2
 8008826:	f7fe f93e 	bl	8006aa6 <vListInsertEnd>
 800882a:	e004      	b.n	8008836 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800882c:	4b0a      	ldr	r3, [pc, #40]	@ (8008858 <xTaskPriorityInherit+0xc4>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008836:	2301      	movs	r3, #1
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	e008      	b.n	800884e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008840:	4b05      	ldr	r3, [pc, #20]	@ (8008858 <xTaskPriorityInherit+0xc4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008846:	429a      	cmp	r2, r3
 8008848:	d201      	bcs.n	800884e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800884a:	2301      	movs	r3, #1
 800884c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800884e:	68fb      	ldr	r3, [r7, #12]
	}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20000d3c 	.word	0x20000d3c
 800885c:	20000d40 	.word	0x20000d40
 8008860:	20001218 	.word	0x20001218

08008864 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008870:	2300      	movs	r3, #0
 8008872:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d058      	beq.n	800892c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800887a:	4b2f      	ldr	r3, [pc, #188]	@ (8008938 <xTaskPriorityDisinherit+0xd4>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	429a      	cmp	r2, r3
 8008882:	d00b      	beq.n	800889c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	60fb      	str	r3, [r7, #12]
}
 8008896:	bf00      	nop
 8008898:	bf00      	nop
 800889a:	e7fd      	b.n	8008898 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10b      	bne.n	80088bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	60bb      	str	r3, [r7, #8]
}
 80088b6:	bf00      	nop
 80088b8:	bf00      	nop
 80088ba:	e7fd      	b.n	80088b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088c0:	1e5a      	subs	r2, r3, #1
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d02c      	beq.n	800892c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d128      	bne.n	800892c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	3304      	adds	r3, #4
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe f93e 	bl	8006b60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088fc:	4b0f      	ldr	r3, [pc, #60]	@ (800893c <xTaskPriorityDisinherit+0xd8>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d903      	bls.n	800890c <xTaskPriorityDisinherit+0xa8>
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008908:	4a0c      	ldr	r2, [pc, #48]	@ (800893c <xTaskPriorityDisinherit+0xd8>)
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4a09      	ldr	r2, [pc, #36]	@ (8008940 <xTaskPriorityDisinherit+0xdc>)
 800891a:	441a      	add	r2, r3
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	3304      	adds	r3, #4
 8008920:	4619      	mov	r1, r3
 8008922:	4610      	mov	r0, r2
 8008924:	f7fe f8bf 	bl	8006aa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008928:	2301      	movs	r3, #1
 800892a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800892c:	697b      	ldr	r3, [r7, #20]
	}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000d3c 	.word	0x20000d3c
 800893c:	20001218 	.word	0x20001218
 8008940:	20000d40 	.word	0x20000d40

08008944 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008952:	2301      	movs	r3, #1
 8008954:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d06c      	beq.n	8008a36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10b      	bne.n	800897c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	60fb      	str	r3, [r7, #12]
}
 8008976:	bf00      	nop
 8008978:	bf00      	nop
 800897a:	e7fd      	b.n	8008978 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d902      	bls.n	800898c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	e002      	b.n	8008992 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008990:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	429a      	cmp	r2, r3
 800899a:	d04c      	beq.n	8008a36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d147      	bne.n	8008a36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80089a6:	4b26      	ldr	r3, [pc, #152]	@ (8008a40 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d10b      	bne.n	80089c8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	60bb      	str	r3, [r7, #8]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	69fa      	ldr	r2, [r7, #28]
 80089d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	db04      	blt.n	80089e6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	6959      	ldr	r1, [r3, #20]
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4a13      	ldr	r2, [pc, #76]	@ (8008a44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80089f6:	4413      	add	r3, r2
 80089f8:	4299      	cmp	r1, r3
 80089fa:	d11c      	bne.n	8008a36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	3304      	adds	r3, #4
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe f8ad 	bl	8006b60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a48 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d903      	bls.n	8008a1a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a16:	4a0c      	ldr	r2, [pc, #48]	@ (8008a48 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1e:	4613      	mov	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4a07      	ldr	r2, [pc, #28]	@ (8008a44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a28:	441a      	add	r2, r3
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7fe f838 	bl	8006aa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a36:	bf00      	nop
 8008a38:	3720      	adds	r7, #32
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000d3c 	.word	0x20000d3c
 8008a44:	20000d40 	.word	0x20000d40
 8008a48:	20001218 	.word	0x20001218

08008a4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a50:	4b07      	ldr	r3, [pc, #28]	@ (8008a70 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a58:	4b05      	ldr	r3, [pc, #20]	@ (8008a70 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a5e:	3201      	adds	r2, #1
 8008a60:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008a62:	4b03      	ldr	r3, [pc, #12]	@ (8008a70 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a64:	681b      	ldr	r3, [r3, #0]
	}
 8008a66:	4618      	mov	r0, r3
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	20000d3c 	.word	0x20000d3c

08008a74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a7e:	4b21      	ldr	r3, [pc, #132]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a84:	4b20      	ldr	r3, [pc, #128]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3304      	adds	r3, #4
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe f868 	bl	8006b60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a96:	d10a      	bne.n	8008aae <prvAddCurrentTaskToDelayedList+0x3a>
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d007      	beq.n	8008aae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	4819      	ldr	r0, [pc, #100]	@ (8008b0c <prvAddCurrentTaskToDelayedList+0x98>)
 8008aa8:	f7fd fffd 	bl	8006aa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008aac:	e026      	b.n	8008afc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ab6:	4b14      	ldr	r3, [pc, #80]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d209      	bcs.n	8008ada <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ac6:	4b12      	ldr	r3, [pc, #72]	@ (8008b10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4b0f      	ldr	r3, [pc, #60]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f7fe f80b 	bl	8006aee <vListInsert>
}
 8008ad8:	e010      	b.n	8008afc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ada:	4b0e      	ldr	r3, [pc, #56]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	4b0a      	ldr	r3, [pc, #40]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f7fe f801 	bl	8006aee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008aec:	4b0a      	ldr	r3, [pc, #40]	@ (8008b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d202      	bcs.n	8008afc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008af6:	4a08      	ldr	r2, [pc, #32]	@ (8008b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	6013      	str	r3, [r2, #0]
}
 8008afc:	bf00      	nop
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20001214 	.word	0x20001214
 8008b08:	20000d3c 	.word	0x20000d3c
 8008b0c:	200011fc 	.word	0x200011fc
 8008b10:	200011cc 	.word	0x200011cc
 8008b14:	200011c8 	.word	0x200011c8
 8008b18:	20001230 	.word	0x20001230

08008b1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08a      	sub	sp, #40	@ 0x28
 8008b20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b26:	f000 fb13 	bl	8009150 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ba0 <xTimerCreateTimerTask+0x84>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d021      	beq.n	8008b76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b32:	2300      	movs	r3, #0
 8008b34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b3a:	1d3a      	adds	r2, r7, #4
 8008b3c:	f107 0108 	add.w	r1, r7, #8
 8008b40:	f107 030c 	add.w	r3, r7, #12
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fd ff67 	bl	8006a18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	9202      	str	r2, [sp, #8]
 8008b52:	9301      	str	r3, [sp, #4]
 8008b54:	2302      	movs	r3, #2
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	460a      	mov	r2, r1
 8008b5c:	4911      	ldr	r1, [pc, #68]	@ (8008ba4 <xTimerCreateTimerTask+0x88>)
 8008b5e:	4812      	ldr	r0, [pc, #72]	@ (8008ba8 <xTimerCreateTimerTask+0x8c>)
 8008b60:	f7fe ffc0 	bl	8007ae4 <xTaskCreateStatic>
 8008b64:	4603      	mov	r3, r0
 8008b66:	4a11      	ldr	r2, [pc, #68]	@ (8008bac <xTimerCreateTimerTask+0x90>)
 8008b68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b6a:	4b10      	ldr	r3, [pc, #64]	@ (8008bac <xTimerCreateTimerTask+0x90>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b72:	2301      	movs	r3, #1
 8008b74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10b      	bne.n	8008b94 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	613b      	str	r3, [r7, #16]
}
 8008b8e:	bf00      	nop
 8008b90:	bf00      	nop
 8008b92:	e7fd      	b.n	8008b90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b94:	697b      	ldr	r3, [r7, #20]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	2000126c 	.word	0x2000126c
 8008ba4:	0800c7d4 	.word	0x0800c7d4
 8008ba8:	08008ce9 	.word	0x08008ce9
 8008bac:	20001270 	.word	0x20001270

08008bb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08a      	sub	sp, #40	@ 0x28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10b      	bne.n	8008be0 <xTimerGenericCommand+0x30>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	623b      	str	r3, [r7, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008be0:	4b19      	ldr	r3, [pc, #100]	@ (8008c48 <xTimerGenericCommand+0x98>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d02a      	beq.n	8008c3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	dc18      	bgt.n	8008c2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bfa:	f7ff fdad 	bl	8008758 <xTaskGetSchedulerState>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d109      	bne.n	8008c18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c04:	4b10      	ldr	r3, [pc, #64]	@ (8008c48 <xTimerGenericCommand+0x98>)
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	f107 0110 	add.w	r1, r7, #16
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c10:	f7fe f9ce 	bl	8006fb0 <xQueueGenericSend>
 8008c14:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c16:	e012      	b.n	8008c3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c18:	4b0b      	ldr	r3, [pc, #44]	@ (8008c48 <xTimerGenericCommand+0x98>)
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	f107 0110 	add.w	r1, r7, #16
 8008c20:	2300      	movs	r3, #0
 8008c22:	2200      	movs	r2, #0
 8008c24:	f7fe f9c4 	bl	8006fb0 <xQueueGenericSend>
 8008c28:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c2a:	e008      	b.n	8008c3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c2c:	4b06      	ldr	r3, [pc, #24]	@ (8008c48 <xTimerGenericCommand+0x98>)
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	f107 0110 	add.w	r1, r7, #16
 8008c34:	2300      	movs	r3, #0
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	f7fe fabc 	bl	80071b4 <xQueueGenericSendFromISR>
 8008c3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3728      	adds	r7, #40	@ 0x28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	2000126c 	.word	0x2000126c

08008c4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af02      	add	r7, sp, #8
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c56:	4b23      	ldr	r3, [pc, #140]	@ (8008ce4 <prvProcessExpiredTimer+0x98>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fd ff7b 	bl	8006b60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d023      	beq.n	8008cc0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	699a      	ldr	r2, [r3, #24]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	18d1      	adds	r1, r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	6978      	ldr	r0, [r7, #20]
 8008c86:	f000 f8d5 	bl	8008e34 <prvInsertTimerInActiveList>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d020      	beq.n	8008cd2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c90:	2300      	movs	r3, #0
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	2300      	movs	r3, #0
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	2100      	movs	r1, #0
 8008c9a:	6978      	ldr	r0, [r7, #20]
 8008c9c:	f7ff ff88 	bl	8008bb0 <xTimerGenericCommand>
 8008ca0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d114      	bne.n	8008cd2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	60fb      	str	r3, [r7, #12]
}
 8008cba:	bf00      	nop
 8008cbc:	bf00      	nop
 8008cbe:	e7fd      	b.n	8008cbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cc6:	f023 0301 	bic.w	r3, r3, #1
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	6978      	ldr	r0, [r7, #20]
 8008cd8:	4798      	blx	r3
}
 8008cda:	bf00      	nop
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20001264 	.word	0x20001264

08008ce8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cf0:	f107 0308 	add.w	r3, r7, #8
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 f859 	bl	8008dac <prvGetNextExpireTime>
 8008cfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 f805 	bl	8008d10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d06:	f000 f8d7 	bl	8008eb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d0a:	bf00      	nop
 8008d0c:	e7f0      	b.n	8008cf0 <prvTimerTask+0x8>
	...

08008d10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d1a:	f7ff f927 	bl	8007f6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d1e:	f107 0308 	add.w	r3, r7, #8
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f866 	bl	8008df4 <prvSampleTimeNow>
 8008d28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d130      	bne.n	8008d92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <prvProcessTimerOrBlockTask+0x3c>
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d806      	bhi.n	8008d4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d3e:	f7ff f923 	bl	8007f88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d42:	68f9      	ldr	r1, [r7, #12]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7ff ff81 	bl	8008c4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d4a:	e024      	b.n	8008d96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d008      	beq.n	8008d64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d52:	4b13      	ldr	r3, [pc, #76]	@ (8008da0 <prvProcessTimerOrBlockTask+0x90>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <prvProcessTimerOrBlockTask+0x50>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e000      	b.n	8008d62 <prvProcessTimerOrBlockTask+0x52>
 8008d60:	2300      	movs	r3, #0
 8008d62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d64:	4b0f      	ldr	r3, [pc, #60]	@ (8008da4 <prvProcessTimerOrBlockTask+0x94>)
 8008d66:	6818      	ldr	r0, [r3, #0]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	4619      	mov	r1, r3
 8008d72:	f7fe fe83 	bl	8007a7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d76:	f7ff f907 	bl	8007f88 <xTaskResumeAll>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d80:	4b09      	ldr	r3, [pc, #36]	@ (8008da8 <prvProcessTimerOrBlockTask+0x98>)
 8008d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	f3bf 8f6f 	isb	sy
}
 8008d90:	e001      	b.n	8008d96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d92:	f7ff f8f9 	bl	8007f88 <xTaskResumeAll>
}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20001268 	.word	0x20001268
 8008da4:	2000126c 	.word	0x2000126c
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008db4:	4b0e      	ldr	r3, [pc, #56]	@ (8008df0 <prvGetNextExpireTime+0x44>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <prvGetNextExpireTime+0x16>
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	e000      	b.n	8008dc4 <prvGetNextExpireTime+0x18>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d105      	bne.n	8008ddc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dd0:	4b07      	ldr	r3, [pc, #28]	@ (8008df0 <prvGetNextExpireTime+0x44>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	e001      	b.n	8008de0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008de0:	68fb      	ldr	r3, [r7, #12]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20001264 	.word	0x20001264

08008df4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008dfc:	f7ff f962 	bl	80080c4 <xTaskGetTickCount>
 8008e00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e02:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <prvSampleTimeNow+0x3c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d205      	bcs.n	8008e18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e0c:	f000 f93a 	bl	8009084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	e002      	b.n	8008e1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e1e:	4a04      	ldr	r2, [pc, #16]	@ (8008e30 <prvSampleTimeNow+0x3c>)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e24:	68fb      	ldr	r3, [r7, #12]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20001274 	.word	0x20001274

08008e34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e42:	2300      	movs	r3, #0
 8008e44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d812      	bhi.n	8008e80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d302      	bcc.n	8008e6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	e01b      	b.n	8008ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e6e:	4b10      	ldr	r3, [pc, #64]	@ (8008eb0 <prvInsertTimerInActiveList+0x7c>)
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3304      	adds	r3, #4
 8008e76:	4619      	mov	r1, r3
 8008e78:	4610      	mov	r0, r2
 8008e7a:	f7fd fe38 	bl	8006aee <vListInsert>
 8008e7e:	e012      	b.n	8008ea6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d206      	bcs.n	8008e96 <prvInsertTimerInActiveList+0x62>
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d302      	bcc.n	8008e96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e90:	2301      	movs	r3, #1
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e007      	b.n	8008ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e96:	4b07      	ldr	r3, [pc, #28]	@ (8008eb4 <prvInsertTimerInActiveList+0x80>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	f7fd fe24 	bl	8006aee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ea6:	697b      	ldr	r3, [r7, #20]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20001268 	.word	0x20001268
 8008eb4:	20001264 	.word	0x20001264

08008eb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08e      	sub	sp, #56	@ 0x38
 8008ebc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ebe:	e0ce      	b.n	800905e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	da19      	bge.n	8008efa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ec6:	1d3b      	adds	r3, r7, #4
 8008ec8:	3304      	adds	r3, #4
 8008eca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10b      	bne.n	8008eea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	61fb      	str	r3, [r7, #28]
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	e7fd      	b.n	8008ee6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ef0:	6850      	ldr	r0, [r2, #4]
 8008ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ef4:	6892      	ldr	r2, [r2, #8]
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f2c0 80ae 	blt.w	800905e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d004      	beq.n	8008f18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f10:	3304      	adds	r3, #4
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fd fe24 	bl	8006b60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f18:	463b      	mov	r3, r7
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff ff6a 	bl	8008df4 <prvSampleTimeNow>
 8008f20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b09      	cmp	r3, #9
 8008f26:	f200 8097 	bhi.w	8009058 <prvProcessReceivedCommands+0x1a0>
 8008f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f30 <prvProcessReceivedCommands+0x78>)
 8008f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f30:	08008f59 	.word	0x08008f59
 8008f34:	08008f59 	.word	0x08008f59
 8008f38:	08008f59 	.word	0x08008f59
 8008f3c:	08008fcf 	.word	0x08008fcf
 8008f40:	08008fe3 	.word	0x08008fe3
 8008f44:	0800902f 	.word	0x0800902f
 8008f48:	08008f59 	.word	0x08008f59
 8008f4c:	08008f59 	.word	0x08008f59
 8008f50:	08008fcf 	.word	0x08008fcf
 8008f54:	08008fe3 	.word	0x08008fe3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f5e:	f043 0301 	orr.w	r3, r3, #1
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	18d1      	adds	r1, r2, r3
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f78:	f7ff ff5c 	bl	8008e34 <prvInsertTimerInActiveList>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d06c      	beq.n	800905c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d061      	beq.n	800905c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	441a      	add	r2, r3
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008faa:	f7ff fe01 	bl	8008bb0 <xTimerGenericCommand>
 8008fae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d152      	bne.n	800905c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	61bb      	str	r3, [r7, #24]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fd4:	f023 0301 	bic.w	r3, r3, #1
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008fe0:	e03d      	b.n	800905e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fe8:	f043 0301 	orr.w	r3, r3, #1
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10b      	bne.n	800901a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	617b      	str	r3, [r7, #20]
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	e7fd      	b.n	8009016 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800901a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901c:	699a      	ldr	r2, [r3, #24]
 800901e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009020:	18d1      	adds	r1, r2, r3
 8009022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009028:	f7ff ff04 	bl	8008e34 <prvInsertTimerInActiveList>
					break;
 800902c:	e017      	b.n	800905e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800902e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009034:	f003 0302 	and.w	r3, r3, #2
 8009038:	2b00      	cmp	r3, #0
 800903a:	d103      	bne.n	8009044 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800903c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800903e:	f000 fbeb 	bl	8009818 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009042:	e00c      	b.n	800905e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800904a:	f023 0301 	bic.w	r3, r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009056:	e002      	b.n	800905e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009058:	bf00      	nop
 800905a:	e000      	b.n	800905e <prvProcessReceivedCommands+0x1a6>
					break;
 800905c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800905e:	4b08      	ldr	r3, [pc, #32]	@ (8009080 <prvProcessReceivedCommands+0x1c8>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	1d39      	adds	r1, r7, #4
 8009064:	2200      	movs	r2, #0
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe f942 	bl	80072f0 <xQueueReceive>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	f47f af26 	bne.w	8008ec0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009074:	bf00      	nop
 8009076:	bf00      	nop
 8009078:	3730      	adds	r7, #48	@ 0x30
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	2000126c 	.word	0x2000126c

08009084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800908a:	e049      	b.n	8009120 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800908c:	4b2e      	ldr	r3, [pc, #184]	@ (8009148 <prvSwitchTimerLists+0xc4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009096:	4b2c      	ldr	r3, [pc, #176]	@ (8009148 <prvSwitchTimerLists+0xc4>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fd fd5b 	bl	8006b60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090b8:	f003 0304 	and.w	r3, r3, #4
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d02f      	beq.n	8009120 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	4413      	add	r3, r2
 80090c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d90e      	bls.n	80090f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090de:	4b1a      	ldr	r3, [pc, #104]	@ (8009148 <prvSwitchTimerLists+0xc4>)
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3304      	adds	r3, #4
 80090e6:	4619      	mov	r1, r3
 80090e8:	4610      	mov	r0, r2
 80090ea:	f7fd fd00 	bl	8006aee <vListInsert>
 80090ee:	e017      	b.n	8009120 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090f0:	2300      	movs	r3, #0
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	2300      	movs	r3, #0
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	2100      	movs	r1, #0
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7ff fd58 	bl	8008bb0 <xTimerGenericCommand>
 8009100:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10b      	bne.n	8009120 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	603b      	str	r3, [r7, #0]
}
 800911a:	bf00      	nop
 800911c:	bf00      	nop
 800911e:	e7fd      	b.n	800911c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009120:	4b09      	ldr	r3, [pc, #36]	@ (8009148 <prvSwitchTimerLists+0xc4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1b0      	bne.n	800908c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800912a:	4b07      	ldr	r3, [pc, #28]	@ (8009148 <prvSwitchTimerLists+0xc4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009130:	4b06      	ldr	r3, [pc, #24]	@ (800914c <prvSwitchTimerLists+0xc8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a04      	ldr	r2, [pc, #16]	@ (8009148 <prvSwitchTimerLists+0xc4>)
 8009136:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009138:	4a04      	ldr	r2, [pc, #16]	@ (800914c <prvSwitchTimerLists+0xc8>)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	6013      	str	r3, [r2, #0]
}
 800913e:	bf00      	nop
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20001264 	.word	0x20001264
 800914c:	20001268 	.word	0x20001268

08009150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009156:	f000 f96f 	bl	8009438 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800915a:	4b15      	ldr	r3, [pc, #84]	@ (80091b0 <prvCheckForValidListAndQueue+0x60>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d120      	bne.n	80091a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009162:	4814      	ldr	r0, [pc, #80]	@ (80091b4 <prvCheckForValidListAndQueue+0x64>)
 8009164:	f7fd fc72 	bl	8006a4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009168:	4813      	ldr	r0, [pc, #76]	@ (80091b8 <prvCheckForValidListAndQueue+0x68>)
 800916a:	f7fd fc6f 	bl	8006a4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800916e:	4b13      	ldr	r3, [pc, #76]	@ (80091bc <prvCheckForValidListAndQueue+0x6c>)
 8009170:	4a10      	ldr	r2, [pc, #64]	@ (80091b4 <prvCheckForValidListAndQueue+0x64>)
 8009172:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009174:	4b12      	ldr	r3, [pc, #72]	@ (80091c0 <prvCheckForValidListAndQueue+0x70>)
 8009176:	4a10      	ldr	r2, [pc, #64]	@ (80091b8 <prvCheckForValidListAndQueue+0x68>)
 8009178:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800917a:	2300      	movs	r3, #0
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	4b11      	ldr	r3, [pc, #68]	@ (80091c4 <prvCheckForValidListAndQueue+0x74>)
 8009180:	4a11      	ldr	r2, [pc, #68]	@ (80091c8 <prvCheckForValidListAndQueue+0x78>)
 8009182:	2110      	movs	r1, #16
 8009184:	200a      	movs	r0, #10
 8009186:	f7fd fd7f 	bl	8006c88 <xQueueGenericCreateStatic>
 800918a:	4603      	mov	r3, r0
 800918c:	4a08      	ldr	r2, [pc, #32]	@ (80091b0 <prvCheckForValidListAndQueue+0x60>)
 800918e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009190:	4b07      	ldr	r3, [pc, #28]	@ (80091b0 <prvCheckForValidListAndQueue+0x60>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009198:	4b05      	ldr	r3, [pc, #20]	@ (80091b0 <prvCheckForValidListAndQueue+0x60>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	490b      	ldr	r1, [pc, #44]	@ (80091cc <prvCheckForValidListAndQueue+0x7c>)
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fc42 	bl	8007a28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091a4:	f000 f97a 	bl	800949c <vPortExitCritical>
}
 80091a8:	bf00      	nop
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	2000126c 	.word	0x2000126c
 80091b4:	2000123c 	.word	0x2000123c
 80091b8:	20001250 	.word	0x20001250
 80091bc:	20001264 	.word	0x20001264
 80091c0:	20001268 	.word	0x20001268
 80091c4:	20001318 	.word	0x20001318
 80091c8:	20001278 	.word	0x20001278
 80091cc:	0800c7dc 	.word	0x0800c7dc

080091d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3b04      	subs	r3, #4
 80091e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80091e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3b04      	subs	r3, #4
 80091ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f023 0201 	bic.w	r2, r3, #1
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3b04      	subs	r3, #4
 80091fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009200:	4a0c      	ldr	r2, [pc, #48]	@ (8009234 <pxPortInitialiseStack+0x64>)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3b14      	subs	r3, #20
 800920a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3b04      	subs	r3, #4
 8009216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f06f 0202 	mvn.w	r2, #2
 800921e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3b20      	subs	r3, #32
 8009224:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009226:	68fb      	ldr	r3, [r7, #12]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	08009239 	.word	0x08009239

08009238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009242:	4b13      	ldr	r3, [pc, #76]	@ (8009290 <prvTaskExitError+0x58>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924a:	d00b      	beq.n	8009264 <prvTaskExitError+0x2c>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	60fb      	str	r3, [r7, #12]
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	e7fd      	b.n	8009260 <prvTaskExitError+0x28>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	60bb      	str	r3, [r7, #8]
}
 8009276:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009278:	bf00      	nop
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d0fc      	beq.n	800927a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	2000000c 	.word	0x2000000c
	...

080092a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092a0:	4b07      	ldr	r3, [pc, #28]	@ (80092c0 <pxCurrentTCBConst2>)
 80092a2:	6819      	ldr	r1, [r3, #0]
 80092a4:	6808      	ldr	r0, [r1, #0]
 80092a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092aa:	f380 8809 	msr	PSP, r0
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f04f 0000 	mov.w	r0, #0
 80092b6:	f380 8811 	msr	BASEPRI, r0
 80092ba:	4770      	bx	lr
 80092bc:	f3af 8000 	nop.w

080092c0 <pxCurrentTCBConst2>:
 80092c0:	20000d3c 	.word	0x20000d3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop

080092c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092c8:	4808      	ldr	r0, [pc, #32]	@ (80092ec <prvPortStartFirstTask+0x24>)
 80092ca:	6800      	ldr	r0, [r0, #0]
 80092cc:	6800      	ldr	r0, [r0, #0]
 80092ce:	f380 8808 	msr	MSP, r0
 80092d2:	f04f 0000 	mov.w	r0, #0
 80092d6:	f380 8814 	msr	CONTROL, r0
 80092da:	b662      	cpsie	i
 80092dc:	b661      	cpsie	f
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	df00      	svc	0
 80092e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092ea:	bf00      	nop
 80092ec:	e000ed08 	.word	0xe000ed08

080092f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092f6:	4b47      	ldr	r3, [pc, #284]	@ (8009414 <xPortStartScheduler+0x124>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a47      	ldr	r2, [pc, #284]	@ (8009418 <xPortStartScheduler+0x128>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d10b      	bne.n	8009318 <xPortStartScheduler+0x28>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	60fb      	str	r3, [r7, #12]
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	e7fd      	b.n	8009314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009318:	4b3e      	ldr	r3, [pc, #248]	@ (8009414 <xPortStartScheduler+0x124>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a3f      	ldr	r2, [pc, #252]	@ (800941c <xPortStartScheduler+0x12c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d10b      	bne.n	800933a <xPortStartScheduler+0x4a>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	613b      	str	r3, [r7, #16]
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	e7fd      	b.n	8009336 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800933a:	4b39      	ldr	r3, [pc, #228]	@ (8009420 <xPortStartScheduler+0x130>)
 800933c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	22ff      	movs	r2, #255	@ 0xff
 800934a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	b2db      	uxtb	r3, r3
 8009352:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800935c:	b2da      	uxtb	r2, r3
 800935e:	4b31      	ldr	r3, [pc, #196]	@ (8009424 <xPortStartScheduler+0x134>)
 8009360:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009362:	4b31      	ldr	r3, [pc, #196]	@ (8009428 <xPortStartScheduler+0x138>)
 8009364:	2207      	movs	r2, #7
 8009366:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009368:	e009      	b.n	800937e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800936a:	4b2f      	ldr	r3, [pc, #188]	@ (8009428 <xPortStartScheduler+0x138>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3b01      	subs	r3, #1
 8009370:	4a2d      	ldr	r2, [pc, #180]	@ (8009428 <xPortStartScheduler+0x138>)
 8009372:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	b2db      	uxtb	r3, r3
 800937c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009386:	2b80      	cmp	r3, #128	@ 0x80
 8009388:	d0ef      	beq.n	800936a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800938a:	4b27      	ldr	r3, [pc, #156]	@ (8009428 <xPortStartScheduler+0x138>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f1c3 0307 	rsb	r3, r3, #7
 8009392:	2b04      	cmp	r3, #4
 8009394:	d00b      	beq.n	80093ae <xPortStartScheduler+0xbe>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	60bb      	str	r3, [r7, #8]
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	e7fd      	b.n	80093aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009428 <xPortStartScheduler+0x138>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009428 <xPortStartScheduler+0x138>)
 80093b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009428 <xPortStartScheduler+0x138>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093c0:	4a19      	ldr	r2, [pc, #100]	@ (8009428 <xPortStartScheduler+0x138>)
 80093c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093cc:	4b17      	ldr	r3, [pc, #92]	@ (800942c <xPortStartScheduler+0x13c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a16      	ldr	r2, [pc, #88]	@ (800942c <xPortStartScheduler+0x13c>)
 80093d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80093d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093d8:	4b14      	ldr	r3, [pc, #80]	@ (800942c <xPortStartScheduler+0x13c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a13      	ldr	r2, [pc, #76]	@ (800942c <xPortStartScheduler+0x13c>)
 80093de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80093e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093e4:	f000 f8da 	bl	800959c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093e8:	4b11      	ldr	r3, [pc, #68]	@ (8009430 <xPortStartScheduler+0x140>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093ee:	f000 f8f9 	bl	80095e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093f2:	4b10      	ldr	r3, [pc, #64]	@ (8009434 <xPortStartScheduler+0x144>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009434 <xPortStartScheduler+0x144>)
 80093f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80093fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093fe:	f7ff ff63 	bl	80092c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009402:	f7fe ff29 	bl	8008258 <vTaskSwitchContext>
	prvTaskExitError();
 8009406:	f7ff ff17 	bl	8009238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	e000ed00 	.word	0xe000ed00
 8009418:	410fc271 	.word	0x410fc271
 800941c:	410fc270 	.word	0x410fc270
 8009420:	e000e400 	.word	0xe000e400
 8009424:	20001368 	.word	0x20001368
 8009428:	2000136c 	.word	0x2000136c
 800942c:	e000ed20 	.word	0xe000ed20
 8009430:	2000000c 	.word	0x2000000c
 8009434:	e000ef34 	.word	0xe000ef34

08009438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	607b      	str	r3, [r7, #4]
}
 8009450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009452:	4b10      	ldr	r3, [pc, #64]	@ (8009494 <vPortEnterCritical+0x5c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3301      	adds	r3, #1
 8009458:	4a0e      	ldr	r2, [pc, #56]	@ (8009494 <vPortEnterCritical+0x5c>)
 800945a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800945c:	4b0d      	ldr	r3, [pc, #52]	@ (8009494 <vPortEnterCritical+0x5c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d110      	bne.n	8009486 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009464:	4b0c      	ldr	r3, [pc, #48]	@ (8009498 <vPortEnterCritical+0x60>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00b      	beq.n	8009486 <vPortEnterCritical+0x4e>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	603b      	str	r3, [r7, #0]
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	e7fd      	b.n	8009482 <vPortEnterCritical+0x4a>
	}
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	2000000c 	.word	0x2000000c
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094a2:	4b12      	ldr	r3, [pc, #72]	@ (80094ec <vPortExitCritical+0x50>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10b      	bne.n	80094c2 <vPortExitCritical+0x26>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	607b      	str	r3, [r7, #4]
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	e7fd      	b.n	80094be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094c2:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <vPortExitCritical+0x50>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4a08      	ldr	r2, [pc, #32]	@ (80094ec <vPortExitCritical+0x50>)
 80094ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094cc:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <vPortExitCritical+0x50>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d105      	bne.n	80094e0 <vPortExitCritical+0x44>
 80094d4:	2300      	movs	r3, #0
 80094d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f383 8811 	msr	BASEPRI, r3
}
 80094de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	2000000c 	.word	0x2000000c

080094f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094f0:	f3ef 8009 	mrs	r0, PSP
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	4b15      	ldr	r3, [pc, #84]	@ (8009550 <pxCurrentTCBConst>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	f01e 0f10 	tst.w	lr, #16
 8009500:	bf08      	it	eq
 8009502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950a:	6010      	str	r0, [r2, #0]
 800950c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009514:	f380 8811 	msr	BASEPRI, r0
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f7fe fe9a 	bl	8008258 <vTaskSwitchContext>
 8009524:	f04f 0000 	mov.w	r0, #0
 8009528:	f380 8811 	msr	BASEPRI, r0
 800952c:	bc09      	pop	{r0, r3}
 800952e:	6819      	ldr	r1, [r3, #0]
 8009530:	6808      	ldr	r0, [r1, #0]
 8009532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009536:	f01e 0f10 	tst.w	lr, #16
 800953a:	bf08      	it	eq
 800953c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009540:	f380 8809 	msr	PSP, r0
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	f3af 8000 	nop.w

08009550 <pxCurrentTCBConst>:
 8009550:	20000d3c 	.word	0x20000d3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop

08009558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	607b      	str	r3, [r7, #4]
}
 8009570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009572:	f7fe fdb7 	bl	80080e4 <xTaskIncrementTick>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d003      	beq.n	8009584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800957c:	4b06      	ldr	r3, [pc, #24]	@ (8009598 <xPortSysTickHandler+0x40>)
 800957e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	2300      	movs	r3, #0
 8009586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f383 8811 	msr	BASEPRI, r3
}
 800958e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095a0:	4b0b      	ldr	r3, [pc, #44]	@ (80095d0 <vPortSetupTimerInterrupt+0x34>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095a6:	4b0b      	ldr	r3, [pc, #44]	@ (80095d4 <vPortSetupTimerInterrupt+0x38>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095ac:	4b0a      	ldr	r3, [pc, #40]	@ (80095d8 <vPortSetupTimerInterrupt+0x3c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a0a      	ldr	r2, [pc, #40]	@ (80095dc <vPortSetupTimerInterrupt+0x40>)
 80095b2:	fba2 2303 	umull	r2, r3, r2, r3
 80095b6:	099b      	lsrs	r3, r3, #6
 80095b8:	4a09      	ldr	r2, [pc, #36]	@ (80095e0 <vPortSetupTimerInterrupt+0x44>)
 80095ba:	3b01      	subs	r3, #1
 80095bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095be:	4b04      	ldr	r3, [pc, #16]	@ (80095d0 <vPortSetupTimerInterrupt+0x34>)
 80095c0:	2207      	movs	r2, #7
 80095c2:	601a      	str	r2, [r3, #0]
}
 80095c4:	bf00      	nop
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	e000e010 	.word	0xe000e010
 80095d4:	e000e018 	.word	0xe000e018
 80095d8:	20000000 	.word	0x20000000
 80095dc:	10624dd3 	.word	0x10624dd3
 80095e0:	e000e014 	.word	0xe000e014

080095e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80095f4 <vPortEnableVFP+0x10>
 80095e8:	6801      	ldr	r1, [r0, #0]
 80095ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80095ee:	6001      	str	r1, [r0, #0]
 80095f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095f2:	bf00      	nop
 80095f4:	e000ed88 	.word	0xe000ed88

080095f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095fe:	f3ef 8305 	mrs	r3, IPSR
 8009602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b0f      	cmp	r3, #15
 8009608:	d915      	bls.n	8009636 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800960a:	4a18      	ldr	r2, [pc, #96]	@ (800966c <vPortValidateInterruptPriority+0x74>)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4413      	add	r3, r2
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009614:	4b16      	ldr	r3, [pc, #88]	@ (8009670 <vPortValidateInterruptPriority+0x78>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	7afa      	ldrb	r2, [r7, #11]
 800961a:	429a      	cmp	r2, r3
 800961c:	d20b      	bcs.n	8009636 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	607b      	str	r3, [r7, #4]
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop
 8009634:	e7fd      	b.n	8009632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009636:	4b0f      	ldr	r3, [pc, #60]	@ (8009674 <vPortValidateInterruptPriority+0x7c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800963e:	4b0e      	ldr	r3, [pc, #56]	@ (8009678 <vPortValidateInterruptPriority+0x80>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d90b      	bls.n	800965e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	603b      	str	r3, [r7, #0]
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <vPortValidateInterruptPriority+0x62>
	}
 800965e:	bf00      	nop
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	e000e3f0 	.word	0xe000e3f0
 8009670:	20001368 	.word	0x20001368
 8009674:	e000ed0c 	.word	0xe000ed0c
 8009678:	2000136c 	.word	0x2000136c

0800967c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	@ 0x28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009688:	f7fe fc70 	bl	8007f6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800968c:	4b5c      	ldr	r3, [pc, #368]	@ (8009800 <pvPortMalloc+0x184>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009694:	f000 f924 	bl	80098e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009698:	4b5a      	ldr	r3, [pc, #360]	@ (8009804 <pvPortMalloc+0x188>)
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4013      	ands	r3, r2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f040 8095 	bne.w	80097d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d01e      	beq.n	80096ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80096ac:	2208      	movs	r2, #8
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4413      	add	r3, r2
 80096b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d015      	beq.n	80096ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f023 0307 	bic.w	r3, r3, #7
 80096c4:	3308      	adds	r3, #8
 80096c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00b      	beq.n	80096ea <pvPortMalloc+0x6e>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	617b      	str	r3, [r7, #20]
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	e7fd      	b.n	80096e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d06f      	beq.n	80097d0 <pvPortMalloc+0x154>
 80096f0:	4b45      	ldr	r3, [pc, #276]	@ (8009808 <pvPortMalloc+0x18c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d86a      	bhi.n	80097d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096fa:	4b44      	ldr	r3, [pc, #272]	@ (800980c <pvPortMalloc+0x190>)
 80096fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096fe:	4b43      	ldr	r3, [pc, #268]	@ (800980c <pvPortMalloc+0x190>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009704:	e004      	b.n	8009710 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	429a      	cmp	r2, r3
 8009718:	d903      	bls.n	8009722 <pvPortMalloc+0xa6>
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1f1      	bne.n	8009706 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009722:	4b37      	ldr	r3, [pc, #220]	@ (8009800 <pvPortMalloc+0x184>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009728:	429a      	cmp	r2, r3
 800972a:	d051      	beq.n	80097d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2208      	movs	r2, #8
 8009732:	4413      	add	r3, r2
 8009734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	1ad2      	subs	r2, r2, r3
 8009746:	2308      	movs	r3, #8
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	429a      	cmp	r2, r3
 800974c:	d920      	bls.n	8009790 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800974e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4413      	add	r3, r2
 8009754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	f003 0307 	and.w	r3, r3, #7
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00b      	beq.n	8009778 <pvPortMalloc+0xfc>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	613b      	str	r3, [r7, #16]
}
 8009772:	bf00      	nop
 8009774:	bf00      	nop
 8009776:	e7fd      	b.n	8009774 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800978a:	69b8      	ldr	r0, [r7, #24]
 800978c:	f000 f90a 	bl	80099a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009790:	4b1d      	ldr	r3, [pc, #116]	@ (8009808 <pvPortMalloc+0x18c>)
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	4a1b      	ldr	r2, [pc, #108]	@ (8009808 <pvPortMalloc+0x18c>)
 800979c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800979e:	4b1a      	ldr	r3, [pc, #104]	@ (8009808 <pvPortMalloc+0x18c>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009810 <pvPortMalloc+0x194>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d203      	bcs.n	80097b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097aa:	4b17      	ldr	r3, [pc, #92]	@ (8009808 <pvPortMalloc+0x18c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a18      	ldr	r2, [pc, #96]	@ (8009810 <pvPortMalloc+0x194>)
 80097b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	4b13      	ldr	r3, [pc, #76]	@ (8009804 <pvPortMalloc+0x188>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	431a      	orrs	r2, r3
 80097bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097c6:	4b13      	ldr	r3, [pc, #76]	@ (8009814 <pvPortMalloc+0x198>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3301      	adds	r3, #1
 80097cc:	4a11      	ldr	r2, [pc, #68]	@ (8009814 <pvPortMalloc+0x198>)
 80097ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097d0:	f7fe fbda 	bl	8007f88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	f003 0307 	and.w	r3, r3, #7
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <pvPortMalloc+0x17a>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	60fb      	str	r3, [r7, #12]
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	e7fd      	b.n	80097f2 <pvPortMalloc+0x176>
	return pvReturn;
 80097f6:	69fb      	ldr	r3, [r7, #28]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3728      	adds	r7, #40	@ 0x28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20004f78 	.word	0x20004f78
 8009804:	20004f8c 	.word	0x20004f8c
 8009808:	20004f7c 	.word	0x20004f7c
 800980c:	20004f70 	.word	0x20004f70
 8009810:	20004f80 	.word	0x20004f80
 8009814:	20004f84 	.word	0x20004f84

08009818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d04f      	beq.n	80098ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800982a:	2308      	movs	r3, #8
 800982c:	425b      	negs	r3, r3
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	4b25      	ldr	r3, [pc, #148]	@ (80098d4 <vPortFree+0xbc>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4013      	ands	r3, r2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10b      	bne.n	800985e <vPortFree+0x46>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	60fb      	str	r3, [r7, #12]
}
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	e7fd      	b.n	800985a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <vPortFree+0x66>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60bb      	str	r3, [r7, #8]
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	4b14      	ldr	r3, [pc, #80]	@ (80098d4 <vPortFree+0xbc>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4013      	ands	r3, r2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d01e      	beq.n	80098ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d11a      	bne.n	80098ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	4b0e      	ldr	r3, [pc, #56]	@ (80098d4 <vPortFree+0xbc>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	43db      	mvns	r3, r3
 800989e:	401a      	ands	r2, r3
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098a4:	f7fe fb62 	bl	8007f6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	4b0a      	ldr	r3, [pc, #40]	@ (80098d8 <vPortFree+0xc0>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4413      	add	r3, r2
 80098b2:	4a09      	ldr	r2, [pc, #36]	@ (80098d8 <vPortFree+0xc0>)
 80098b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098b6:	6938      	ldr	r0, [r7, #16]
 80098b8:	f000 f874 	bl	80099a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098bc:	4b07      	ldr	r3, [pc, #28]	@ (80098dc <vPortFree+0xc4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	4a06      	ldr	r2, [pc, #24]	@ (80098dc <vPortFree+0xc4>)
 80098c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098c6:	f7fe fb5f 	bl	8007f88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098ca:	bf00      	nop
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20004f8c 	.word	0x20004f8c
 80098d8:	20004f7c 	.word	0x20004f7c
 80098dc:	20004f88 	.word	0x20004f88

080098e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80098ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098ec:	4b27      	ldr	r3, [pc, #156]	@ (800998c <prvHeapInit+0xac>)
 80098ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f003 0307 	and.w	r3, r3, #7
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00c      	beq.n	8009914 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3307      	adds	r3, #7
 80098fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f023 0307 	bic.w	r3, r3, #7
 8009906:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	4a1f      	ldr	r2, [pc, #124]	@ (800998c <prvHeapInit+0xac>)
 8009910:	4413      	add	r3, r2
 8009912:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009918:	4a1d      	ldr	r2, [pc, #116]	@ (8009990 <prvHeapInit+0xb0>)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800991e:	4b1c      	ldr	r3, [pc, #112]	@ (8009990 <prvHeapInit+0xb0>)
 8009920:	2200      	movs	r2, #0
 8009922:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	4413      	add	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800992c:	2208      	movs	r2, #8
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	1a9b      	subs	r3, r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f023 0307 	bic.w	r3, r3, #7
 800993a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4a15      	ldr	r2, [pc, #84]	@ (8009994 <prvHeapInit+0xb4>)
 8009940:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009942:	4b14      	ldr	r3, [pc, #80]	@ (8009994 <prvHeapInit+0xb4>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2200      	movs	r2, #0
 8009948:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800994a:	4b12      	ldr	r3, [pc, #72]	@ (8009994 <prvHeapInit+0xb4>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	1ad2      	subs	r2, r2, r3
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009960:	4b0c      	ldr	r3, [pc, #48]	@ (8009994 <prvHeapInit+0xb4>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	4a0a      	ldr	r2, [pc, #40]	@ (8009998 <prvHeapInit+0xb8>)
 800996e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4a09      	ldr	r2, [pc, #36]	@ (800999c <prvHeapInit+0xbc>)
 8009976:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009978:	4b09      	ldr	r3, [pc, #36]	@ (80099a0 <prvHeapInit+0xc0>)
 800997a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800997e:	601a      	str	r2, [r3, #0]
}
 8009980:	bf00      	nop
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	20001370 	.word	0x20001370
 8009990:	20004f70 	.word	0x20004f70
 8009994:	20004f78 	.word	0x20004f78
 8009998:	20004f80 	.word	0x20004f80
 800999c:	20004f7c 	.word	0x20004f7c
 80099a0:	20004f8c 	.word	0x20004f8c

080099a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099ac:	4b28      	ldr	r3, [pc, #160]	@ (8009a50 <prvInsertBlockIntoFreeList+0xac>)
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e002      	b.n	80099b8 <prvInsertBlockIntoFreeList+0x14>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d8f7      	bhi.n	80099b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	4413      	add	r3, r2
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d108      	bne.n	80099e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	441a      	add	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	441a      	add	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d118      	bne.n	8009a2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	4b15      	ldr	r3, [pc, #84]	@ (8009a54 <prvInsertBlockIntoFreeList+0xb0>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d00d      	beq.n	8009a22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	441a      	add	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	e008      	b.n	8009a34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a22:	4b0c      	ldr	r3, [pc, #48]	@ (8009a54 <prvInsertBlockIntoFreeList+0xb0>)
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e003      	b.n	8009a34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d002      	beq.n	8009a42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a42:	bf00      	nop
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	20004f70 	.word	0x20004f70
 8009a54:	20004f78 	.word	0x20004f78

08009a58 <__cvt>:
 8009a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a5c:	ec57 6b10 	vmov	r6, r7, d0
 8009a60:	2f00      	cmp	r7, #0
 8009a62:	460c      	mov	r4, r1
 8009a64:	4619      	mov	r1, r3
 8009a66:	463b      	mov	r3, r7
 8009a68:	bfbb      	ittet	lt
 8009a6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009a6e:	461f      	movlt	r7, r3
 8009a70:	2300      	movge	r3, #0
 8009a72:	232d      	movlt	r3, #45	@ 0x2d
 8009a74:	700b      	strb	r3, [r1, #0]
 8009a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009a7c:	4691      	mov	r9, r2
 8009a7e:	f023 0820 	bic.w	r8, r3, #32
 8009a82:	bfbc      	itt	lt
 8009a84:	4632      	movlt	r2, r6
 8009a86:	4616      	movlt	r6, r2
 8009a88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a8c:	d005      	beq.n	8009a9a <__cvt+0x42>
 8009a8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a92:	d100      	bne.n	8009a96 <__cvt+0x3e>
 8009a94:	3401      	adds	r4, #1
 8009a96:	2102      	movs	r1, #2
 8009a98:	e000      	b.n	8009a9c <__cvt+0x44>
 8009a9a:	2103      	movs	r1, #3
 8009a9c:	ab03      	add	r3, sp, #12
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	ab02      	add	r3, sp, #8
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	ec47 6b10 	vmov	d0, r6, r7
 8009aa8:	4653      	mov	r3, sl
 8009aaa:	4622      	mov	r2, r4
 8009aac:	f000 fe68 	bl	800a780 <_dtoa_r>
 8009ab0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	d119      	bne.n	8009aec <__cvt+0x94>
 8009ab8:	f019 0f01 	tst.w	r9, #1
 8009abc:	d00e      	beq.n	8009adc <__cvt+0x84>
 8009abe:	eb00 0904 	add.w	r9, r0, r4
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	4639      	mov	r1, r7
 8009aca:	f7f7 f805 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ace:	b108      	cbz	r0, 8009ad4 <__cvt+0x7c>
 8009ad0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ad4:	2230      	movs	r2, #48	@ 0x30
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	454b      	cmp	r3, r9
 8009ada:	d31e      	bcc.n	8009b1a <__cvt+0xc2>
 8009adc:	9b03      	ldr	r3, [sp, #12]
 8009ade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ae0:	1b5b      	subs	r3, r3, r5
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	b004      	add	sp, #16
 8009ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009af0:	eb00 0904 	add.w	r9, r0, r4
 8009af4:	d1e5      	bne.n	8009ac2 <__cvt+0x6a>
 8009af6:	7803      	ldrb	r3, [r0, #0]
 8009af8:	2b30      	cmp	r3, #48	@ 0x30
 8009afa:	d10a      	bne.n	8009b12 <__cvt+0xba>
 8009afc:	2200      	movs	r2, #0
 8009afe:	2300      	movs	r3, #0
 8009b00:	4630      	mov	r0, r6
 8009b02:	4639      	mov	r1, r7
 8009b04:	f7f6 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b08:	b918      	cbnz	r0, 8009b12 <__cvt+0xba>
 8009b0a:	f1c4 0401 	rsb	r4, r4, #1
 8009b0e:	f8ca 4000 	str.w	r4, [sl]
 8009b12:	f8da 3000 	ldr.w	r3, [sl]
 8009b16:	4499      	add	r9, r3
 8009b18:	e7d3      	b.n	8009ac2 <__cvt+0x6a>
 8009b1a:	1c59      	adds	r1, r3, #1
 8009b1c:	9103      	str	r1, [sp, #12]
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	e7d9      	b.n	8009ad6 <__cvt+0x7e>

08009b22 <__exponent>:
 8009b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b24:	2900      	cmp	r1, #0
 8009b26:	bfba      	itte	lt
 8009b28:	4249      	neglt	r1, r1
 8009b2a:	232d      	movlt	r3, #45	@ 0x2d
 8009b2c:	232b      	movge	r3, #43	@ 0x2b
 8009b2e:	2909      	cmp	r1, #9
 8009b30:	7002      	strb	r2, [r0, #0]
 8009b32:	7043      	strb	r3, [r0, #1]
 8009b34:	dd29      	ble.n	8009b8a <__exponent+0x68>
 8009b36:	f10d 0307 	add.w	r3, sp, #7
 8009b3a:	461d      	mov	r5, r3
 8009b3c:	270a      	movs	r7, #10
 8009b3e:	461a      	mov	r2, r3
 8009b40:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b44:	fb07 1416 	mls	r4, r7, r6, r1
 8009b48:	3430      	adds	r4, #48	@ 0x30
 8009b4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009b4e:	460c      	mov	r4, r1
 8009b50:	2c63      	cmp	r4, #99	@ 0x63
 8009b52:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b56:	4631      	mov	r1, r6
 8009b58:	dcf1      	bgt.n	8009b3e <__exponent+0x1c>
 8009b5a:	3130      	adds	r1, #48	@ 0x30
 8009b5c:	1e94      	subs	r4, r2, #2
 8009b5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b62:	1c41      	adds	r1, r0, #1
 8009b64:	4623      	mov	r3, r4
 8009b66:	42ab      	cmp	r3, r5
 8009b68:	d30a      	bcc.n	8009b80 <__exponent+0x5e>
 8009b6a:	f10d 0309 	add.w	r3, sp, #9
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	42ac      	cmp	r4, r5
 8009b72:	bf88      	it	hi
 8009b74:	2300      	movhi	r3, #0
 8009b76:	3302      	adds	r3, #2
 8009b78:	4403      	add	r3, r0
 8009b7a:	1a18      	subs	r0, r3, r0
 8009b7c:	b003      	add	sp, #12
 8009b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b88:	e7ed      	b.n	8009b66 <__exponent+0x44>
 8009b8a:	2330      	movs	r3, #48	@ 0x30
 8009b8c:	3130      	adds	r1, #48	@ 0x30
 8009b8e:	7083      	strb	r3, [r0, #2]
 8009b90:	70c1      	strb	r1, [r0, #3]
 8009b92:	1d03      	adds	r3, r0, #4
 8009b94:	e7f1      	b.n	8009b7a <__exponent+0x58>
	...

08009b98 <_printf_float>:
 8009b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9c:	b08d      	sub	sp, #52	@ 0x34
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ba4:	4616      	mov	r6, r2
 8009ba6:	461f      	mov	r7, r3
 8009ba8:	4605      	mov	r5, r0
 8009baa:	f000 fcdb 	bl	800a564 <_localeconv_r>
 8009bae:	6803      	ldr	r3, [r0, #0]
 8009bb0:	9304      	str	r3, [sp, #16]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7f6 fb64 	bl	8000280 <strlen>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8009bc0:	9005      	str	r0, [sp, #20]
 8009bc2:	3307      	adds	r3, #7
 8009bc4:	f023 0307 	bic.w	r3, r3, #7
 8009bc8:	f103 0208 	add.w	r2, r3, #8
 8009bcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8009bd4:	f8c8 2000 	str.w	r2, [r8]
 8009bd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009be0:	9307      	str	r3, [sp, #28]
 8009be2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009be6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bee:	4b9c      	ldr	r3, [pc, #624]	@ (8009e60 <_printf_float+0x2c8>)
 8009bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf4:	f7f6 ffa2 	bl	8000b3c <__aeabi_dcmpun>
 8009bf8:	bb70      	cbnz	r0, 8009c58 <_printf_float+0xc0>
 8009bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bfe:	4b98      	ldr	r3, [pc, #608]	@ (8009e60 <_printf_float+0x2c8>)
 8009c00:	f04f 32ff 	mov.w	r2, #4294967295
 8009c04:	f7f6 ff7c 	bl	8000b00 <__aeabi_dcmple>
 8009c08:	bb30      	cbnz	r0, 8009c58 <_printf_float+0xc0>
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4640      	mov	r0, r8
 8009c10:	4649      	mov	r1, r9
 8009c12:	f7f6 ff6b 	bl	8000aec <__aeabi_dcmplt>
 8009c16:	b110      	cbz	r0, 8009c1e <_printf_float+0x86>
 8009c18:	232d      	movs	r3, #45	@ 0x2d
 8009c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c1e:	4a91      	ldr	r2, [pc, #580]	@ (8009e64 <_printf_float+0x2cc>)
 8009c20:	4b91      	ldr	r3, [pc, #580]	@ (8009e68 <_printf_float+0x2d0>)
 8009c22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009c26:	bf8c      	ite	hi
 8009c28:	4690      	movhi	r8, r2
 8009c2a:	4698      	movls	r8, r3
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	6123      	str	r3, [r4, #16]
 8009c30:	f02b 0304 	bic.w	r3, fp, #4
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	f04f 0900 	mov.w	r9, #0
 8009c3a:	9700      	str	r7, [sp, #0]
 8009c3c:	4633      	mov	r3, r6
 8009c3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009c40:	4621      	mov	r1, r4
 8009c42:	4628      	mov	r0, r5
 8009c44:	f000 f9d2 	bl	8009fec <_printf_common>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	f040 808d 	bne.w	8009d68 <_printf_float+0x1d0>
 8009c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c52:	b00d      	add	sp, #52	@ 0x34
 8009c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c58:	4642      	mov	r2, r8
 8009c5a:	464b      	mov	r3, r9
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	4649      	mov	r1, r9
 8009c60:	f7f6 ff6c 	bl	8000b3c <__aeabi_dcmpun>
 8009c64:	b140      	cbz	r0, 8009c78 <_printf_float+0xe0>
 8009c66:	464b      	mov	r3, r9
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bfbc      	itt	lt
 8009c6c:	232d      	movlt	r3, #45	@ 0x2d
 8009c6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c72:	4a7e      	ldr	r2, [pc, #504]	@ (8009e6c <_printf_float+0x2d4>)
 8009c74:	4b7e      	ldr	r3, [pc, #504]	@ (8009e70 <_printf_float+0x2d8>)
 8009c76:	e7d4      	b.n	8009c22 <_printf_float+0x8a>
 8009c78:	6863      	ldr	r3, [r4, #4]
 8009c7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009c7e:	9206      	str	r2, [sp, #24]
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	d13b      	bne.n	8009cfc <_printf_float+0x164>
 8009c84:	2306      	movs	r3, #6
 8009c86:	6063      	str	r3, [r4, #4]
 8009c88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	6022      	str	r2, [r4, #0]
 8009c90:	9303      	str	r3, [sp, #12]
 8009c92:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c98:	ab09      	add	r3, sp, #36	@ 0x24
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	6861      	ldr	r1, [r4, #4]
 8009c9e:	ec49 8b10 	vmov	d0, r8, r9
 8009ca2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f7ff fed6 	bl	8009a58 <__cvt>
 8009cac:	9b06      	ldr	r3, [sp, #24]
 8009cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009cb0:	2b47      	cmp	r3, #71	@ 0x47
 8009cb2:	4680      	mov	r8, r0
 8009cb4:	d129      	bne.n	8009d0a <_printf_float+0x172>
 8009cb6:	1cc8      	adds	r0, r1, #3
 8009cb8:	db02      	blt.n	8009cc0 <_printf_float+0x128>
 8009cba:	6863      	ldr	r3, [r4, #4]
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	dd41      	ble.n	8009d44 <_printf_float+0x1ac>
 8009cc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8009cc4:	fa5f fa8a 	uxtb.w	sl, sl
 8009cc8:	3901      	subs	r1, #1
 8009cca:	4652      	mov	r2, sl
 8009ccc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009cd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8009cd2:	f7ff ff26 	bl	8009b22 <__exponent>
 8009cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cd8:	1813      	adds	r3, r2, r0
 8009cda:	2a01      	cmp	r2, #1
 8009cdc:	4681      	mov	r9, r0
 8009cde:	6123      	str	r3, [r4, #16]
 8009ce0:	dc02      	bgt.n	8009ce8 <_printf_float+0x150>
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	07d2      	lsls	r2, r2, #31
 8009ce6:	d501      	bpl.n	8009cec <_printf_float+0x154>
 8009ce8:	3301      	adds	r3, #1
 8009cea:	6123      	str	r3, [r4, #16]
 8009cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0a2      	beq.n	8009c3a <_printf_float+0xa2>
 8009cf4:	232d      	movs	r3, #45	@ 0x2d
 8009cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cfa:	e79e      	b.n	8009c3a <_printf_float+0xa2>
 8009cfc:	9a06      	ldr	r2, [sp, #24]
 8009cfe:	2a47      	cmp	r2, #71	@ 0x47
 8009d00:	d1c2      	bne.n	8009c88 <_printf_float+0xf0>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1c0      	bne.n	8009c88 <_printf_float+0xf0>
 8009d06:	2301      	movs	r3, #1
 8009d08:	e7bd      	b.n	8009c86 <_printf_float+0xee>
 8009d0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d0e:	d9db      	bls.n	8009cc8 <_printf_float+0x130>
 8009d10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009d14:	d118      	bne.n	8009d48 <_printf_float+0x1b0>
 8009d16:	2900      	cmp	r1, #0
 8009d18:	6863      	ldr	r3, [r4, #4]
 8009d1a:	dd0b      	ble.n	8009d34 <_printf_float+0x19c>
 8009d1c:	6121      	str	r1, [r4, #16]
 8009d1e:	b913      	cbnz	r3, 8009d26 <_printf_float+0x18e>
 8009d20:	6822      	ldr	r2, [r4, #0]
 8009d22:	07d0      	lsls	r0, r2, #31
 8009d24:	d502      	bpl.n	8009d2c <_printf_float+0x194>
 8009d26:	3301      	adds	r3, #1
 8009d28:	440b      	add	r3, r1
 8009d2a:	6123      	str	r3, [r4, #16]
 8009d2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009d2e:	f04f 0900 	mov.w	r9, #0
 8009d32:	e7db      	b.n	8009cec <_printf_float+0x154>
 8009d34:	b913      	cbnz	r3, 8009d3c <_printf_float+0x1a4>
 8009d36:	6822      	ldr	r2, [r4, #0]
 8009d38:	07d2      	lsls	r2, r2, #31
 8009d3a:	d501      	bpl.n	8009d40 <_printf_float+0x1a8>
 8009d3c:	3302      	adds	r3, #2
 8009d3e:	e7f4      	b.n	8009d2a <_printf_float+0x192>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e7f2      	b.n	8009d2a <_printf_float+0x192>
 8009d44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d4a:	4299      	cmp	r1, r3
 8009d4c:	db05      	blt.n	8009d5a <_printf_float+0x1c2>
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	6121      	str	r1, [r4, #16]
 8009d52:	07d8      	lsls	r0, r3, #31
 8009d54:	d5ea      	bpl.n	8009d2c <_printf_float+0x194>
 8009d56:	1c4b      	adds	r3, r1, #1
 8009d58:	e7e7      	b.n	8009d2a <_printf_float+0x192>
 8009d5a:	2900      	cmp	r1, #0
 8009d5c:	bfd4      	ite	le
 8009d5e:	f1c1 0202 	rsble	r2, r1, #2
 8009d62:	2201      	movgt	r2, #1
 8009d64:	4413      	add	r3, r2
 8009d66:	e7e0      	b.n	8009d2a <_printf_float+0x192>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	055a      	lsls	r2, r3, #21
 8009d6c:	d407      	bmi.n	8009d7e <_printf_float+0x1e6>
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	4642      	mov	r2, r8
 8009d72:	4631      	mov	r1, r6
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b8      	blx	r7
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d12b      	bne.n	8009dd4 <_printf_float+0x23c>
 8009d7c:	e767      	b.n	8009c4e <_printf_float+0xb6>
 8009d7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d82:	f240 80dd 	bls.w	8009f40 <_printf_float+0x3a8>
 8009d86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f7f6 fea3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d033      	beq.n	8009dfe <_printf_float+0x266>
 8009d96:	4a37      	ldr	r2, [pc, #220]	@ (8009e74 <_printf_float+0x2dc>)
 8009d98:	2301      	movs	r3, #1
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b8      	blx	r7
 8009da0:	3001      	adds	r0, #1
 8009da2:	f43f af54 	beq.w	8009c4e <_printf_float+0xb6>
 8009da6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009daa:	4543      	cmp	r3, r8
 8009dac:	db02      	blt.n	8009db4 <_printf_float+0x21c>
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	07d8      	lsls	r0, r3, #31
 8009db2:	d50f      	bpl.n	8009dd4 <_printf_float+0x23c>
 8009db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009db8:	4631      	mov	r1, r6
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b8      	blx	r7
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f43f af45 	beq.w	8009c4e <_printf_float+0xb6>
 8009dc4:	f04f 0900 	mov.w	r9, #0
 8009dc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dcc:	f104 0a1a 	add.w	sl, r4, #26
 8009dd0:	45c8      	cmp	r8, r9
 8009dd2:	dc09      	bgt.n	8009de8 <_printf_float+0x250>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	079b      	lsls	r3, r3, #30
 8009dd8:	f100 8103 	bmi.w	8009fe2 <_printf_float+0x44a>
 8009ddc:	68e0      	ldr	r0, [r4, #12]
 8009dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009de0:	4298      	cmp	r0, r3
 8009de2:	bfb8      	it	lt
 8009de4:	4618      	movlt	r0, r3
 8009de6:	e734      	b.n	8009c52 <_printf_float+0xba>
 8009de8:	2301      	movs	r3, #1
 8009dea:	4652      	mov	r2, sl
 8009dec:	4631      	mov	r1, r6
 8009dee:	4628      	mov	r0, r5
 8009df0:	47b8      	blx	r7
 8009df2:	3001      	adds	r0, #1
 8009df4:	f43f af2b 	beq.w	8009c4e <_printf_float+0xb6>
 8009df8:	f109 0901 	add.w	r9, r9, #1
 8009dfc:	e7e8      	b.n	8009dd0 <_printf_float+0x238>
 8009dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	dc39      	bgt.n	8009e78 <_printf_float+0x2e0>
 8009e04:	4a1b      	ldr	r2, [pc, #108]	@ (8009e74 <_printf_float+0x2dc>)
 8009e06:	2301      	movs	r3, #1
 8009e08:	4631      	mov	r1, r6
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	47b8      	blx	r7
 8009e0e:	3001      	adds	r0, #1
 8009e10:	f43f af1d 	beq.w	8009c4e <_printf_float+0xb6>
 8009e14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009e18:	ea59 0303 	orrs.w	r3, r9, r3
 8009e1c:	d102      	bne.n	8009e24 <_printf_float+0x28c>
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	07d9      	lsls	r1, r3, #31
 8009e22:	d5d7      	bpl.n	8009dd4 <_printf_float+0x23c>
 8009e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e28:	4631      	mov	r1, r6
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	47b8      	blx	r7
 8009e2e:	3001      	adds	r0, #1
 8009e30:	f43f af0d 	beq.w	8009c4e <_printf_float+0xb6>
 8009e34:	f04f 0a00 	mov.w	sl, #0
 8009e38:	f104 0b1a 	add.w	fp, r4, #26
 8009e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e3e:	425b      	negs	r3, r3
 8009e40:	4553      	cmp	r3, sl
 8009e42:	dc01      	bgt.n	8009e48 <_printf_float+0x2b0>
 8009e44:	464b      	mov	r3, r9
 8009e46:	e793      	b.n	8009d70 <_printf_float+0x1d8>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	465a      	mov	r2, fp
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4628      	mov	r0, r5
 8009e50:	47b8      	blx	r7
 8009e52:	3001      	adds	r0, #1
 8009e54:	f43f aefb 	beq.w	8009c4e <_printf_float+0xb6>
 8009e58:	f10a 0a01 	add.w	sl, sl, #1
 8009e5c:	e7ee      	b.n	8009e3c <_printf_float+0x2a4>
 8009e5e:	bf00      	nop
 8009e60:	7fefffff 	.word	0x7fefffff
 8009e64:	0800c8c8 	.word	0x0800c8c8
 8009e68:	0800c8c4 	.word	0x0800c8c4
 8009e6c:	0800c8d0 	.word	0x0800c8d0
 8009e70:	0800c8cc 	.word	0x0800c8cc
 8009e74:	0800c8d4 	.word	0x0800c8d4
 8009e78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e7e:	4553      	cmp	r3, sl
 8009e80:	bfa8      	it	ge
 8009e82:	4653      	movge	r3, sl
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	4699      	mov	r9, r3
 8009e88:	dc36      	bgt.n	8009ef8 <_printf_float+0x360>
 8009e8a:	f04f 0b00 	mov.w	fp, #0
 8009e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e92:	f104 021a 	add.w	r2, r4, #26
 8009e96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e98:	9306      	str	r3, [sp, #24]
 8009e9a:	eba3 0309 	sub.w	r3, r3, r9
 8009e9e:	455b      	cmp	r3, fp
 8009ea0:	dc31      	bgt.n	8009f06 <_printf_float+0x36e>
 8009ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea4:	459a      	cmp	sl, r3
 8009ea6:	dc3a      	bgt.n	8009f1e <_printf_float+0x386>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	07da      	lsls	r2, r3, #31
 8009eac:	d437      	bmi.n	8009f1e <_printf_float+0x386>
 8009eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eb0:	ebaa 0903 	sub.w	r9, sl, r3
 8009eb4:	9b06      	ldr	r3, [sp, #24]
 8009eb6:	ebaa 0303 	sub.w	r3, sl, r3
 8009eba:	4599      	cmp	r9, r3
 8009ebc:	bfa8      	it	ge
 8009ebe:	4699      	movge	r9, r3
 8009ec0:	f1b9 0f00 	cmp.w	r9, #0
 8009ec4:	dc33      	bgt.n	8009f2e <_printf_float+0x396>
 8009ec6:	f04f 0800 	mov.w	r8, #0
 8009eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ece:	f104 0b1a 	add.w	fp, r4, #26
 8009ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8009ed8:	eba3 0309 	sub.w	r3, r3, r9
 8009edc:	4543      	cmp	r3, r8
 8009ede:	f77f af79 	ble.w	8009dd4 <_printf_float+0x23c>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	465a      	mov	r2, fp
 8009ee6:	4631      	mov	r1, r6
 8009ee8:	4628      	mov	r0, r5
 8009eea:	47b8      	blx	r7
 8009eec:	3001      	adds	r0, #1
 8009eee:	f43f aeae 	beq.w	8009c4e <_printf_float+0xb6>
 8009ef2:	f108 0801 	add.w	r8, r8, #1
 8009ef6:	e7ec      	b.n	8009ed2 <_printf_float+0x33a>
 8009ef8:	4642      	mov	r2, r8
 8009efa:	4631      	mov	r1, r6
 8009efc:	4628      	mov	r0, r5
 8009efe:	47b8      	blx	r7
 8009f00:	3001      	adds	r0, #1
 8009f02:	d1c2      	bne.n	8009e8a <_printf_float+0x2f2>
 8009f04:	e6a3      	b.n	8009c4e <_printf_float+0xb6>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	9206      	str	r2, [sp, #24]
 8009f0e:	47b8      	blx	r7
 8009f10:	3001      	adds	r0, #1
 8009f12:	f43f ae9c 	beq.w	8009c4e <_printf_float+0xb6>
 8009f16:	9a06      	ldr	r2, [sp, #24]
 8009f18:	f10b 0b01 	add.w	fp, fp, #1
 8009f1c:	e7bb      	b.n	8009e96 <_printf_float+0x2fe>
 8009f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	d1c0      	bne.n	8009eae <_printf_float+0x316>
 8009f2c:	e68f      	b.n	8009c4e <_printf_float+0xb6>
 8009f2e:	9a06      	ldr	r2, [sp, #24]
 8009f30:	464b      	mov	r3, r9
 8009f32:	4442      	add	r2, r8
 8009f34:	4631      	mov	r1, r6
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b8      	blx	r7
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d1c3      	bne.n	8009ec6 <_printf_float+0x32e>
 8009f3e:	e686      	b.n	8009c4e <_printf_float+0xb6>
 8009f40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f44:	f1ba 0f01 	cmp.w	sl, #1
 8009f48:	dc01      	bgt.n	8009f4e <_printf_float+0x3b6>
 8009f4a:	07db      	lsls	r3, r3, #31
 8009f4c:	d536      	bpl.n	8009fbc <_printf_float+0x424>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4642      	mov	r2, r8
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f ae78 	beq.w	8009c4e <_printf_float+0xb6>
 8009f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f62:	4631      	mov	r1, r6
 8009f64:	4628      	mov	r0, r5
 8009f66:	47b8      	blx	r7
 8009f68:	3001      	adds	r0, #1
 8009f6a:	f43f ae70 	beq.w	8009c4e <_printf_float+0xb6>
 8009f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f72:	2200      	movs	r2, #0
 8009f74:	2300      	movs	r3, #0
 8009f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f7a:	f7f6 fdad 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f7e:	b9c0      	cbnz	r0, 8009fb2 <_printf_float+0x41a>
 8009f80:	4653      	mov	r3, sl
 8009f82:	f108 0201 	add.w	r2, r8, #1
 8009f86:	4631      	mov	r1, r6
 8009f88:	4628      	mov	r0, r5
 8009f8a:	47b8      	blx	r7
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	d10c      	bne.n	8009faa <_printf_float+0x412>
 8009f90:	e65d      	b.n	8009c4e <_printf_float+0xb6>
 8009f92:	2301      	movs	r3, #1
 8009f94:	465a      	mov	r2, fp
 8009f96:	4631      	mov	r1, r6
 8009f98:	4628      	mov	r0, r5
 8009f9a:	47b8      	blx	r7
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	f43f ae56 	beq.w	8009c4e <_printf_float+0xb6>
 8009fa2:	f108 0801 	add.w	r8, r8, #1
 8009fa6:	45d0      	cmp	r8, sl
 8009fa8:	dbf3      	blt.n	8009f92 <_printf_float+0x3fa>
 8009faa:	464b      	mov	r3, r9
 8009fac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009fb0:	e6df      	b.n	8009d72 <_printf_float+0x1da>
 8009fb2:	f04f 0800 	mov.w	r8, #0
 8009fb6:	f104 0b1a 	add.w	fp, r4, #26
 8009fba:	e7f4      	b.n	8009fa6 <_printf_float+0x40e>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	4642      	mov	r2, r8
 8009fc0:	e7e1      	b.n	8009f86 <_printf_float+0x3ee>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	464a      	mov	r2, r9
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	4628      	mov	r0, r5
 8009fca:	47b8      	blx	r7
 8009fcc:	3001      	adds	r0, #1
 8009fce:	f43f ae3e 	beq.w	8009c4e <_printf_float+0xb6>
 8009fd2:	f108 0801 	add.w	r8, r8, #1
 8009fd6:	68e3      	ldr	r3, [r4, #12]
 8009fd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009fda:	1a5b      	subs	r3, r3, r1
 8009fdc:	4543      	cmp	r3, r8
 8009fde:	dcf0      	bgt.n	8009fc2 <_printf_float+0x42a>
 8009fe0:	e6fc      	b.n	8009ddc <_printf_float+0x244>
 8009fe2:	f04f 0800 	mov.w	r8, #0
 8009fe6:	f104 0919 	add.w	r9, r4, #25
 8009fea:	e7f4      	b.n	8009fd6 <_printf_float+0x43e>

08009fec <_printf_common>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	4616      	mov	r6, r2
 8009ff2:	4698      	mov	r8, r3
 8009ff4:	688a      	ldr	r2, [r1, #8]
 8009ff6:	690b      	ldr	r3, [r1, #16]
 8009ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	bfb8      	it	lt
 800a000:	4613      	movlt	r3, r2
 800a002:	6033      	str	r3, [r6, #0]
 800a004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a008:	4607      	mov	r7, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	b10a      	cbz	r2, 800a012 <_printf_common+0x26>
 800a00e:	3301      	adds	r3, #1
 800a010:	6033      	str	r3, [r6, #0]
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	0699      	lsls	r1, r3, #26
 800a016:	bf42      	ittt	mi
 800a018:	6833      	ldrmi	r3, [r6, #0]
 800a01a:	3302      	addmi	r3, #2
 800a01c:	6033      	strmi	r3, [r6, #0]
 800a01e:	6825      	ldr	r5, [r4, #0]
 800a020:	f015 0506 	ands.w	r5, r5, #6
 800a024:	d106      	bne.n	800a034 <_printf_common+0x48>
 800a026:	f104 0a19 	add.w	sl, r4, #25
 800a02a:	68e3      	ldr	r3, [r4, #12]
 800a02c:	6832      	ldr	r2, [r6, #0]
 800a02e:	1a9b      	subs	r3, r3, r2
 800a030:	42ab      	cmp	r3, r5
 800a032:	dc26      	bgt.n	800a082 <_printf_common+0x96>
 800a034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a038:	6822      	ldr	r2, [r4, #0]
 800a03a:	3b00      	subs	r3, #0
 800a03c:	bf18      	it	ne
 800a03e:	2301      	movne	r3, #1
 800a040:	0692      	lsls	r2, r2, #26
 800a042:	d42b      	bmi.n	800a09c <_printf_common+0xb0>
 800a044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a048:	4641      	mov	r1, r8
 800a04a:	4638      	mov	r0, r7
 800a04c:	47c8      	blx	r9
 800a04e:	3001      	adds	r0, #1
 800a050:	d01e      	beq.n	800a090 <_printf_common+0xa4>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	6922      	ldr	r2, [r4, #16]
 800a056:	f003 0306 	and.w	r3, r3, #6
 800a05a:	2b04      	cmp	r3, #4
 800a05c:	bf02      	ittt	eq
 800a05e:	68e5      	ldreq	r5, [r4, #12]
 800a060:	6833      	ldreq	r3, [r6, #0]
 800a062:	1aed      	subeq	r5, r5, r3
 800a064:	68a3      	ldr	r3, [r4, #8]
 800a066:	bf0c      	ite	eq
 800a068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a06c:	2500      	movne	r5, #0
 800a06e:	4293      	cmp	r3, r2
 800a070:	bfc4      	itt	gt
 800a072:	1a9b      	subgt	r3, r3, r2
 800a074:	18ed      	addgt	r5, r5, r3
 800a076:	2600      	movs	r6, #0
 800a078:	341a      	adds	r4, #26
 800a07a:	42b5      	cmp	r5, r6
 800a07c:	d11a      	bne.n	800a0b4 <_printf_common+0xc8>
 800a07e:	2000      	movs	r0, #0
 800a080:	e008      	b.n	800a094 <_printf_common+0xa8>
 800a082:	2301      	movs	r3, #1
 800a084:	4652      	mov	r2, sl
 800a086:	4641      	mov	r1, r8
 800a088:	4638      	mov	r0, r7
 800a08a:	47c8      	blx	r9
 800a08c:	3001      	adds	r0, #1
 800a08e:	d103      	bne.n	800a098 <_printf_common+0xac>
 800a090:	f04f 30ff 	mov.w	r0, #4294967295
 800a094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a098:	3501      	adds	r5, #1
 800a09a:	e7c6      	b.n	800a02a <_printf_common+0x3e>
 800a09c:	18e1      	adds	r1, r4, r3
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	2030      	movs	r0, #48	@ 0x30
 800a0a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a0a6:	4422      	add	r2, r4
 800a0a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a0ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a0b0:	3302      	adds	r3, #2
 800a0b2:	e7c7      	b.n	800a044 <_printf_common+0x58>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	4622      	mov	r2, r4
 800a0b8:	4641      	mov	r1, r8
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	47c8      	blx	r9
 800a0be:	3001      	adds	r0, #1
 800a0c0:	d0e6      	beq.n	800a090 <_printf_common+0xa4>
 800a0c2:	3601      	adds	r6, #1
 800a0c4:	e7d9      	b.n	800a07a <_printf_common+0x8e>
	...

0800a0c8 <_printf_i>:
 800a0c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0cc:	7e0f      	ldrb	r7, [r1, #24]
 800a0ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a0d0:	2f78      	cmp	r7, #120	@ 0x78
 800a0d2:	4691      	mov	r9, r2
 800a0d4:	4680      	mov	r8, r0
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	469a      	mov	sl, r3
 800a0da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a0de:	d807      	bhi.n	800a0f0 <_printf_i+0x28>
 800a0e0:	2f62      	cmp	r7, #98	@ 0x62
 800a0e2:	d80a      	bhi.n	800a0fa <_printf_i+0x32>
 800a0e4:	2f00      	cmp	r7, #0
 800a0e6:	f000 80d1 	beq.w	800a28c <_printf_i+0x1c4>
 800a0ea:	2f58      	cmp	r7, #88	@ 0x58
 800a0ec:	f000 80b8 	beq.w	800a260 <_printf_i+0x198>
 800a0f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0f8:	e03a      	b.n	800a170 <_printf_i+0xa8>
 800a0fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0fe:	2b15      	cmp	r3, #21
 800a100:	d8f6      	bhi.n	800a0f0 <_printf_i+0x28>
 800a102:	a101      	add	r1, pc, #4	@ (adr r1, 800a108 <_printf_i+0x40>)
 800a104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a108:	0800a161 	.word	0x0800a161
 800a10c:	0800a175 	.word	0x0800a175
 800a110:	0800a0f1 	.word	0x0800a0f1
 800a114:	0800a0f1 	.word	0x0800a0f1
 800a118:	0800a0f1 	.word	0x0800a0f1
 800a11c:	0800a0f1 	.word	0x0800a0f1
 800a120:	0800a175 	.word	0x0800a175
 800a124:	0800a0f1 	.word	0x0800a0f1
 800a128:	0800a0f1 	.word	0x0800a0f1
 800a12c:	0800a0f1 	.word	0x0800a0f1
 800a130:	0800a0f1 	.word	0x0800a0f1
 800a134:	0800a273 	.word	0x0800a273
 800a138:	0800a19f 	.word	0x0800a19f
 800a13c:	0800a22d 	.word	0x0800a22d
 800a140:	0800a0f1 	.word	0x0800a0f1
 800a144:	0800a0f1 	.word	0x0800a0f1
 800a148:	0800a295 	.word	0x0800a295
 800a14c:	0800a0f1 	.word	0x0800a0f1
 800a150:	0800a19f 	.word	0x0800a19f
 800a154:	0800a0f1 	.word	0x0800a0f1
 800a158:	0800a0f1 	.word	0x0800a0f1
 800a15c:	0800a235 	.word	0x0800a235
 800a160:	6833      	ldr	r3, [r6, #0]
 800a162:	1d1a      	adds	r2, r3, #4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6032      	str	r2, [r6, #0]
 800a168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a16c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a170:	2301      	movs	r3, #1
 800a172:	e09c      	b.n	800a2ae <_printf_i+0x1e6>
 800a174:	6833      	ldr	r3, [r6, #0]
 800a176:	6820      	ldr	r0, [r4, #0]
 800a178:	1d19      	adds	r1, r3, #4
 800a17a:	6031      	str	r1, [r6, #0]
 800a17c:	0606      	lsls	r6, r0, #24
 800a17e:	d501      	bpl.n	800a184 <_printf_i+0xbc>
 800a180:	681d      	ldr	r5, [r3, #0]
 800a182:	e003      	b.n	800a18c <_printf_i+0xc4>
 800a184:	0645      	lsls	r5, r0, #25
 800a186:	d5fb      	bpl.n	800a180 <_printf_i+0xb8>
 800a188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a18c:	2d00      	cmp	r5, #0
 800a18e:	da03      	bge.n	800a198 <_printf_i+0xd0>
 800a190:	232d      	movs	r3, #45	@ 0x2d
 800a192:	426d      	negs	r5, r5
 800a194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a198:	4858      	ldr	r0, [pc, #352]	@ (800a2fc <_printf_i+0x234>)
 800a19a:	230a      	movs	r3, #10
 800a19c:	e011      	b.n	800a1c2 <_printf_i+0xfa>
 800a19e:	6821      	ldr	r1, [r4, #0]
 800a1a0:	6833      	ldr	r3, [r6, #0]
 800a1a2:	0608      	lsls	r0, r1, #24
 800a1a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a1a8:	d402      	bmi.n	800a1b0 <_printf_i+0xe8>
 800a1aa:	0649      	lsls	r1, r1, #25
 800a1ac:	bf48      	it	mi
 800a1ae:	b2ad      	uxthmi	r5, r5
 800a1b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a1b2:	4852      	ldr	r0, [pc, #328]	@ (800a2fc <_printf_i+0x234>)
 800a1b4:	6033      	str	r3, [r6, #0]
 800a1b6:	bf14      	ite	ne
 800a1b8:	230a      	movne	r3, #10
 800a1ba:	2308      	moveq	r3, #8
 800a1bc:	2100      	movs	r1, #0
 800a1be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a1c2:	6866      	ldr	r6, [r4, #4]
 800a1c4:	60a6      	str	r6, [r4, #8]
 800a1c6:	2e00      	cmp	r6, #0
 800a1c8:	db05      	blt.n	800a1d6 <_printf_i+0x10e>
 800a1ca:	6821      	ldr	r1, [r4, #0]
 800a1cc:	432e      	orrs	r6, r5
 800a1ce:	f021 0104 	bic.w	r1, r1, #4
 800a1d2:	6021      	str	r1, [r4, #0]
 800a1d4:	d04b      	beq.n	800a26e <_printf_i+0x1a6>
 800a1d6:	4616      	mov	r6, r2
 800a1d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1dc:	fb03 5711 	mls	r7, r3, r1, r5
 800a1e0:	5dc7      	ldrb	r7, [r0, r7]
 800a1e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1e6:	462f      	mov	r7, r5
 800a1e8:	42bb      	cmp	r3, r7
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	d9f4      	bls.n	800a1d8 <_printf_i+0x110>
 800a1ee:	2b08      	cmp	r3, #8
 800a1f0:	d10b      	bne.n	800a20a <_printf_i+0x142>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	07df      	lsls	r7, r3, #31
 800a1f6:	d508      	bpl.n	800a20a <_printf_i+0x142>
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	6861      	ldr	r1, [r4, #4]
 800a1fc:	4299      	cmp	r1, r3
 800a1fe:	bfde      	ittt	le
 800a200:	2330      	movle	r3, #48	@ 0x30
 800a202:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a206:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a20a:	1b92      	subs	r2, r2, r6
 800a20c:	6122      	str	r2, [r4, #16]
 800a20e:	f8cd a000 	str.w	sl, [sp]
 800a212:	464b      	mov	r3, r9
 800a214:	aa03      	add	r2, sp, #12
 800a216:	4621      	mov	r1, r4
 800a218:	4640      	mov	r0, r8
 800a21a:	f7ff fee7 	bl	8009fec <_printf_common>
 800a21e:	3001      	adds	r0, #1
 800a220:	d14a      	bne.n	800a2b8 <_printf_i+0x1f0>
 800a222:	f04f 30ff 	mov.w	r0, #4294967295
 800a226:	b004      	add	sp, #16
 800a228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	f043 0320 	orr.w	r3, r3, #32
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	4832      	ldr	r0, [pc, #200]	@ (800a300 <_printf_i+0x238>)
 800a236:	2778      	movs	r7, #120	@ 0x78
 800a238:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	6831      	ldr	r1, [r6, #0]
 800a240:	061f      	lsls	r7, r3, #24
 800a242:	f851 5b04 	ldr.w	r5, [r1], #4
 800a246:	d402      	bmi.n	800a24e <_printf_i+0x186>
 800a248:	065f      	lsls	r7, r3, #25
 800a24a:	bf48      	it	mi
 800a24c:	b2ad      	uxthmi	r5, r5
 800a24e:	6031      	str	r1, [r6, #0]
 800a250:	07d9      	lsls	r1, r3, #31
 800a252:	bf44      	itt	mi
 800a254:	f043 0320 	orrmi.w	r3, r3, #32
 800a258:	6023      	strmi	r3, [r4, #0]
 800a25a:	b11d      	cbz	r5, 800a264 <_printf_i+0x19c>
 800a25c:	2310      	movs	r3, #16
 800a25e:	e7ad      	b.n	800a1bc <_printf_i+0xf4>
 800a260:	4826      	ldr	r0, [pc, #152]	@ (800a2fc <_printf_i+0x234>)
 800a262:	e7e9      	b.n	800a238 <_printf_i+0x170>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	f023 0320 	bic.w	r3, r3, #32
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	e7f6      	b.n	800a25c <_printf_i+0x194>
 800a26e:	4616      	mov	r6, r2
 800a270:	e7bd      	b.n	800a1ee <_printf_i+0x126>
 800a272:	6833      	ldr	r3, [r6, #0]
 800a274:	6825      	ldr	r5, [r4, #0]
 800a276:	6961      	ldr	r1, [r4, #20]
 800a278:	1d18      	adds	r0, r3, #4
 800a27a:	6030      	str	r0, [r6, #0]
 800a27c:	062e      	lsls	r6, r5, #24
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	d501      	bpl.n	800a286 <_printf_i+0x1be>
 800a282:	6019      	str	r1, [r3, #0]
 800a284:	e002      	b.n	800a28c <_printf_i+0x1c4>
 800a286:	0668      	lsls	r0, r5, #25
 800a288:	d5fb      	bpl.n	800a282 <_printf_i+0x1ba>
 800a28a:	8019      	strh	r1, [r3, #0]
 800a28c:	2300      	movs	r3, #0
 800a28e:	6123      	str	r3, [r4, #16]
 800a290:	4616      	mov	r6, r2
 800a292:	e7bc      	b.n	800a20e <_printf_i+0x146>
 800a294:	6833      	ldr	r3, [r6, #0]
 800a296:	1d1a      	adds	r2, r3, #4
 800a298:	6032      	str	r2, [r6, #0]
 800a29a:	681e      	ldr	r6, [r3, #0]
 800a29c:	6862      	ldr	r2, [r4, #4]
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	f7f5 ff9d 	bl	80001e0 <memchr>
 800a2a6:	b108      	cbz	r0, 800a2ac <_printf_i+0x1e4>
 800a2a8:	1b80      	subs	r0, r0, r6
 800a2aa:	6060      	str	r0, [r4, #4]
 800a2ac:	6863      	ldr	r3, [r4, #4]
 800a2ae:	6123      	str	r3, [r4, #16]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2b6:	e7aa      	b.n	800a20e <_printf_i+0x146>
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	4632      	mov	r2, r6
 800a2bc:	4649      	mov	r1, r9
 800a2be:	4640      	mov	r0, r8
 800a2c0:	47d0      	blx	sl
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	d0ad      	beq.n	800a222 <_printf_i+0x15a>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	079b      	lsls	r3, r3, #30
 800a2ca:	d413      	bmi.n	800a2f4 <_printf_i+0x22c>
 800a2cc:	68e0      	ldr	r0, [r4, #12]
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	4298      	cmp	r0, r3
 800a2d2:	bfb8      	it	lt
 800a2d4:	4618      	movlt	r0, r3
 800a2d6:	e7a6      	b.n	800a226 <_printf_i+0x15e>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	4632      	mov	r2, r6
 800a2dc:	4649      	mov	r1, r9
 800a2de:	4640      	mov	r0, r8
 800a2e0:	47d0      	blx	sl
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d09d      	beq.n	800a222 <_printf_i+0x15a>
 800a2e6:	3501      	adds	r5, #1
 800a2e8:	68e3      	ldr	r3, [r4, #12]
 800a2ea:	9903      	ldr	r1, [sp, #12]
 800a2ec:	1a5b      	subs	r3, r3, r1
 800a2ee:	42ab      	cmp	r3, r5
 800a2f0:	dcf2      	bgt.n	800a2d8 <_printf_i+0x210>
 800a2f2:	e7eb      	b.n	800a2cc <_printf_i+0x204>
 800a2f4:	2500      	movs	r5, #0
 800a2f6:	f104 0619 	add.w	r6, r4, #25
 800a2fa:	e7f5      	b.n	800a2e8 <_printf_i+0x220>
 800a2fc:	0800c8d6 	.word	0x0800c8d6
 800a300:	0800c8e7 	.word	0x0800c8e7

0800a304 <std>:
 800a304:	2300      	movs	r3, #0
 800a306:	b510      	push	{r4, lr}
 800a308:	4604      	mov	r4, r0
 800a30a:	e9c0 3300 	strd	r3, r3, [r0]
 800a30e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a312:	6083      	str	r3, [r0, #8]
 800a314:	8181      	strh	r1, [r0, #12]
 800a316:	6643      	str	r3, [r0, #100]	@ 0x64
 800a318:	81c2      	strh	r2, [r0, #14]
 800a31a:	6183      	str	r3, [r0, #24]
 800a31c:	4619      	mov	r1, r3
 800a31e:	2208      	movs	r2, #8
 800a320:	305c      	adds	r0, #92	@ 0x5c
 800a322:	f000 f916 	bl	800a552 <memset>
 800a326:	4b0d      	ldr	r3, [pc, #52]	@ (800a35c <std+0x58>)
 800a328:	6263      	str	r3, [r4, #36]	@ 0x24
 800a32a:	4b0d      	ldr	r3, [pc, #52]	@ (800a360 <std+0x5c>)
 800a32c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a32e:	4b0d      	ldr	r3, [pc, #52]	@ (800a364 <std+0x60>)
 800a330:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a332:	4b0d      	ldr	r3, [pc, #52]	@ (800a368 <std+0x64>)
 800a334:	6323      	str	r3, [r4, #48]	@ 0x30
 800a336:	4b0d      	ldr	r3, [pc, #52]	@ (800a36c <std+0x68>)
 800a338:	6224      	str	r4, [r4, #32]
 800a33a:	429c      	cmp	r4, r3
 800a33c:	d006      	beq.n	800a34c <std+0x48>
 800a33e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a342:	4294      	cmp	r4, r2
 800a344:	d002      	beq.n	800a34c <std+0x48>
 800a346:	33d0      	adds	r3, #208	@ 0xd0
 800a348:	429c      	cmp	r4, r3
 800a34a:	d105      	bne.n	800a358 <std+0x54>
 800a34c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a354:	f000 b97a 	b.w	800a64c <__retarget_lock_init_recursive>
 800a358:	bd10      	pop	{r4, pc}
 800a35a:	bf00      	nop
 800a35c:	0800a4cd 	.word	0x0800a4cd
 800a360:	0800a4ef 	.word	0x0800a4ef
 800a364:	0800a527 	.word	0x0800a527
 800a368:	0800a54b 	.word	0x0800a54b
 800a36c:	20004f90 	.word	0x20004f90

0800a370 <stdio_exit_handler>:
 800a370:	4a02      	ldr	r2, [pc, #8]	@ (800a37c <stdio_exit_handler+0xc>)
 800a372:	4903      	ldr	r1, [pc, #12]	@ (800a380 <stdio_exit_handler+0x10>)
 800a374:	4803      	ldr	r0, [pc, #12]	@ (800a384 <stdio_exit_handler+0x14>)
 800a376:	f000 b869 	b.w	800a44c <_fwalk_sglue>
 800a37a:	bf00      	nop
 800a37c:	20000010 	.word	0x20000010
 800a380:	0800bfcd 	.word	0x0800bfcd
 800a384:	20000020 	.word	0x20000020

0800a388 <cleanup_stdio>:
 800a388:	6841      	ldr	r1, [r0, #4]
 800a38a:	4b0c      	ldr	r3, [pc, #48]	@ (800a3bc <cleanup_stdio+0x34>)
 800a38c:	4299      	cmp	r1, r3
 800a38e:	b510      	push	{r4, lr}
 800a390:	4604      	mov	r4, r0
 800a392:	d001      	beq.n	800a398 <cleanup_stdio+0x10>
 800a394:	f001 fe1a 	bl	800bfcc <_fflush_r>
 800a398:	68a1      	ldr	r1, [r4, #8]
 800a39a:	4b09      	ldr	r3, [pc, #36]	@ (800a3c0 <cleanup_stdio+0x38>)
 800a39c:	4299      	cmp	r1, r3
 800a39e:	d002      	beq.n	800a3a6 <cleanup_stdio+0x1e>
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f001 fe13 	bl	800bfcc <_fflush_r>
 800a3a6:	68e1      	ldr	r1, [r4, #12]
 800a3a8:	4b06      	ldr	r3, [pc, #24]	@ (800a3c4 <cleanup_stdio+0x3c>)
 800a3aa:	4299      	cmp	r1, r3
 800a3ac:	d004      	beq.n	800a3b8 <cleanup_stdio+0x30>
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3b4:	f001 be0a 	b.w	800bfcc <_fflush_r>
 800a3b8:	bd10      	pop	{r4, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20004f90 	.word	0x20004f90
 800a3c0:	20004ff8 	.word	0x20004ff8
 800a3c4:	20005060 	.word	0x20005060

0800a3c8 <global_stdio_init.part.0>:
 800a3c8:	b510      	push	{r4, lr}
 800a3ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a3f8 <global_stdio_init.part.0+0x30>)
 800a3cc:	4c0b      	ldr	r4, [pc, #44]	@ (800a3fc <global_stdio_init.part.0+0x34>)
 800a3ce:	4a0c      	ldr	r2, [pc, #48]	@ (800a400 <global_stdio_init.part.0+0x38>)
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	2104      	movs	r1, #4
 800a3d8:	f7ff ff94 	bl	800a304 <std>
 800a3dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	2109      	movs	r1, #9
 800a3e4:	f7ff ff8e 	bl	800a304 <std>
 800a3e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f2:	2112      	movs	r1, #18
 800a3f4:	f7ff bf86 	b.w	800a304 <std>
 800a3f8:	200050c8 	.word	0x200050c8
 800a3fc:	20004f90 	.word	0x20004f90
 800a400:	0800a371 	.word	0x0800a371

0800a404 <__sfp_lock_acquire>:
 800a404:	4801      	ldr	r0, [pc, #4]	@ (800a40c <__sfp_lock_acquire+0x8>)
 800a406:	f000 b922 	b.w	800a64e <__retarget_lock_acquire_recursive>
 800a40a:	bf00      	nop
 800a40c:	200050d1 	.word	0x200050d1

0800a410 <__sfp_lock_release>:
 800a410:	4801      	ldr	r0, [pc, #4]	@ (800a418 <__sfp_lock_release+0x8>)
 800a412:	f000 b91d 	b.w	800a650 <__retarget_lock_release_recursive>
 800a416:	bf00      	nop
 800a418:	200050d1 	.word	0x200050d1

0800a41c <__sinit>:
 800a41c:	b510      	push	{r4, lr}
 800a41e:	4604      	mov	r4, r0
 800a420:	f7ff fff0 	bl	800a404 <__sfp_lock_acquire>
 800a424:	6a23      	ldr	r3, [r4, #32]
 800a426:	b11b      	cbz	r3, 800a430 <__sinit+0x14>
 800a428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a42c:	f7ff bff0 	b.w	800a410 <__sfp_lock_release>
 800a430:	4b04      	ldr	r3, [pc, #16]	@ (800a444 <__sinit+0x28>)
 800a432:	6223      	str	r3, [r4, #32]
 800a434:	4b04      	ldr	r3, [pc, #16]	@ (800a448 <__sinit+0x2c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1f5      	bne.n	800a428 <__sinit+0xc>
 800a43c:	f7ff ffc4 	bl	800a3c8 <global_stdio_init.part.0>
 800a440:	e7f2      	b.n	800a428 <__sinit+0xc>
 800a442:	bf00      	nop
 800a444:	0800a389 	.word	0x0800a389
 800a448:	200050c8 	.word	0x200050c8

0800a44c <_fwalk_sglue>:
 800a44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a450:	4607      	mov	r7, r0
 800a452:	4688      	mov	r8, r1
 800a454:	4614      	mov	r4, r2
 800a456:	2600      	movs	r6, #0
 800a458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a45c:	f1b9 0901 	subs.w	r9, r9, #1
 800a460:	d505      	bpl.n	800a46e <_fwalk_sglue+0x22>
 800a462:	6824      	ldr	r4, [r4, #0]
 800a464:	2c00      	cmp	r4, #0
 800a466:	d1f7      	bne.n	800a458 <_fwalk_sglue+0xc>
 800a468:	4630      	mov	r0, r6
 800a46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a46e:	89ab      	ldrh	r3, [r5, #12]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d907      	bls.n	800a484 <_fwalk_sglue+0x38>
 800a474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a478:	3301      	adds	r3, #1
 800a47a:	d003      	beq.n	800a484 <_fwalk_sglue+0x38>
 800a47c:	4629      	mov	r1, r5
 800a47e:	4638      	mov	r0, r7
 800a480:	47c0      	blx	r8
 800a482:	4306      	orrs	r6, r0
 800a484:	3568      	adds	r5, #104	@ 0x68
 800a486:	e7e9      	b.n	800a45c <_fwalk_sglue+0x10>

0800a488 <siprintf>:
 800a488:	b40e      	push	{r1, r2, r3}
 800a48a:	b510      	push	{r4, lr}
 800a48c:	b09d      	sub	sp, #116	@ 0x74
 800a48e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a490:	9002      	str	r0, [sp, #8]
 800a492:	9006      	str	r0, [sp, #24]
 800a494:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a498:	480a      	ldr	r0, [pc, #40]	@ (800a4c4 <siprintf+0x3c>)
 800a49a:	9107      	str	r1, [sp, #28]
 800a49c:	9104      	str	r1, [sp, #16]
 800a49e:	490a      	ldr	r1, [pc, #40]	@ (800a4c8 <siprintf+0x40>)
 800a4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a4:	9105      	str	r1, [sp, #20]
 800a4a6:	2400      	movs	r4, #0
 800a4a8:	a902      	add	r1, sp, #8
 800a4aa:	6800      	ldr	r0, [r0, #0]
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a4b0:	f001 fc0c 	bl	800bccc <_svfiprintf_r>
 800a4b4:	9b02      	ldr	r3, [sp, #8]
 800a4b6:	701c      	strb	r4, [r3, #0]
 800a4b8:	b01d      	add	sp, #116	@ 0x74
 800a4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4be:	b003      	add	sp, #12
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	2000001c 	.word	0x2000001c
 800a4c8:	ffff0208 	.word	0xffff0208

0800a4cc <__sread>:
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d4:	f000 f86c 	bl	800a5b0 <_read_r>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	bfab      	itete	ge
 800a4dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a4de:	89a3      	ldrhlt	r3, [r4, #12]
 800a4e0:	181b      	addge	r3, r3, r0
 800a4e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a4e6:	bfac      	ite	ge
 800a4e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a4ea:	81a3      	strhlt	r3, [r4, #12]
 800a4ec:	bd10      	pop	{r4, pc}

0800a4ee <__swrite>:
 800a4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f2:	461f      	mov	r7, r3
 800a4f4:	898b      	ldrh	r3, [r1, #12]
 800a4f6:	05db      	lsls	r3, r3, #23
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	4616      	mov	r6, r2
 800a4fe:	d505      	bpl.n	800a50c <__swrite+0x1e>
 800a500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a504:	2302      	movs	r3, #2
 800a506:	2200      	movs	r2, #0
 800a508:	f000 f840 	bl	800a58c <_lseek_r>
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a516:	81a3      	strh	r3, [r4, #12]
 800a518:	4632      	mov	r2, r6
 800a51a:	463b      	mov	r3, r7
 800a51c:	4628      	mov	r0, r5
 800a51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a522:	f000 b857 	b.w	800a5d4 <_write_r>

0800a526 <__sseek>:
 800a526:	b510      	push	{r4, lr}
 800a528:	460c      	mov	r4, r1
 800a52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a52e:	f000 f82d 	bl	800a58c <_lseek_r>
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	bf15      	itete	ne
 800a538:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a53a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a53e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a542:	81a3      	strheq	r3, [r4, #12]
 800a544:	bf18      	it	ne
 800a546:	81a3      	strhne	r3, [r4, #12]
 800a548:	bd10      	pop	{r4, pc}

0800a54a <__sclose>:
 800a54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a54e:	f000 b80d 	b.w	800a56c <_close_r>

0800a552 <memset>:
 800a552:	4402      	add	r2, r0
 800a554:	4603      	mov	r3, r0
 800a556:	4293      	cmp	r3, r2
 800a558:	d100      	bne.n	800a55c <memset+0xa>
 800a55a:	4770      	bx	lr
 800a55c:	f803 1b01 	strb.w	r1, [r3], #1
 800a560:	e7f9      	b.n	800a556 <memset+0x4>
	...

0800a564 <_localeconv_r>:
 800a564:	4800      	ldr	r0, [pc, #0]	@ (800a568 <_localeconv_r+0x4>)
 800a566:	4770      	bx	lr
 800a568:	2000015c 	.word	0x2000015c

0800a56c <_close_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4d06      	ldr	r5, [pc, #24]	@ (800a588 <_close_r+0x1c>)
 800a570:	2300      	movs	r3, #0
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	f7f7 fd86 	bl	8002088 <_close>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_close_r+0x1a>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_close_r+0x1a>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	200050cc 	.word	0x200050cc

0800a58c <_lseek_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4d07      	ldr	r5, [pc, #28]	@ (800a5ac <_lseek_r+0x20>)
 800a590:	4604      	mov	r4, r0
 800a592:	4608      	mov	r0, r1
 800a594:	4611      	mov	r1, r2
 800a596:	2200      	movs	r2, #0
 800a598:	602a      	str	r2, [r5, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	f7f7 fd9b 	bl	80020d6 <_lseek>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d102      	bne.n	800a5aa <_lseek_r+0x1e>
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	b103      	cbz	r3, 800a5aa <_lseek_r+0x1e>
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	200050cc 	.word	0x200050cc

0800a5b0 <_read_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	4d07      	ldr	r5, [pc, #28]	@ (800a5d0 <_read_r+0x20>)
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	4608      	mov	r0, r1
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	602a      	str	r2, [r5, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f7f7 fd29 	bl	8002016 <_read>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_read_r+0x1e>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_read_r+0x1e>
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	200050cc 	.word	0x200050cc

0800a5d4 <_write_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d07      	ldr	r5, [pc, #28]	@ (800a5f4 <_write_r+0x20>)
 800a5d8:	4604      	mov	r4, r0
 800a5da:	4608      	mov	r0, r1
 800a5dc:	4611      	mov	r1, r2
 800a5de:	2200      	movs	r2, #0
 800a5e0:	602a      	str	r2, [r5, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f7f7 fd34 	bl	8002050 <_write>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_write_r+0x1e>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_write_r+0x1e>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	200050cc 	.word	0x200050cc

0800a5f8 <__errno>:
 800a5f8:	4b01      	ldr	r3, [pc, #4]	@ (800a600 <__errno+0x8>)
 800a5fa:	6818      	ldr	r0, [r3, #0]
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	2000001c 	.word	0x2000001c

0800a604 <__libc_init_array>:
 800a604:	b570      	push	{r4, r5, r6, lr}
 800a606:	4d0d      	ldr	r5, [pc, #52]	@ (800a63c <__libc_init_array+0x38>)
 800a608:	4c0d      	ldr	r4, [pc, #52]	@ (800a640 <__libc_init_array+0x3c>)
 800a60a:	1b64      	subs	r4, r4, r5
 800a60c:	10a4      	asrs	r4, r4, #2
 800a60e:	2600      	movs	r6, #0
 800a610:	42a6      	cmp	r6, r4
 800a612:	d109      	bne.n	800a628 <__libc_init_array+0x24>
 800a614:	4d0b      	ldr	r5, [pc, #44]	@ (800a644 <__libc_init_array+0x40>)
 800a616:	4c0c      	ldr	r4, [pc, #48]	@ (800a648 <__libc_init_array+0x44>)
 800a618:	f002 f868 	bl	800c6ec <_init>
 800a61c:	1b64      	subs	r4, r4, r5
 800a61e:	10a4      	asrs	r4, r4, #2
 800a620:	2600      	movs	r6, #0
 800a622:	42a6      	cmp	r6, r4
 800a624:	d105      	bne.n	800a632 <__libc_init_array+0x2e>
 800a626:	bd70      	pop	{r4, r5, r6, pc}
 800a628:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62c:	4798      	blx	r3
 800a62e:	3601      	adds	r6, #1
 800a630:	e7ee      	b.n	800a610 <__libc_init_array+0xc>
 800a632:	f855 3b04 	ldr.w	r3, [r5], #4
 800a636:	4798      	blx	r3
 800a638:	3601      	adds	r6, #1
 800a63a:	e7f2      	b.n	800a622 <__libc_init_array+0x1e>
 800a63c:	0800cc44 	.word	0x0800cc44
 800a640:	0800cc44 	.word	0x0800cc44
 800a644:	0800cc44 	.word	0x0800cc44
 800a648:	0800cc48 	.word	0x0800cc48

0800a64c <__retarget_lock_init_recursive>:
 800a64c:	4770      	bx	lr

0800a64e <__retarget_lock_acquire_recursive>:
 800a64e:	4770      	bx	lr

0800a650 <__retarget_lock_release_recursive>:
 800a650:	4770      	bx	lr

0800a652 <memcpy>:
 800a652:	440a      	add	r2, r1
 800a654:	4291      	cmp	r1, r2
 800a656:	f100 33ff 	add.w	r3, r0, #4294967295
 800a65a:	d100      	bne.n	800a65e <memcpy+0xc>
 800a65c:	4770      	bx	lr
 800a65e:	b510      	push	{r4, lr}
 800a660:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a664:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a668:	4291      	cmp	r1, r2
 800a66a:	d1f9      	bne.n	800a660 <memcpy+0xe>
 800a66c:	bd10      	pop	{r4, pc}

0800a66e <quorem>:
 800a66e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a672:	6903      	ldr	r3, [r0, #16]
 800a674:	690c      	ldr	r4, [r1, #16]
 800a676:	42a3      	cmp	r3, r4
 800a678:	4607      	mov	r7, r0
 800a67a:	db7e      	blt.n	800a77a <quorem+0x10c>
 800a67c:	3c01      	subs	r4, #1
 800a67e:	f101 0814 	add.w	r8, r1, #20
 800a682:	00a3      	lsls	r3, r4, #2
 800a684:	f100 0514 	add.w	r5, r0, #20
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a698:	3301      	adds	r3, #1
 800a69a:	429a      	cmp	r2, r3
 800a69c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6a4:	d32e      	bcc.n	800a704 <quorem+0x96>
 800a6a6:	f04f 0a00 	mov.w	sl, #0
 800a6aa:	46c4      	mov	ip, r8
 800a6ac:	46ae      	mov	lr, r5
 800a6ae:	46d3      	mov	fp, sl
 800a6b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a6b4:	b298      	uxth	r0, r3
 800a6b6:	fb06 a000 	mla	r0, r6, r0, sl
 800a6ba:	0c02      	lsrs	r2, r0, #16
 800a6bc:	0c1b      	lsrs	r3, r3, #16
 800a6be:	fb06 2303 	mla	r3, r6, r3, r2
 800a6c2:	f8de 2000 	ldr.w	r2, [lr]
 800a6c6:	b280      	uxth	r0, r0
 800a6c8:	b292      	uxth	r2, r2
 800a6ca:	1a12      	subs	r2, r2, r0
 800a6cc:	445a      	add	r2, fp
 800a6ce:	f8de 0000 	ldr.w	r0, [lr]
 800a6d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a6dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a6e0:	b292      	uxth	r2, r2
 800a6e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a6e6:	45e1      	cmp	r9, ip
 800a6e8:	f84e 2b04 	str.w	r2, [lr], #4
 800a6ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a6f0:	d2de      	bcs.n	800a6b0 <quorem+0x42>
 800a6f2:	9b00      	ldr	r3, [sp, #0]
 800a6f4:	58eb      	ldr	r3, [r5, r3]
 800a6f6:	b92b      	cbnz	r3, 800a704 <quorem+0x96>
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	3b04      	subs	r3, #4
 800a6fc:	429d      	cmp	r5, r3
 800a6fe:	461a      	mov	r2, r3
 800a700:	d32f      	bcc.n	800a762 <quorem+0xf4>
 800a702:	613c      	str	r4, [r7, #16]
 800a704:	4638      	mov	r0, r7
 800a706:	f001 f97d 	bl	800ba04 <__mcmp>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	db25      	blt.n	800a75a <quorem+0xec>
 800a70e:	4629      	mov	r1, r5
 800a710:	2000      	movs	r0, #0
 800a712:	f858 2b04 	ldr.w	r2, [r8], #4
 800a716:	f8d1 c000 	ldr.w	ip, [r1]
 800a71a:	fa1f fe82 	uxth.w	lr, r2
 800a71e:	fa1f f38c 	uxth.w	r3, ip
 800a722:	eba3 030e 	sub.w	r3, r3, lr
 800a726:	4403      	add	r3, r0
 800a728:	0c12      	lsrs	r2, r2, #16
 800a72a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a72e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a732:	b29b      	uxth	r3, r3
 800a734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a738:	45c1      	cmp	r9, r8
 800a73a:	f841 3b04 	str.w	r3, [r1], #4
 800a73e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a742:	d2e6      	bcs.n	800a712 <quorem+0xa4>
 800a744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a748:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a74c:	b922      	cbnz	r2, 800a758 <quorem+0xea>
 800a74e:	3b04      	subs	r3, #4
 800a750:	429d      	cmp	r5, r3
 800a752:	461a      	mov	r2, r3
 800a754:	d30b      	bcc.n	800a76e <quorem+0x100>
 800a756:	613c      	str	r4, [r7, #16]
 800a758:	3601      	adds	r6, #1
 800a75a:	4630      	mov	r0, r6
 800a75c:	b003      	add	sp, #12
 800a75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a762:	6812      	ldr	r2, [r2, #0]
 800a764:	3b04      	subs	r3, #4
 800a766:	2a00      	cmp	r2, #0
 800a768:	d1cb      	bne.n	800a702 <quorem+0x94>
 800a76a:	3c01      	subs	r4, #1
 800a76c:	e7c6      	b.n	800a6fc <quorem+0x8e>
 800a76e:	6812      	ldr	r2, [r2, #0]
 800a770:	3b04      	subs	r3, #4
 800a772:	2a00      	cmp	r2, #0
 800a774:	d1ef      	bne.n	800a756 <quorem+0xe8>
 800a776:	3c01      	subs	r4, #1
 800a778:	e7ea      	b.n	800a750 <quorem+0xe2>
 800a77a:	2000      	movs	r0, #0
 800a77c:	e7ee      	b.n	800a75c <quorem+0xee>
	...

0800a780 <_dtoa_r>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	69c7      	ldr	r7, [r0, #28]
 800a786:	b097      	sub	sp, #92	@ 0x5c
 800a788:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a78c:	ec55 4b10 	vmov	r4, r5, d0
 800a790:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a792:	9107      	str	r1, [sp, #28]
 800a794:	4681      	mov	r9, r0
 800a796:	920c      	str	r2, [sp, #48]	@ 0x30
 800a798:	9311      	str	r3, [sp, #68]	@ 0x44
 800a79a:	b97f      	cbnz	r7, 800a7bc <_dtoa_r+0x3c>
 800a79c:	2010      	movs	r0, #16
 800a79e:	f000 fe09 	bl	800b3b4 <malloc>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	f8c9 001c 	str.w	r0, [r9, #28]
 800a7a8:	b920      	cbnz	r0, 800a7b4 <_dtoa_r+0x34>
 800a7aa:	4ba9      	ldr	r3, [pc, #676]	@ (800aa50 <_dtoa_r+0x2d0>)
 800a7ac:	21ef      	movs	r1, #239	@ 0xef
 800a7ae:	48a9      	ldr	r0, [pc, #676]	@ (800aa54 <_dtoa_r+0x2d4>)
 800a7b0:	f001 fc5e 	bl	800c070 <__assert_func>
 800a7b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a7b8:	6007      	str	r7, [r0, #0]
 800a7ba:	60c7      	str	r7, [r0, #12]
 800a7bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a7c0:	6819      	ldr	r1, [r3, #0]
 800a7c2:	b159      	cbz	r1, 800a7dc <_dtoa_r+0x5c>
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	604a      	str	r2, [r1, #4]
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	4093      	lsls	r3, r2
 800a7cc:	608b      	str	r3, [r1, #8]
 800a7ce:	4648      	mov	r0, r9
 800a7d0:	f000 fee6 	bl	800b5a0 <_Bfree>
 800a7d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]
 800a7dc:	1e2b      	subs	r3, r5, #0
 800a7de:	bfb9      	ittee	lt
 800a7e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a7e4:	9305      	strlt	r3, [sp, #20]
 800a7e6:	2300      	movge	r3, #0
 800a7e8:	6033      	strge	r3, [r6, #0]
 800a7ea:	9f05      	ldr	r7, [sp, #20]
 800a7ec:	4b9a      	ldr	r3, [pc, #616]	@ (800aa58 <_dtoa_r+0x2d8>)
 800a7ee:	bfbc      	itt	lt
 800a7f0:	2201      	movlt	r2, #1
 800a7f2:	6032      	strlt	r2, [r6, #0]
 800a7f4:	43bb      	bics	r3, r7
 800a7f6:	d112      	bne.n	800a81e <_dtoa_r+0x9e>
 800a7f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a7fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a7fe:	6013      	str	r3, [r2, #0]
 800a800:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a804:	4323      	orrs	r3, r4
 800a806:	f000 855a 	beq.w	800b2be <_dtoa_r+0xb3e>
 800a80a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a80c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800aa6c <_dtoa_r+0x2ec>
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 855c 	beq.w	800b2ce <_dtoa_r+0xb4e>
 800a816:	f10a 0303 	add.w	r3, sl, #3
 800a81a:	f000 bd56 	b.w	800b2ca <_dtoa_r+0xb4a>
 800a81e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a822:	2200      	movs	r2, #0
 800a824:	ec51 0b17 	vmov	r0, r1, d7
 800a828:	2300      	movs	r3, #0
 800a82a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a82e:	f7f6 f953 	bl	8000ad8 <__aeabi_dcmpeq>
 800a832:	4680      	mov	r8, r0
 800a834:	b158      	cbz	r0, 800a84e <_dtoa_r+0xce>
 800a836:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a838:	2301      	movs	r3, #1
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a83e:	b113      	cbz	r3, 800a846 <_dtoa_r+0xc6>
 800a840:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a842:	4b86      	ldr	r3, [pc, #536]	@ (800aa5c <_dtoa_r+0x2dc>)
 800a844:	6013      	str	r3, [r2, #0]
 800a846:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800aa70 <_dtoa_r+0x2f0>
 800a84a:	f000 bd40 	b.w	800b2ce <_dtoa_r+0xb4e>
 800a84e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a852:	aa14      	add	r2, sp, #80	@ 0x50
 800a854:	a915      	add	r1, sp, #84	@ 0x54
 800a856:	4648      	mov	r0, r9
 800a858:	f001 f984 	bl	800bb64 <__d2b>
 800a85c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a860:	9002      	str	r0, [sp, #8]
 800a862:	2e00      	cmp	r6, #0
 800a864:	d078      	beq.n	800a958 <_dtoa_r+0x1d8>
 800a866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a868:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a86c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a870:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a874:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a878:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a87c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a880:	4619      	mov	r1, r3
 800a882:	2200      	movs	r2, #0
 800a884:	4b76      	ldr	r3, [pc, #472]	@ (800aa60 <_dtoa_r+0x2e0>)
 800a886:	f7f5 fd07 	bl	8000298 <__aeabi_dsub>
 800a88a:	a36b      	add	r3, pc, #428	@ (adr r3, 800aa38 <_dtoa_r+0x2b8>)
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	f7f5 feba 	bl	8000608 <__aeabi_dmul>
 800a894:	a36a      	add	r3, pc, #424	@ (adr r3, 800aa40 <_dtoa_r+0x2c0>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f5 fcff 	bl	800029c <__adddf3>
 800a89e:	4604      	mov	r4, r0
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	460d      	mov	r5, r1
 800a8a4:	f7f5 fe46 	bl	8000534 <__aeabi_i2d>
 800a8a8:	a367      	add	r3, pc, #412	@ (adr r3, 800aa48 <_dtoa_r+0x2c8>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 feab 	bl	8000608 <__aeabi_dmul>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7f5 fcef 	bl	800029c <__adddf3>
 800a8be:	4604      	mov	r4, r0
 800a8c0:	460d      	mov	r5, r1
 800a8c2:	f7f6 f951 	bl	8000b68 <__aeabi_d2iz>
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4607      	mov	r7, r0
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f7f6 f90c 	bl	8000aec <__aeabi_dcmplt>
 800a8d4:	b140      	cbz	r0, 800a8e8 <_dtoa_r+0x168>
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	f7f5 fe2c 	bl	8000534 <__aeabi_i2d>
 800a8dc:	4622      	mov	r2, r4
 800a8de:	462b      	mov	r3, r5
 800a8e0:	f7f6 f8fa 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8e4:	b900      	cbnz	r0, 800a8e8 <_dtoa_r+0x168>
 800a8e6:	3f01      	subs	r7, #1
 800a8e8:	2f16      	cmp	r7, #22
 800a8ea:	d852      	bhi.n	800a992 <_dtoa_r+0x212>
 800a8ec:	4b5d      	ldr	r3, [pc, #372]	@ (800aa64 <_dtoa_r+0x2e4>)
 800a8ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a8fa:	f7f6 f8f7 	bl	8000aec <__aeabi_dcmplt>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d049      	beq.n	800a996 <_dtoa_r+0x216>
 800a902:	3f01      	subs	r7, #1
 800a904:	2300      	movs	r3, #0
 800a906:	9310      	str	r3, [sp, #64]	@ 0x40
 800a908:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a90a:	1b9b      	subs	r3, r3, r6
 800a90c:	1e5a      	subs	r2, r3, #1
 800a90e:	bf45      	ittet	mi
 800a910:	f1c3 0301 	rsbmi	r3, r3, #1
 800a914:	9300      	strmi	r3, [sp, #0]
 800a916:	2300      	movpl	r3, #0
 800a918:	2300      	movmi	r3, #0
 800a91a:	9206      	str	r2, [sp, #24]
 800a91c:	bf54      	ite	pl
 800a91e:	9300      	strpl	r3, [sp, #0]
 800a920:	9306      	strmi	r3, [sp, #24]
 800a922:	2f00      	cmp	r7, #0
 800a924:	db39      	blt.n	800a99a <_dtoa_r+0x21a>
 800a926:	9b06      	ldr	r3, [sp, #24]
 800a928:	970d      	str	r7, [sp, #52]	@ 0x34
 800a92a:	443b      	add	r3, r7
 800a92c:	9306      	str	r3, [sp, #24]
 800a92e:	2300      	movs	r3, #0
 800a930:	9308      	str	r3, [sp, #32]
 800a932:	9b07      	ldr	r3, [sp, #28]
 800a934:	2b09      	cmp	r3, #9
 800a936:	d863      	bhi.n	800aa00 <_dtoa_r+0x280>
 800a938:	2b05      	cmp	r3, #5
 800a93a:	bfc4      	itt	gt
 800a93c:	3b04      	subgt	r3, #4
 800a93e:	9307      	strgt	r3, [sp, #28]
 800a940:	9b07      	ldr	r3, [sp, #28]
 800a942:	f1a3 0302 	sub.w	r3, r3, #2
 800a946:	bfcc      	ite	gt
 800a948:	2400      	movgt	r4, #0
 800a94a:	2401      	movle	r4, #1
 800a94c:	2b03      	cmp	r3, #3
 800a94e:	d863      	bhi.n	800aa18 <_dtoa_r+0x298>
 800a950:	e8df f003 	tbb	[pc, r3]
 800a954:	2b375452 	.word	0x2b375452
 800a958:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a95c:	441e      	add	r6, r3
 800a95e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a962:	2b20      	cmp	r3, #32
 800a964:	bfc1      	itttt	gt
 800a966:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a96a:	409f      	lslgt	r7, r3
 800a96c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a970:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a974:	bfd6      	itet	le
 800a976:	f1c3 0320 	rsble	r3, r3, #32
 800a97a:	ea47 0003 	orrgt.w	r0, r7, r3
 800a97e:	fa04 f003 	lslle.w	r0, r4, r3
 800a982:	f7f5 fdc7 	bl	8000514 <__aeabi_ui2d>
 800a986:	2201      	movs	r2, #1
 800a988:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a98c:	3e01      	subs	r6, #1
 800a98e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a990:	e776      	b.n	800a880 <_dtoa_r+0x100>
 800a992:	2301      	movs	r3, #1
 800a994:	e7b7      	b.n	800a906 <_dtoa_r+0x186>
 800a996:	9010      	str	r0, [sp, #64]	@ 0x40
 800a998:	e7b6      	b.n	800a908 <_dtoa_r+0x188>
 800a99a:	9b00      	ldr	r3, [sp, #0]
 800a99c:	1bdb      	subs	r3, r3, r7
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	427b      	negs	r3, r7
 800a9a2:	9308      	str	r3, [sp, #32]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a9a8:	e7c3      	b.n	800a932 <_dtoa_r+0x1b2>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9b0:	eb07 0b03 	add.w	fp, r7, r3
 800a9b4:	f10b 0301 	add.w	r3, fp, #1
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	9303      	str	r3, [sp, #12]
 800a9bc:	bfb8      	it	lt
 800a9be:	2301      	movlt	r3, #1
 800a9c0:	e006      	b.n	800a9d0 <_dtoa_r+0x250>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dd28      	ble.n	800aa1e <_dtoa_r+0x29e>
 800a9cc:	469b      	mov	fp, r3
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	2204      	movs	r2, #4
 800a9d8:	f102 0514 	add.w	r5, r2, #20
 800a9dc:	429d      	cmp	r5, r3
 800a9de:	d926      	bls.n	800aa2e <_dtoa_r+0x2ae>
 800a9e0:	6041      	str	r1, [r0, #4]
 800a9e2:	4648      	mov	r0, r9
 800a9e4:	f000 fd9c 	bl	800b520 <_Balloc>
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d142      	bne.n	800aa74 <_dtoa_r+0x2f4>
 800a9ee:	4b1e      	ldr	r3, [pc, #120]	@ (800aa68 <_dtoa_r+0x2e8>)
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	f240 11af 	movw	r1, #431	@ 0x1af
 800a9f6:	e6da      	b.n	800a7ae <_dtoa_r+0x2e>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e7e3      	b.n	800a9c4 <_dtoa_r+0x244>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e7d5      	b.n	800a9ac <_dtoa_r+0x22c>
 800aa00:	2401      	movs	r4, #1
 800aa02:	2300      	movs	r3, #0
 800aa04:	9307      	str	r3, [sp, #28]
 800aa06:	9409      	str	r4, [sp, #36]	@ 0x24
 800aa08:	f04f 3bff 	mov.w	fp, #4294967295
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f8cd b00c 	str.w	fp, [sp, #12]
 800aa12:	2312      	movs	r3, #18
 800aa14:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa16:	e7db      	b.n	800a9d0 <_dtoa_r+0x250>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa1c:	e7f4      	b.n	800aa08 <_dtoa_r+0x288>
 800aa1e:	f04f 0b01 	mov.w	fp, #1
 800aa22:	f8cd b00c 	str.w	fp, [sp, #12]
 800aa26:	465b      	mov	r3, fp
 800aa28:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800aa2c:	e7d0      	b.n	800a9d0 <_dtoa_r+0x250>
 800aa2e:	3101      	adds	r1, #1
 800aa30:	0052      	lsls	r2, r2, #1
 800aa32:	e7d1      	b.n	800a9d8 <_dtoa_r+0x258>
 800aa34:	f3af 8000 	nop.w
 800aa38:	636f4361 	.word	0x636f4361
 800aa3c:	3fd287a7 	.word	0x3fd287a7
 800aa40:	8b60c8b3 	.word	0x8b60c8b3
 800aa44:	3fc68a28 	.word	0x3fc68a28
 800aa48:	509f79fb 	.word	0x509f79fb
 800aa4c:	3fd34413 	.word	0x3fd34413
 800aa50:	0800c905 	.word	0x0800c905
 800aa54:	0800c91c 	.word	0x0800c91c
 800aa58:	7ff00000 	.word	0x7ff00000
 800aa5c:	0800c8d5 	.word	0x0800c8d5
 800aa60:	3ff80000 	.word	0x3ff80000
 800aa64:	0800ca70 	.word	0x0800ca70
 800aa68:	0800c974 	.word	0x0800c974
 800aa6c:	0800c901 	.word	0x0800c901
 800aa70:	0800c8d4 	.word	0x0800c8d4
 800aa74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa78:	6018      	str	r0, [r3, #0]
 800aa7a:	9b03      	ldr	r3, [sp, #12]
 800aa7c:	2b0e      	cmp	r3, #14
 800aa7e:	f200 80a1 	bhi.w	800abc4 <_dtoa_r+0x444>
 800aa82:	2c00      	cmp	r4, #0
 800aa84:	f000 809e 	beq.w	800abc4 <_dtoa_r+0x444>
 800aa88:	2f00      	cmp	r7, #0
 800aa8a:	dd33      	ble.n	800aaf4 <_dtoa_r+0x374>
 800aa8c:	4b9c      	ldr	r3, [pc, #624]	@ (800ad00 <_dtoa_r+0x580>)
 800aa8e:	f007 020f 	and.w	r2, r7, #15
 800aa92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa96:	ed93 7b00 	vldr	d7, [r3]
 800aa9a:	05f8      	lsls	r0, r7, #23
 800aa9c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800aaa0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aaa4:	d516      	bpl.n	800aad4 <_dtoa_r+0x354>
 800aaa6:	4b97      	ldr	r3, [pc, #604]	@ (800ad04 <_dtoa_r+0x584>)
 800aaa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aaac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aab0:	f7f5 fed4 	bl	800085c <__aeabi_ddiv>
 800aab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aab8:	f004 040f 	and.w	r4, r4, #15
 800aabc:	2603      	movs	r6, #3
 800aabe:	4d91      	ldr	r5, [pc, #580]	@ (800ad04 <_dtoa_r+0x584>)
 800aac0:	b954      	cbnz	r4, 800aad8 <_dtoa_r+0x358>
 800aac2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaca:	f7f5 fec7 	bl	800085c <__aeabi_ddiv>
 800aace:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aad2:	e028      	b.n	800ab26 <_dtoa_r+0x3a6>
 800aad4:	2602      	movs	r6, #2
 800aad6:	e7f2      	b.n	800aabe <_dtoa_r+0x33e>
 800aad8:	07e1      	lsls	r1, r4, #31
 800aada:	d508      	bpl.n	800aaee <_dtoa_r+0x36e>
 800aadc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aae0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aae4:	f7f5 fd90 	bl	8000608 <__aeabi_dmul>
 800aae8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aaec:	3601      	adds	r6, #1
 800aaee:	1064      	asrs	r4, r4, #1
 800aaf0:	3508      	adds	r5, #8
 800aaf2:	e7e5      	b.n	800aac0 <_dtoa_r+0x340>
 800aaf4:	f000 80af 	beq.w	800ac56 <_dtoa_r+0x4d6>
 800aaf8:	427c      	negs	r4, r7
 800aafa:	4b81      	ldr	r3, [pc, #516]	@ (800ad00 <_dtoa_r+0x580>)
 800aafc:	4d81      	ldr	r5, [pc, #516]	@ (800ad04 <_dtoa_r+0x584>)
 800aafe:	f004 020f 	and.w	r2, r4, #15
 800ab02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab0e:	f7f5 fd7b 	bl	8000608 <__aeabi_dmul>
 800ab12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab16:	1124      	asrs	r4, r4, #4
 800ab18:	2300      	movs	r3, #0
 800ab1a:	2602      	movs	r6, #2
 800ab1c:	2c00      	cmp	r4, #0
 800ab1e:	f040 808f 	bne.w	800ac40 <_dtoa_r+0x4c0>
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1d3      	bne.n	800aace <_dtoa_r+0x34e>
 800ab26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab28:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 8094 	beq.w	800ac5a <_dtoa_r+0x4da>
 800ab32:	4b75      	ldr	r3, [pc, #468]	@ (800ad08 <_dtoa_r+0x588>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	4620      	mov	r0, r4
 800ab38:	4629      	mov	r1, r5
 800ab3a:	f7f5 ffd7 	bl	8000aec <__aeabi_dcmplt>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	f000 808b 	beq.w	800ac5a <_dtoa_r+0x4da>
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 8087 	beq.w	800ac5a <_dtoa_r+0x4da>
 800ab4c:	f1bb 0f00 	cmp.w	fp, #0
 800ab50:	dd34      	ble.n	800abbc <_dtoa_r+0x43c>
 800ab52:	4620      	mov	r0, r4
 800ab54:	4b6d      	ldr	r3, [pc, #436]	@ (800ad0c <_dtoa_r+0x58c>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	4629      	mov	r1, r5
 800ab5a:	f7f5 fd55 	bl	8000608 <__aeabi_dmul>
 800ab5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab62:	f107 38ff 	add.w	r8, r7, #4294967295
 800ab66:	3601      	adds	r6, #1
 800ab68:	465c      	mov	r4, fp
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f7f5 fce2 	bl	8000534 <__aeabi_i2d>
 800ab70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab74:	f7f5 fd48 	bl	8000608 <__aeabi_dmul>
 800ab78:	4b65      	ldr	r3, [pc, #404]	@ (800ad10 <_dtoa_r+0x590>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f7f5 fb8e 	bl	800029c <__adddf3>
 800ab80:	4605      	mov	r5, r0
 800ab82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab86:	2c00      	cmp	r4, #0
 800ab88:	d16a      	bne.n	800ac60 <_dtoa_r+0x4e0>
 800ab8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab8e:	4b61      	ldr	r3, [pc, #388]	@ (800ad14 <_dtoa_r+0x594>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	f7f5 fb81 	bl	8000298 <__aeabi_dsub>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab9e:	462a      	mov	r2, r5
 800aba0:	4633      	mov	r3, r6
 800aba2:	f7f5 ffc1 	bl	8000b28 <__aeabi_dcmpgt>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	f040 8298 	bne.w	800b0dc <_dtoa_r+0x95c>
 800abac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abb0:	462a      	mov	r2, r5
 800abb2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800abb6:	f7f5 ff99 	bl	8000aec <__aeabi_dcmplt>
 800abba:	bb38      	cbnz	r0, 800ac0c <_dtoa_r+0x48c>
 800abbc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800abc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800abc4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f2c0 8157 	blt.w	800ae7a <_dtoa_r+0x6fa>
 800abcc:	2f0e      	cmp	r7, #14
 800abce:	f300 8154 	bgt.w	800ae7a <_dtoa_r+0x6fa>
 800abd2:	4b4b      	ldr	r3, [pc, #300]	@ (800ad00 <_dtoa_r+0x580>)
 800abd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abd8:	ed93 7b00 	vldr	d7, [r3]
 800abdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abde:	2b00      	cmp	r3, #0
 800abe0:	ed8d 7b00 	vstr	d7, [sp]
 800abe4:	f280 80e5 	bge.w	800adb2 <_dtoa_r+0x632>
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	f300 80e1 	bgt.w	800adb2 <_dtoa_r+0x632>
 800abf0:	d10c      	bne.n	800ac0c <_dtoa_r+0x48c>
 800abf2:	4b48      	ldr	r3, [pc, #288]	@ (800ad14 <_dtoa_r+0x594>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	ec51 0b17 	vmov	r0, r1, d7
 800abfa:	f7f5 fd05 	bl	8000608 <__aeabi_dmul>
 800abfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac02:	f7f5 ff87 	bl	8000b14 <__aeabi_dcmpge>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f000 8266 	beq.w	800b0d8 <_dtoa_r+0x958>
 800ac0c:	2400      	movs	r4, #0
 800ac0e:	4625      	mov	r5, r4
 800ac10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac12:	4656      	mov	r6, sl
 800ac14:	ea6f 0803 	mvn.w	r8, r3
 800ac18:	2700      	movs	r7, #0
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	4648      	mov	r0, r9
 800ac1e:	f000 fcbf 	bl	800b5a0 <_Bfree>
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	f000 80bd 	beq.w	800ada2 <_dtoa_r+0x622>
 800ac28:	b12f      	cbz	r7, 800ac36 <_dtoa_r+0x4b6>
 800ac2a:	42af      	cmp	r7, r5
 800ac2c:	d003      	beq.n	800ac36 <_dtoa_r+0x4b6>
 800ac2e:	4639      	mov	r1, r7
 800ac30:	4648      	mov	r0, r9
 800ac32:	f000 fcb5 	bl	800b5a0 <_Bfree>
 800ac36:	4629      	mov	r1, r5
 800ac38:	4648      	mov	r0, r9
 800ac3a:	f000 fcb1 	bl	800b5a0 <_Bfree>
 800ac3e:	e0b0      	b.n	800ada2 <_dtoa_r+0x622>
 800ac40:	07e2      	lsls	r2, r4, #31
 800ac42:	d505      	bpl.n	800ac50 <_dtoa_r+0x4d0>
 800ac44:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac48:	f7f5 fcde 	bl	8000608 <__aeabi_dmul>
 800ac4c:	3601      	adds	r6, #1
 800ac4e:	2301      	movs	r3, #1
 800ac50:	1064      	asrs	r4, r4, #1
 800ac52:	3508      	adds	r5, #8
 800ac54:	e762      	b.n	800ab1c <_dtoa_r+0x39c>
 800ac56:	2602      	movs	r6, #2
 800ac58:	e765      	b.n	800ab26 <_dtoa_r+0x3a6>
 800ac5a:	9c03      	ldr	r4, [sp, #12]
 800ac5c:	46b8      	mov	r8, r7
 800ac5e:	e784      	b.n	800ab6a <_dtoa_r+0x3ea>
 800ac60:	4b27      	ldr	r3, [pc, #156]	@ (800ad00 <_dtoa_r+0x580>)
 800ac62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac6c:	4454      	add	r4, sl
 800ac6e:	2900      	cmp	r1, #0
 800ac70:	d054      	beq.n	800ad1c <_dtoa_r+0x59c>
 800ac72:	4929      	ldr	r1, [pc, #164]	@ (800ad18 <_dtoa_r+0x598>)
 800ac74:	2000      	movs	r0, #0
 800ac76:	f7f5 fdf1 	bl	800085c <__aeabi_ddiv>
 800ac7a:	4633      	mov	r3, r6
 800ac7c:	462a      	mov	r2, r5
 800ac7e:	f7f5 fb0b 	bl	8000298 <__aeabi_dsub>
 800ac82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac86:	4656      	mov	r6, sl
 800ac88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac8c:	f7f5 ff6c 	bl	8000b68 <__aeabi_d2iz>
 800ac90:	4605      	mov	r5, r0
 800ac92:	f7f5 fc4f 	bl	8000534 <__aeabi_i2d>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac9e:	f7f5 fafb 	bl	8000298 <__aeabi_dsub>
 800aca2:	3530      	adds	r5, #48	@ 0x30
 800aca4:	4602      	mov	r2, r0
 800aca6:	460b      	mov	r3, r1
 800aca8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acac:	f806 5b01 	strb.w	r5, [r6], #1
 800acb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800acb4:	f7f5 ff1a 	bl	8000aec <__aeabi_dcmplt>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d172      	bne.n	800ada2 <_dtoa_r+0x622>
 800acbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acc0:	4911      	ldr	r1, [pc, #68]	@ (800ad08 <_dtoa_r+0x588>)
 800acc2:	2000      	movs	r0, #0
 800acc4:	f7f5 fae8 	bl	8000298 <__aeabi_dsub>
 800acc8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800accc:	f7f5 ff0e 	bl	8000aec <__aeabi_dcmplt>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	f040 80b4 	bne.w	800ae3e <_dtoa_r+0x6be>
 800acd6:	42a6      	cmp	r6, r4
 800acd8:	f43f af70 	beq.w	800abbc <_dtoa_r+0x43c>
 800acdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ace0:	4b0a      	ldr	r3, [pc, #40]	@ (800ad0c <_dtoa_r+0x58c>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	f7f5 fc90 	bl	8000608 <__aeabi_dmul>
 800ace8:	4b08      	ldr	r3, [pc, #32]	@ (800ad0c <_dtoa_r+0x58c>)
 800acea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800acee:	2200      	movs	r2, #0
 800acf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acf4:	f7f5 fc88 	bl	8000608 <__aeabi_dmul>
 800acf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acfc:	e7c4      	b.n	800ac88 <_dtoa_r+0x508>
 800acfe:	bf00      	nop
 800ad00:	0800ca70 	.word	0x0800ca70
 800ad04:	0800ca48 	.word	0x0800ca48
 800ad08:	3ff00000 	.word	0x3ff00000
 800ad0c:	40240000 	.word	0x40240000
 800ad10:	401c0000 	.word	0x401c0000
 800ad14:	40140000 	.word	0x40140000
 800ad18:	3fe00000 	.word	0x3fe00000
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f7f5 fc72 	bl	8000608 <__aeabi_dmul>
 800ad24:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad28:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ad2a:	4656      	mov	r6, sl
 800ad2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad30:	f7f5 ff1a 	bl	8000b68 <__aeabi_d2iz>
 800ad34:	4605      	mov	r5, r0
 800ad36:	f7f5 fbfd 	bl	8000534 <__aeabi_i2d>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad42:	f7f5 faa9 	bl	8000298 <__aeabi_dsub>
 800ad46:	3530      	adds	r5, #48	@ 0x30
 800ad48:	f806 5b01 	strb.w	r5, [r6], #1
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	42a6      	cmp	r6, r4
 800ad52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad56:	f04f 0200 	mov.w	r2, #0
 800ad5a:	d124      	bne.n	800ada6 <_dtoa_r+0x626>
 800ad5c:	4baf      	ldr	r3, [pc, #700]	@ (800b01c <_dtoa_r+0x89c>)
 800ad5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad62:	f7f5 fa9b 	bl	800029c <__adddf3>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad6e:	f7f5 fedb 	bl	8000b28 <__aeabi_dcmpgt>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	d163      	bne.n	800ae3e <_dtoa_r+0x6be>
 800ad76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad7a:	49a8      	ldr	r1, [pc, #672]	@ (800b01c <_dtoa_r+0x89c>)
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	f7f5 fa8b 	bl	8000298 <__aeabi_dsub>
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad8a:	f7f5 feaf 	bl	8000aec <__aeabi_dcmplt>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f43f af14 	beq.w	800abbc <_dtoa_r+0x43c>
 800ad94:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ad96:	1e73      	subs	r3, r6, #1
 800ad98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad9e:	2b30      	cmp	r3, #48	@ 0x30
 800ada0:	d0f8      	beq.n	800ad94 <_dtoa_r+0x614>
 800ada2:	4647      	mov	r7, r8
 800ada4:	e03b      	b.n	800ae1e <_dtoa_r+0x69e>
 800ada6:	4b9e      	ldr	r3, [pc, #632]	@ (800b020 <_dtoa_r+0x8a0>)
 800ada8:	f7f5 fc2e 	bl	8000608 <__aeabi_dmul>
 800adac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adb0:	e7bc      	b.n	800ad2c <_dtoa_r+0x5ac>
 800adb2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800adb6:	4656      	mov	r6, sl
 800adb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adbc:	4620      	mov	r0, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	f7f5 fd4c 	bl	800085c <__aeabi_ddiv>
 800adc4:	f7f5 fed0 	bl	8000b68 <__aeabi_d2iz>
 800adc8:	4680      	mov	r8, r0
 800adca:	f7f5 fbb3 	bl	8000534 <__aeabi_i2d>
 800adce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800add2:	f7f5 fc19 	bl	8000608 <__aeabi_dmul>
 800add6:	4602      	mov	r2, r0
 800add8:	460b      	mov	r3, r1
 800adda:	4620      	mov	r0, r4
 800addc:	4629      	mov	r1, r5
 800adde:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ade2:	f7f5 fa59 	bl	8000298 <__aeabi_dsub>
 800ade6:	f806 4b01 	strb.w	r4, [r6], #1
 800adea:	9d03      	ldr	r5, [sp, #12]
 800adec:	eba6 040a 	sub.w	r4, r6, sl
 800adf0:	42a5      	cmp	r5, r4
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	d133      	bne.n	800ae60 <_dtoa_r+0x6e0>
 800adf8:	f7f5 fa50 	bl	800029c <__adddf3>
 800adfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae00:	4604      	mov	r4, r0
 800ae02:	460d      	mov	r5, r1
 800ae04:	f7f5 fe90 	bl	8000b28 <__aeabi_dcmpgt>
 800ae08:	b9c0      	cbnz	r0, 800ae3c <_dtoa_r+0x6bc>
 800ae0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae0e:	4620      	mov	r0, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	f7f5 fe61 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae16:	b110      	cbz	r0, 800ae1e <_dtoa_r+0x69e>
 800ae18:	f018 0f01 	tst.w	r8, #1
 800ae1c:	d10e      	bne.n	800ae3c <_dtoa_r+0x6bc>
 800ae1e:	9902      	ldr	r1, [sp, #8]
 800ae20:	4648      	mov	r0, r9
 800ae22:	f000 fbbd 	bl	800b5a0 <_Bfree>
 800ae26:	2300      	movs	r3, #0
 800ae28:	7033      	strb	r3, [r6, #0]
 800ae2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae2c:	3701      	adds	r7, #1
 800ae2e:	601f      	str	r7, [r3, #0]
 800ae30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 824b 	beq.w	800b2ce <_dtoa_r+0xb4e>
 800ae38:	601e      	str	r6, [r3, #0]
 800ae3a:	e248      	b.n	800b2ce <_dtoa_r+0xb4e>
 800ae3c:	46b8      	mov	r8, r7
 800ae3e:	4633      	mov	r3, r6
 800ae40:	461e      	mov	r6, r3
 800ae42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae46:	2a39      	cmp	r2, #57	@ 0x39
 800ae48:	d106      	bne.n	800ae58 <_dtoa_r+0x6d8>
 800ae4a:	459a      	cmp	sl, r3
 800ae4c:	d1f8      	bne.n	800ae40 <_dtoa_r+0x6c0>
 800ae4e:	2230      	movs	r2, #48	@ 0x30
 800ae50:	f108 0801 	add.w	r8, r8, #1
 800ae54:	f88a 2000 	strb.w	r2, [sl]
 800ae58:	781a      	ldrb	r2, [r3, #0]
 800ae5a:	3201      	adds	r2, #1
 800ae5c:	701a      	strb	r2, [r3, #0]
 800ae5e:	e7a0      	b.n	800ada2 <_dtoa_r+0x622>
 800ae60:	4b6f      	ldr	r3, [pc, #444]	@ (800b020 <_dtoa_r+0x8a0>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	f7f5 fbd0 	bl	8000608 <__aeabi_dmul>
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	460d      	mov	r5, r1
 800ae70:	f7f5 fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d09f      	beq.n	800adb8 <_dtoa_r+0x638>
 800ae78:	e7d1      	b.n	800ae1e <_dtoa_r+0x69e>
 800ae7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae7c:	2a00      	cmp	r2, #0
 800ae7e:	f000 80ea 	beq.w	800b056 <_dtoa_r+0x8d6>
 800ae82:	9a07      	ldr	r2, [sp, #28]
 800ae84:	2a01      	cmp	r2, #1
 800ae86:	f300 80cd 	bgt.w	800b024 <_dtoa_r+0x8a4>
 800ae8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ae8c:	2a00      	cmp	r2, #0
 800ae8e:	f000 80c1 	beq.w	800b014 <_dtoa_r+0x894>
 800ae92:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae96:	9c08      	ldr	r4, [sp, #32]
 800ae98:	9e00      	ldr	r6, [sp, #0]
 800ae9a:	9a00      	ldr	r2, [sp, #0]
 800ae9c:	441a      	add	r2, r3
 800ae9e:	9200      	str	r2, [sp, #0]
 800aea0:	9a06      	ldr	r2, [sp, #24]
 800aea2:	2101      	movs	r1, #1
 800aea4:	441a      	add	r2, r3
 800aea6:	4648      	mov	r0, r9
 800aea8:	9206      	str	r2, [sp, #24]
 800aeaa:	f000 fc2d 	bl	800b708 <__i2b>
 800aeae:	4605      	mov	r5, r0
 800aeb0:	b166      	cbz	r6, 800aecc <_dtoa_r+0x74c>
 800aeb2:	9b06      	ldr	r3, [sp, #24]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	dd09      	ble.n	800aecc <_dtoa_r+0x74c>
 800aeb8:	42b3      	cmp	r3, r6
 800aeba:	9a00      	ldr	r2, [sp, #0]
 800aebc:	bfa8      	it	ge
 800aebe:	4633      	movge	r3, r6
 800aec0:	1ad2      	subs	r2, r2, r3
 800aec2:	9200      	str	r2, [sp, #0]
 800aec4:	9a06      	ldr	r2, [sp, #24]
 800aec6:	1af6      	subs	r6, r6, r3
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	9306      	str	r3, [sp, #24]
 800aecc:	9b08      	ldr	r3, [sp, #32]
 800aece:	b30b      	cbz	r3, 800af14 <_dtoa_r+0x794>
 800aed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f000 80c6 	beq.w	800b064 <_dtoa_r+0x8e4>
 800aed8:	2c00      	cmp	r4, #0
 800aeda:	f000 80c0 	beq.w	800b05e <_dtoa_r+0x8de>
 800aede:	4629      	mov	r1, r5
 800aee0:	4622      	mov	r2, r4
 800aee2:	4648      	mov	r0, r9
 800aee4:	f000 fcc8 	bl	800b878 <__pow5mult>
 800aee8:	9a02      	ldr	r2, [sp, #8]
 800aeea:	4601      	mov	r1, r0
 800aeec:	4605      	mov	r5, r0
 800aeee:	4648      	mov	r0, r9
 800aef0:	f000 fc20 	bl	800b734 <__multiply>
 800aef4:	9902      	ldr	r1, [sp, #8]
 800aef6:	4680      	mov	r8, r0
 800aef8:	4648      	mov	r0, r9
 800aefa:	f000 fb51 	bl	800b5a0 <_Bfree>
 800aefe:	9b08      	ldr	r3, [sp, #32]
 800af00:	1b1b      	subs	r3, r3, r4
 800af02:	9308      	str	r3, [sp, #32]
 800af04:	f000 80b1 	beq.w	800b06a <_dtoa_r+0x8ea>
 800af08:	9a08      	ldr	r2, [sp, #32]
 800af0a:	4641      	mov	r1, r8
 800af0c:	4648      	mov	r0, r9
 800af0e:	f000 fcb3 	bl	800b878 <__pow5mult>
 800af12:	9002      	str	r0, [sp, #8]
 800af14:	2101      	movs	r1, #1
 800af16:	4648      	mov	r0, r9
 800af18:	f000 fbf6 	bl	800b708 <__i2b>
 800af1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af1e:	4604      	mov	r4, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 81d8 	beq.w	800b2d6 <_dtoa_r+0xb56>
 800af26:	461a      	mov	r2, r3
 800af28:	4601      	mov	r1, r0
 800af2a:	4648      	mov	r0, r9
 800af2c:	f000 fca4 	bl	800b878 <__pow5mult>
 800af30:	9b07      	ldr	r3, [sp, #28]
 800af32:	2b01      	cmp	r3, #1
 800af34:	4604      	mov	r4, r0
 800af36:	f300 809f 	bgt.w	800b078 <_dtoa_r+0x8f8>
 800af3a:	9b04      	ldr	r3, [sp, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f040 8097 	bne.w	800b070 <_dtoa_r+0x8f0>
 800af42:	9b05      	ldr	r3, [sp, #20]
 800af44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f040 8093 	bne.w	800b074 <_dtoa_r+0x8f4>
 800af4e:	9b05      	ldr	r3, [sp, #20]
 800af50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af54:	0d1b      	lsrs	r3, r3, #20
 800af56:	051b      	lsls	r3, r3, #20
 800af58:	b133      	cbz	r3, 800af68 <_dtoa_r+0x7e8>
 800af5a:	9b00      	ldr	r3, [sp, #0]
 800af5c:	3301      	adds	r3, #1
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	9b06      	ldr	r3, [sp, #24]
 800af62:	3301      	adds	r3, #1
 800af64:	9306      	str	r3, [sp, #24]
 800af66:	2301      	movs	r3, #1
 800af68:	9308      	str	r3, [sp, #32]
 800af6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 81b8 	beq.w	800b2e2 <_dtoa_r+0xb62>
 800af72:	6923      	ldr	r3, [r4, #16]
 800af74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af78:	6918      	ldr	r0, [r3, #16]
 800af7a:	f000 fb79 	bl	800b670 <__hi0bits>
 800af7e:	f1c0 0020 	rsb	r0, r0, #32
 800af82:	9b06      	ldr	r3, [sp, #24]
 800af84:	4418      	add	r0, r3
 800af86:	f010 001f 	ands.w	r0, r0, #31
 800af8a:	f000 8082 	beq.w	800b092 <_dtoa_r+0x912>
 800af8e:	f1c0 0320 	rsb	r3, r0, #32
 800af92:	2b04      	cmp	r3, #4
 800af94:	dd73      	ble.n	800b07e <_dtoa_r+0x8fe>
 800af96:	9b00      	ldr	r3, [sp, #0]
 800af98:	f1c0 001c 	rsb	r0, r0, #28
 800af9c:	4403      	add	r3, r0
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	9b06      	ldr	r3, [sp, #24]
 800afa2:	4403      	add	r3, r0
 800afa4:	4406      	add	r6, r0
 800afa6:	9306      	str	r3, [sp, #24]
 800afa8:	9b00      	ldr	r3, [sp, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	dd05      	ble.n	800afba <_dtoa_r+0x83a>
 800afae:	9902      	ldr	r1, [sp, #8]
 800afb0:	461a      	mov	r2, r3
 800afb2:	4648      	mov	r0, r9
 800afb4:	f000 fcba 	bl	800b92c <__lshift>
 800afb8:	9002      	str	r0, [sp, #8]
 800afba:	9b06      	ldr	r3, [sp, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dd05      	ble.n	800afcc <_dtoa_r+0x84c>
 800afc0:	4621      	mov	r1, r4
 800afc2:	461a      	mov	r2, r3
 800afc4:	4648      	mov	r0, r9
 800afc6:	f000 fcb1 	bl	800b92c <__lshift>
 800afca:	4604      	mov	r4, r0
 800afcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d061      	beq.n	800b096 <_dtoa_r+0x916>
 800afd2:	9802      	ldr	r0, [sp, #8]
 800afd4:	4621      	mov	r1, r4
 800afd6:	f000 fd15 	bl	800ba04 <__mcmp>
 800afda:	2800      	cmp	r0, #0
 800afdc:	da5b      	bge.n	800b096 <_dtoa_r+0x916>
 800afde:	2300      	movs	r3, #0
 800afe0:	9902      	ldr	r1, [sp, #8]
 800afe2:	220a      	movs	r2, #10
 800afe4:	4648      	mov	r0, r9
 800afe6:	f000 fafd 	bl	800b5e4 <__multadd>
 800afea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afec:	9002      	str	r0, [sp, #8]
 800afee:	f107 38ff 	add.w	r8, r7, #4294967295
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 8177 	beq.w	800b2e6 <_dtoa_r+0xb66>
 800aff8:	4629      	mov	r1, r5
 800affa:	2300      	movs	r3, #0
 800affc:	220a      	movs	r2, #10
 800affe:	4648      	mov	r0, r9
 800b000:	f000 faf0 	bl	800b5e4 <__multadd>
 800b004:	f1bb 0f00 	cmp.w	fp, #0
 800b008:	4605      	mov	r5, r0
 800b00a:	dc6f      	bgt.n	800b0ec <_dtoa_r+0x96c>
 800b00c:	9b07      	ldr	r3, [sp, #28]
 800b00e:	2b02      	cmp	r3, #2
 800b010:	dc49      	bgt.n	800b0a6 <_dtoa_r+0x926>
 800b012:	e06b      	b.n	800b0ec <_dtoa_r+0x96c>
 800b014:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b016:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b01a:	e73c      	b.n	800ae96 <_dtoa_r+0x716>
 800b01c:	3fe00000 	.word	0x3fe00000
 800b020:	40240000 	.word	0x40240000
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	1e5c      	subs	r4, r3, #1
 800b028:	9b08      	ldr	r3, [sp, #32]
 800b02a:	42a3      	cmp	r3, r4
 800b02c:	db09      	blt.n	800b042 <_dtoa_r+0x8c2>
 800b02e:	1b1c      	subs	r4, r3, r4
 800b030:	9b03      	ldr	r3, [sp, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	f6bf af30 	bge.w	800ae98 <_dtoa_r+0x718>
 800b038:	9b00      	ldr	r3, [sp, #0]
 800b03a:	9a03      	ldr	r2, [sp, #12]
 800b03c:	1a9e      	subs	r6, r3, r2
 800b03e:	2300      	movs	r3, #0
 800b040:	e72b      	b.n	800ae9a <_dtoa_r+0x71a>
 800b042:	9b08      	ldr	r3, [sp, #32]
 800b044:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b046:	9408      	str	r4, [sp, #32]
 800b048:	1ae3      	subs	r3, r4, r3
 800b04a:	441a      	add	r2, r3
 800b04c:	9e00      	ldr	r6, [sp, #0]
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	920d      	str	r2, [sp, #52]	@ 0x34
 800b052:	2400      	movs	r4, #0
 800b054:	e721      	b.n	800ae9a <_dtoa_r+0x71a>
 800b056:	9c08      	ldr	r4, [sp, #32]
 800b058:	9e00      	ldr	r6, [sp, #0]
 800b05a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b05c:	e728      	b.n	800aeb0 <_dtoa_r+0x730>
 800b05e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b062:	e751      	b.n	800af08 <_dtoa_r+0x788>
 800b064:	9a08      	ldr	r2, [sp, #32]
 800b066:	9902      	ldr	r1, [sp, #8]
 800b068:	e750      	b.n	800af0c <_dtoa_r+0x78c>
 800b06a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b06e:	e751      	b.n	800af14 <_dtoa_r+0x794>
 800b070:	2300      	movs	r3, #0
 800b072:	e779      	b.n	800af68 <_dtoa_r+0x7e8>
 800b074:	9b04      	ldr	r3, [sp, #16]
 800b076:	e777      	b.n	800af68 <_dtoa_r+0x7e8>
 800b078:	2300      	movs	r3, #0
 800b07a:	9308      	str	r3, [sp, #32]
 800b07c:	e779      	b.n	800af72 <_dtoa_r+0x7f2>
 800b07e:	d093      	beq.n	800afa8 <_dtoa_r+0x828>
 800b080:	9a00      	ldr	r2, [sp, #0]
 800b082:	331c      	adds	r3, #28
 800b084:	441a      	add	r2, r3
 800b086:	9200      	str	r2, [sp, #0]
 800b088:	9a06      	ldr	r2, [sp, #24]
 800b08a:	441a      	add	r2, r3
 800b08c:	441e      	add	r6, r3
 800b08e:	9206      	str	r2, [sp, #24]
 800b090:	e78a      	b.n	800afa8 <_dtoa_r+0x828>
 800b092:	4603      	mov	r3, r0
 800b094:	e7f4      	b.n	800b080 <_dtoa_r+0x900>
 800b096:	9b03      	ldr	r3, [sp, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	46b8      	mov	r8, r7
 800b09c:	dc20      	bgt.n	800b0e0 <_dtoa_r+0x960>
 800b09e:	469b      	mov	fp, r3
 800b0a0:	9b07      	ldr	r3, [sp, #28]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	dd1e      	ble.n	800b0e4 <_dtoa_r+0x964>
 800b0a6:	f1bb 0f00 	cmp.w	fp, #0
 800b0aa:	f47f adb1 	bne.w	800ac10 <_dtoa_r+0x490>
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	465b      	mov	r3, fp
 800b0b2:	2205      	movs	r2, #5
 800b0b4:	4648      	mov	r0, r9
 800b0b6:	f000 fa95 	bl	800b5e4 <__multadd>
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	4604      	mov	r4, r0
 800b0be:	9802      	ldr	r0, [sp, #8]
 800b0c0:	f000 fca0 	bl	800ba04 <__mcmp>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	f77f ada3 	ble.w	800ac10 <_dtoa_r+0x490>
 800b0ca:	4656      	mov	r6, sl
 800b0cc:	2331      	movs	r3, #49	@ 0x31
 800b0ce:	f806 3b01 	strb.w	r3, [r6], #1
 800b0d2:	f108 0801 	add.w	r8, r8, #1
 800b0d6:	e59f      	b.n	800ac18 <_dtoa_r+0x498>
 800b0d8:	9c03      	ldr	r4, [sp, #12]
 800b0da:	46b8      	mov	r8, r7
 800b0dc:	4625      	mov	r5, r4
 800b0de:	e7f4      	b.n	800b0ca <_dtoa_r+0x94a>
 800b0e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 8101 	beq.w	800b2ee <_dtoa_r+0xb6e>
 800b0ec:	2e00      	cmp	r6, #0
 800b0ee:	dd05      	ble.n	800b0fc <_dtoa_r+0x97c>
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	4632      	mov	r2, r6
 800b0f4:	4648      	mov	r0, r9
 800b0f6:	f000 fc19 	bl	800b92c <__lshift>
 800b0fa:	4605      	mov	r5, r0
 800b0fc:	9b08      	ldr	r3, [sp, #32]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d05c      	beq.n	800b1bc <_dtoa_r+0xa3c>
 800b102:	6869      	ldr	r1, [r5, #4]
 800b104:	4648      	mov	r0, r9
 800b106:	f000 fa0b 	bl	800b520 <_Balloc>
 800b10a:	4606      	mov	r6, r0
 800b10c:	b928      	cbnz	r0, 800b11a <_dtoa_r+0x99a>
 800b10e:	4b82      	ldr	r3, [pc, #520]	@ (800b318 <_dtoa_r+0xb98>)
 800b110:	4602      	mov	r2, r0
 800b112:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b116:	f7ff bb4a 	b.w	800a7ae <_dtoa_r+0x2e>
 800b11a:	692a      	ldr	r2, [r5, #16]
 800b11c:	3202      	adds	r2, #2
 800b11e:	0092      	lsls	r2, r2, #2
 800b120:	f105 010c 	add.w	r1, r5, #12
 800b124:	300c      	adds	r0, #12
 800b126:	f7ff fa94 	bl	800a652 <memcpy>
 800b12a:	2201      	movs	r2, #1
 800b12c:	4631      	mov	r1, r6
 800b12e:	4648      	mov	r0, r9
 800b130:	f000 fbfc 	bl	800b92c <__lshift>
 800b134:	f10a 0301 	add.w	r3, sl, #1
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	eb0a 030b 	add.w	r3, sl, fp
 800b13e:	9308      	str	r3, [sp, #32]
 800b140:	9b04      	ldr	r3, [sp, #16]
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	462f      	mov	r7, r5
 800b148:	9306      	str	r3, [sp, #24]
 800b14a:	4605      	mov	r5, r0
 800b14c:	9b00      	ldr	r3, [sp, #0]
 800b14e:	9802      	ldr	r0, [sp, #8]
 800b150:	4621      	mov	r1, r4
 800b152:	f103 3bff 	add.w	fp, r3, #4294967295
 800b156:	f7ff fa8a 	bl	800a66e <quorem>
 800b15a:	4603      	mov	r3, r0
 800b15c:	3330      	adds	r3, #48	@ 0x30
 800b15e:	9003      	str	r0, [sp, #12]
 800b160:	4639      	mov	r1, r7
 800b162:	9802      	ldr	r0, [sp, #8]
 800b164:	9309      	str	r3, [sp, #36]	@ 0x24
 800b166:	f000 fc4d 	bl	800ba04 <__mcmp>
 800b16a:	462a      	mov	r2, r5
 800b16c:	9004      	str	r0, [sp, #16]
 800b16e:	4621      	mov	r1, r4
 800b170:	4648      	mov	r0, r9
 800b172:	f000 fc63 	bl	800ba3c <__mdiff>
 800b176:	68c2      	ldr	r2, [r0, #12]
 800b178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b17a:	4606      	mov	r6, r0
 800b17c:	bb02      	cbnz	r2, 800b1c0 <_dtoa_r+0xa40>
 800b17e:	4601      	mov	r1, r0
 800b180:	9802      	ldr	r0, [sp, #8]
 800b182:	f000 fc3f 	bl	800ba04 <__mcmp>
 800b186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b188:	4602      	mov	r2, r0
 800b18a:	4631      	mov	r1, r6
 800b18c:	4648      	mov	r0, r9
 800b18e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b190:	9309      	str	r3, [sp, #36]	@ 0x24
 800b192:	f000 fa05 	bl	800b5a0 <_Bfree>
 800b196:	9b07      	ldr	r3, [sp, #28]
 800b198:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b19a:	9e00      	ldr	r6, [sp, #0]
 800b19c:	ea42 0103 	orr.w	r1, r2, r3
 800b1a0:	9b06      	ldr	r3, [sp, #24]
 800b1a2:	4319      	orrs	r1, r3
 800b1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a6:	d10d      	bne.n	800b1c4 <_dtoa_r+0xa44>
 800b1a8:	2b39      	cmp	r3, #57	@ 0x39
 800b1aa:	d027      	beq.n	800b1fc <_dtoa_r+0xa7c>
 800b1ac:	9a04      	ldr	r2, [sp, #16]
 800b1ae:	2a00      	cmp	r2, #0
 800b1b0:	dd01      	ble.n	800b1b6 <_dtoa_r+0xa36>
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	3331      	adds	r3, #49	@ 0x31
 800b1b6:	f88b 3000 	strb.w	r3, [fp]
 800b1ba:	e52e      	b.n	800ac1a <_dtoa_r+0x49a>
 800b1bc:	4628      	mov	r0, r5
 800b1be:	e7b9      	b.n	800b134 <_dtoa_r+0x9b4>
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	e7e2      	b.n	800b18a <_dtoa_r+0xa0a>
 800b1c4:	9904      	ldr	r1, [sp, #16]
 800b1c6:	2900      	cmp	r1, #0
 800b1c8:	db04      	blt.n	800b1d4 <_dtoa_r+0xa54>
 800b1ca:	9807      	ldr	r0, [sp, #28]
 800b1cc:	4301      	orrs	r1, r0
 800b1ce:	9806      	ldr	r0, [sp, #24]
 800b1d0:	4301      	orrs	r1, r0
 800b1d2:	d120      	bne.n	800b216 <_dtoa_r+0xa96>
 800b1d4:	2a00      	cmp	r2, #0
 800b1d6:	ddee      	ble.n	800b1b6 <_dtoa_r+0xa36>
 800b1d8:	9902      	ldr	r1, [sp, #8]
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	4648      	mov	r0, r9
 800b1e0:	f000 fba4 	bl	800b92c <__lshift>
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	9002      	str	r0, [sp, #8]
 800b1e8:	f000 fc0c 	bl	800ba04 <__mcmp>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	9b00      	ldr	r3, [sp, #0]
 800b1f0:	dc02      	bgt.n	800b1f8 <_dtoa_r+0xa78>
 800b1f2:	d1e0      	bne.n	800b1b6 <_dtoa_r+0xa36>
 800b1f4:	07da      	lsls	r2, r3, #31
 800b1f6:	d5de      	bpl.n	800b1b6 <_dtoa_r+0xa36>
 800b1f8:	2b39      	cmp	r3, #57	@ 0x39
 800b1fa:	d1da      	bne.n	800b1b2 <_dtoa_r+0xa32>
 800b1fc:	2339      	movs	r3, #57	@ 0x39
 800b1fe:	f88b 3000 	strb.w	r3, [fp]
 800b202:	4633      	mov	r3, r6
 800b204:	461e      	mov	r6, r3
 800b206:	3b01      	subs	r3, #1
 800b208:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b20c:	2a39      	cmp	r2, #57	@ 0x39
 800b20e:	d04e      	beq.n	800b2ae <_dtoa_r+0xb2e>
 800b210:	3201      	adds	r2, #1
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	e501      	b.n	800ac1a <_dtoa_r+0x49a>
 800b216:	2a00      	cmp	r2, #0
 800b218:	dd03      	ble.n	800b222 <_dtoa_r+0xaa2>
 800b21a:	2b39      	cmp	r3, #57	@ 0x39
 800b21c:	d0ee      	beq.n	800b1fc <_dtoa_r+0xa7c>
 800b21e:	3301      	adds	r3, #1
 800b220:	e7c9      	b.n	800b1b6 <_dtoa_r+0xa36>
 800b222:	9a00      	ldr	r2, [sp, #0]
 800b224:	9908      	ldr	r1, [sp, #32]
 800b226:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b22a:	428a      	cmp	r2, r1
 800b22c:	d028      	beq.n	800b280 <_dtoa_r+0xb00>
 800b22e:	9902      	ldr	r1, [sp, #8]
 800b230:	2300      	movs	r3, #0
 800b232:	220a      	movs	r2, #10
 800b234:	4648      	mov	r0, r9
 800b236:	f000 f9d5 	bl	800b5e4 <__multadd>
 800b23a:	42af      	cmp	r7, r5
 800b23c:	9002      	str	r0, [sp, #8]
 800b23e:	f04f 0300 	mov.w	r3, #0
 800b242:	f04f 020a 	mov.w	r2, #10
 800b246:	4639      	mov	r1, r7
 800b248:	4648      	mov	r0, r9
 800b24a:	d107      	bne.n	800b25c <_dtoa_r+0xadc>
 800b24c:	f000 f9ca 	bl	800b5e4 <__multadd>
 800b250:	4607      	mov	r7, r0
 800b252:	4605      	mov	r5, r0
 800b254:	9b00      	ldr	r3, [sp, #0]
 800b256:	3301      	adds	r3, #1
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	e777      	b.n	800b14c <_dtoa_r+0x9cc>
 800b25c:	f000 f9c2 	bl	800b5e4 <__multadd>
 800b260:	4629      	mov	r1, r5
 800b262:	4607      	mov	r7, r0
 800b264:	2300      	movs	r3, #0
 800b266:	220a      	movs	r2, #10
 800b268:	4648      	mov	r0, r9
 800b26a:	f000 f9bb 	bl	800b5e4 <__multadd>
 800b26e:	4605      	mov	r5, r0
 800b270:	e7f0      	b.n	800b254 <_dtoa_r+0xad4>
 800b272:	f1bb 0f00 	cmp.w	fp, #0
 800b276:	bfcc      	ite	gt
 800b278:	465e      	movgt	r6, fp
 800b27a:	2601      	movle	r6, #1
 800b27c:	4456      	add	r6, sl
 800b27e:	2700      	movs	r7, #0
 800b280:	9902      	ldr	r1, [sp, #8]
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	2201      	movs	r2, #1
 800b286:	4648      	mov	r0, r9
 800b288:	f000 fb50 	bl	800b92c <__lshift>
 800b28c:	4621      	mov	r1, r4
 800b28e:	9002      	str	r0, [sp, #8]
 800b290:	f000 fbb8 	bl	800ba04 <__mcmp>
 800b294:	2800      	cmp	r0, #0
 800b296:	dcb4      	bgt.n	800b202 <_dtoa_r+0xa82>
 800b298:	d102      	bne.n	800b2a0 <_dtoa_r+0xb20>
 800b29a:	9b00      	ldr	r3, [sp, #0]
 800b29c:	07db      	lsls	r3, r3, #31
 800b29e:	d4b0      	bmi.n	800b202 <_dtoa_r+0xa82>
 800b2a0:	4633      	mov	r3, r6
 800b2a2:	461e      	mov	r6, r3
 800b2a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2a8:	2a30      	cmp	r2, #48	@ 0x30
 800b2aa:	d0fa      	beq.n	800b2a2 <_dtoa_r+0xb22>
 800b2ac:	e4b5      	b.n	800ac1a <_dtoa_r+0x49a>
 800b2ae:	459a      	cmp	sl, r3
 800b2b0:	d1a8      	bne.n	800b204 <_dtoa_r+0xa84>
 800b2b2:	2331      	movs	r3, #49	@ 0x31
 800b2b4:	f108 0801 	add.w	r8, r8, #1
 800b2b8:	f88a 3000 	strb.w	r3, [sl]
 800b2bc:	e4ad      	b.n	800ac1a <_dtoa_r+0x49a>
 800b2be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b31c <_dtoa_r+0xb9c>
 800b2c4:	b11b      	cbz	r3, 800b2ce <_dtoa_r+0xb4e>
 800b2c6:	f10a 0308 	add.w	r3, sl, #8
 800b2ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b2cc:	6013      	str	r3, [r2, #0]
 800b2ce:	4650      	mov	r0, sl
 800b2d0:	b017      	add	sp, #92	@ 0x5c
 800b2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d6:	9b07      	ldr	r3, [sp, #28]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	f77f ae2e 	ble.w	800af3a <_dtoa_r+0x7ba>
 800b2de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2e0:	9308      	str	r3, [sp, #32]
 800b2e2:	2001      	movs	r0, #1
 800b2e4:	e64d      	b.n	800af82 <_dtoa_r+0x802>
 800b2e6:	f1bb 0f00 	cmp.w	fp, #0
 800b2ea:	f77f aed9 	ble.w	800b0a0 <_dtoa_r+0x920>
 800b2ee:	4656      	mov	r6, sl
 800b2f0:	9802      	ldr	r0, [sp, #8]
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	f7ff f9bb 	bl	800a66e <quorem>
 800b2f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b2fc:	f806 3b01 	strb.w	r3, [r6], #1
 800b300:	eba6 020a 	sub.w	r2, r6, sl
 800b304:	4593      	cmp	fp, r2
 800b306:	ddb4      	ble.n	800b272 <_dtoa_r+0xaf2>
 800b308:	9902      	ldr	r1, [sp, #8]
 800b30a:	2300      	movs	r3, #0
 800b30c:	220a      	movs	r2, #10
 800b30e:	4648      	mov	r0, r9
 800b310:	f000 f968 	bl	800b5e4 <__multadd>
 800b314:	9002      	str	r0, [sp, #8]
 800b316:	e7eb      	b.n	800b2f0 <_dtoa_r+0xb70>
 800b318:	0800c974 	.word	0x0800c974
 800b31c:	0800c8f8 	.word	0x0800c8f8

0800b320 <_free_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4605      	mov	r5, r0
 800b324:	2900      	cmp	r1, #0
 800b326:	d041      	beq.n	800b3ac <_free_r+0x8c>
 800b328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b32c:	1f0c      	subs	r4, r1, #4
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bfb8      	it	lt
 800b332:	18e4      	addlt	r4, r4, r3
 800b334:	f000 f8e8 	bl	800b508 <__malloc_lock>
 800b338:	4a1d      	ldr	r2, [pc, #116]	@ (800b3b0 <_free_r+0x90>)
 800b33a:	6813      	ldr	r3, [r2, #0]
 800b33c:	b933      	cbnz	r3, 800b34c <_free_r+0x2c>
 800b33e:	6063      	str	r3, [r4, #4]
 800b340:	6014      	str	r4, [r2, #0]
 800b342:	4628      	mov	r0, r5
 800b344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b348:	f000 b8e4 	b.w	800b514 <__malloc_unlock>
 800b34c:	42a3      	cmp	r3, r4
 800b34e:	d908      	bls.n	800b362 <_free_r+0x42>
 800b350:	6820      	ldr	r0, [r4, #0]
 800b352:	1821      	adds	r1, r4, r0
 800b354:	428b      	cmp	r3, r1
 800b356:	bf01      	itttt	eq
 800b358:	6819      	ldreq	r1, [r3, #0]
 800b35a:	685b      	ldreq	r3, [r3, #4]
 800b35c:	1809      	addeq	r1, r1, r0
 800b35e:	6021      	streq	r1, [r4, #0]
 800b360:	e7ed      	b.n	800b33e <_free_r+0x1e>
 800b362:	461a      	mov	r2, r3
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	b10b      	cbz	r3, 800b36c <_free_r+0x4c>
 800b368:	42a3      	cmp	r3, r4
 800b36a:	d9fa      	bls.n	800b362 <_free_r+0x42>
 800b36c:	6811      	ldr	r1, [r2, #0]
 800b36e:	1850      	adds	r0, r2, r1
 800b370:	42a0      	cmp	r0, r4
 800b372:	d10b      	bne.n	800b38c <_free_r+0x6c>
 800b374:	6820      	ldr	r0, [r4, #0]
 800b376:	4401      	add	r1, r0
 800b378:	1850      	adds	r0, r2, r1
 800b37a:	4283      	cmp	r3, r0
 800b37c:	6011      	str	r1, [r2, #0]
 800b37e:	d1e0      	bne.n	800b342 <_free_r+0x22>
 800b380:	6818      	ldr	r0, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	6053      	str	r3, [r2, #4]
 800b386:	4408      	add	r0, r1
 800b388:	6010      	str	r0, [r2, #0]
 800b38a:	e7da      	b.n	800b342 <_free_r+0x22>
 800b38c:	d902      	bls.n	800b394 <_free_r+0x74>
 800b38e:	230c      	movs	r3, #12
 800b390:	602b      	str	r3, [r5, #0]
 800b392:	e7d6      	b.n	800b342 <_free_r+0x22>
 800b394:	6820      	ldr	r0, [r4, #0]
 800b396:	1821      	adds	r1, r4, r0
 800b398:	428b      	cmp	r3, r1
 800b39a:	bf04      	itt	eq
 800b39c:	6819      	ldreq	r1, [r3, #0]
 800b39e:	685b      	ldreq	r3, [r3, #4]
 800b3a0:	6063      	str	r3, [r4, #4]
 800b3a2:	bf04      	itt	eq
 800b3a4:	1809      	addeq	r1, r1, r0
 800b3a6:	6021      	streq	r1, [r4, #0]
 800b3a8:	6054      	str	r4, [r2, #4]
 800b3aa:	e7ca      	b.n	800b342 <_free_r+0x22>
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	200050d8 	.word	0x200050d8

0800b3b4 <malloc>:
 800b3b4:	4b02      	ldr	r3, [pc, #8]	@ (800b3c0 <malloc+0xc>)
 800b3b6:	4601      	mov	r1, r0
 800b3b8:	6818      	ldr	r0, [r3, #0]
 800b3ba:	f000 b825 	b.w	800b408 <_malloc_r>
 800b3be:	bf00      	nop
 800b3c0:	2000001c 	.word	0x2000001c

0800b3c4 <sbrk_aligned>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	4e0f      	ldr	r6, [pc, #60]	@ (800b404 <sbrk_aligned+0x40>)
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	6831      	ldr	r1, [r6, #0]
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	b911      	cbnz	r1, 800b3d6 <sbrk_aligned+0x12>
 800b3d0:	f000 fe3e 	bl	800c050 <_sbrk_r>
 800b3d4:	6030      	str	r0, [r6, #0]
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4628      	mov	r0, r5
 800b3da:	f000 fe39 	bl	800c050 <_sbrk_r>
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	d103      	bne.n	800b3ea <sbrk_aligned+0x26>
 800b3e2:	f04f 34ff 	mov.w	r4, #4294967295
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ea:	1cc4      	adds	r4, r0, #3
 800b3ec:	f024 0403 	bic.w	r4, r4, #3
 800b3f0:	42a0      	cmp	r0, r4
 800b3f2:	d0f8      	beq.n	800b3e6 <sbrk_aligned+0x22>
 800b3f4:	1a21      	subs	r1, r4, r0
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f000 fe2a 	bl	800c050 <_sbrk_r>
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	d1f2      	bne.n	800b3e6 <sbrk_aligned+0x22>
 800b400:	e7ef      	b.n	800b3e2 <sbrk_aligned+0x1e>
 800b402:	bf00      	nop
 800b404:	200050d4 	.word	0x200050d4

0800b408 <_malloc_r>:
 800b408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b40c:	1ccd      	adds	r5, r1, #3
 800b40e:	f025 0503 	bic.w	r5, r5, #3
 800b412:	3508      	adds	r5, #8
 800b414:	2d0c      	cmp	r5, #12
 800b416:	bf38      	it	cc
 800b418:	250c      	movcc	r5, #12
 800b41a:	2d00      	cmp	r5, #0
 800b41c:	4606      	mov	r6, r0
 800b41e:	db01      	blt.n	800b424 <_malloc_r+0x1c>
 800b420:	42a9      	cmp	r1, r5
 800b422:	d904      	bls.n	800b42e <_malloc_r+0x26>
 800b424:	230c      	movs	r3, #12
 800b426:	6033      	str	r3, [r6, #0]
 800b428:	2000      	movs	r0, #0
 800b42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b42e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b504 <_malloc_r+0xfc>
 800b432:	f000 f869 	bl	800b508 <__malloc_lock>
 800b436:	f8d8 3000 	ldr.w	r3, [r8]
 800b43a:	461c      	mov	r4, r3
 800b43c:	bb44      	cbnz	r4, 800b490 <_malloc_r+0x88>
 800b43e:	4629      	mov	r1, r5
 800b440:	4630      	mov	r0, r6
 800b442:	f7ff ffbf 	bl	800b3c4 <sbrk_aligned>
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	4604      	mov	r4, r0
 800b44a:	d158      	bne.n	800b4fe <_malloc_r+0xf6>
 800b44c:	f8d8 4000 	ldr.w	r4, [r8]
 800b450:	4627      	mov	r7, r4
 800b452:	2f00      	cmp	r7, #0
 800b454:	d143      	bne.n	800b4de <_malloc_r+0xd6>
 800b456:	2c00      	cmp	r4, #0
 800b458:	d04b      	beq.n	800b4f2 <_malloc_r+0xea>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	4639      	mov	r1, r7
 800b45e:	4630      	mov	r0, r6
 800b460:	eb04 0903 	add.w	r9, r4, r3
 800b464:	f000 fdf4 	bl	800c050 <_sbrk_r>
 800b468:	4581      	cmp	r9, r0
 800b46a:	d142      	bne.n	800b4f2 <_malloc_r+0xea>
 800b46c:	6821      	ldr	r1, [r4, #0]
 800b46e:	1a6d      	subs	r5, r5, r1
 800b470:	4629      	mov	r1, r5
 800b472:	4630      	mov	r0, r6
 800b474:	f7ff ffa6 	bl	800b3c4 <sbrk_aligned>
 800b478:	3001      	adds	r0, #1
 800b47a:	d03a      	beq.n	800b4f2 <_malloc_r+0xea>
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	442b      	add	r3, r5
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	f8d8 3000 	ldr.w	r3, [r8]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	bb62      	cbnz	r2, 800b4e4 <_malloc_r+0xdc>
 800b48a:	f8c8 7000 	str.w	r7, [r8]
 800b48e:	e00f      	b.n	800b4b0 <_malloc_r+0xa8>
 800b490:	6822      	ldr	r2, [r4, #0]
 800b492:	1b52      	subs	r2, r2, r5
 800b494:	d420      	bmi.n	800b4d8 <_malloc_r+0xd0>
 800b496:	2a0b      	cmp	r2, #11
 800b498:	d917      	bls.n	800b4ca <_malloc_r+0xc2>
 800b49a:	1961      	adds	r1, r4, r5
 800b49c:	42a3      	cmp	r3, r4
 800b49e:	6025      	str	r5, [r4, #0]
 800b4a0:	bf18      	it	ne
 800b4a2:	6059      	strne	r1, [r3, #4]
 800b4a4:	6863      	ldr	r3, [r4, #4]
 800b4a6:	bf08      	it	eq
 800b4a8:	f8c8 1000 	streq.w	r1, [r8]
 800b4ac:	5162      	str	r2, [r4, r5]
 800b4ae:	604b      	str	r3, [r1, #4]
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f000 f82f 	bl	800b514 <__malloc_unlock>
 800b4b6:	f104 000b 	add.w	r0, r4, #11
 800b4ba:	1d23      	adds	r3, r4, #4
 800b4bc:	f020 0007 	bic.w	r0, r0, #7
 800b4c0:	1ac2      	subs	r2, r0, r3
 800b4c2:	bf1c      	itt	ne
 800b4c4:	1a1b      	subne	r3, r3, r0
 800b4c6:	50a3      	strne	r3, [r4, r2]
 800b4c8:	e7af      	b.n	800b42a <_malloc_r+0x22>
 800b4ca:	6862      	ldr	r2, [r4, #4]
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	bf0c      	ite	eq
 800b4d0:	f8c8 2000 	streq.w	r2, [r8]
 800b4d4:	605a      	strne	r2, [r3, #4]
 800b4d6:	e7eb      	b.n	800b4b0 <_malloc_r+0xa8>
 800b4d8:	4623      	mov	r3, r4
 800b4da:	6864      	ldr	r4, [r4, #4]
 800b4dc:	e7ae      	b.n	800b43c <_malloc_r+0x34>
 800b4de:	463c      	mov	r4, r7
 800b4e0:	687f      	ldr	r7, [r7, #4]
 800b4e2:	e7b6      	b.n	800b452 <_malloc_r+0x4a>
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	d1fb      	bne.n	800b4e4 <_malloc_r+0xdc>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	6053      	str	r3, [r2, #4]
 800b4f0:	e7de      	b.n	800b4b0 <_malloc_r+0xa8>
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	6033      	str	r3, [r6, #0]
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	f000 f80c 	bl	800b514 <__malloc_unlock>
 800b4fc:	e794      	b.n	800b428 <_malloc_r+0x20>
 800b4fe:	6005      	str	r5, [r0, #0]
 800b500:	e7d6      	b.n	800b4b0 <_malloc_r+0xa8>
 800b502:	bf00      	nop
 800b504:	200050d8 	.word	0x200050d8

0800b508 <__malloc_lock>:
 800b508:	4801      	ldr	r0, [pc, #4]	@ (800b510 <__malloc_lock+0x8>)
 800b50a:	f7ff b8a0 	b.w	800a64e <__retarget_lock_acquire_recursive>
 800b50e:	bf00      	nop
 800b510:	200050d0 	.word	0x200050d0

0800b514 <__malloc_unlock>:
 800b514:	4801      	ldr	r0, [pc, #4]	@ (800b51c <__malloc_unlock+0x8>)
 800b516:	f7ff b89b 	b.w	800a650 <__retarget_lock_release_recursive>
 800b51a:	bf00      	nop
 800b51c:	200050d0 	.word	0x200050d0

0800b520 <_Balloc>:
 800b520:	b570      	push	{r4, r5, r6, lr}
 800b522:	69c6      	ldr	r6, [r0, #28]
 800b524:	4604      	mov	r4, r0
 800b526:	460d      	mov	r5, r1
 800b528:	b976      	cbnz	r6, 800b548 <_Balloc+0x28>
 800b52a:	2010      	movs	r0, #16
 800b52c:	f7ff ff42 	bl	800b3b4 <malloc>
 800b530:	4602      	mov	r2, r0
 800b532:	61e0      	str	r0, [r4, #28]
 800b534:	b920      	cbnz	r0, 800b540 <_Balloc+0x20>
 800b536:	4b18      	ldr	r3, [pc, #96]	@ (800b598 <_Balloc+0x78>)
 800b538:	4818      	ldr	r0, [pc, #96]	@ (800b59c <_Balloc+0x7c>)
 800b53a:	216b      	movs	r1, #107	@ 0x6b
 800b53c:	f000 fd98 	bl	800c070 <__assert_func>
 800b540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b544:	6006      	str	r6, [r0, #0]
 800b546:	60c6      	str	r6, [r0, #12]
 800b548:	69e6      	ldr	r6, [r4, #28]
 800b54a:	68f3      	ldr	r3, [r6, #12]
 800b54c:	b183      	cbz	r3, 800b570 <_Balloc+0x50>
 800b54e:	69e3      	ldr	r3, [r4, #28]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b556:	b9b8      	cbnz	r0, 800b588 <_Balloc+0x68>
 800b558:	2101      	movs	r1, #1
 800b55a:	fa01 f605 	lsl.w	r6, r1, r5
 800b55e:	1d72      	adds	r2, r6, #5
 800b560:	0092      	lsls	r2, r2, #2
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fda2 	bl	800c0ac <_calloc_r>
 800b568:	b160      	cbz	r0, 800b584 <_Balloc+0x64>
 800b56a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b56e:	e00e      	b.n	800b58e <_Balloc+0x6e>
 800b570:	2221      	movs	r2, #33	@ 0x21
 800b572:	2104      	movs	r1, #4
 800b574:	4620      	mov	r0, r4
 800b576:	f000 fd99 	bl	800c0ac <_calloc_r>
 800b57a:	69e3      	ldr	r3, [r4, #28]
 800b57c:	60f0      	str	r0, [r6, #12]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1e4      	bne.n	800b54e <_Balloc+0x2e>
 800b584:	2000      	movs	r0, #0
 800b586:	bd70      	pop	{r4, r5, r6, pc}
 800b588:	6802      	ldr	r2, [r0, #0]
 800b58a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b58e:	2300      	movs	r3, #0
 800b590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b594:	e7f7      	b.n	800b586 <_Balloc+0x66>
 800b596:	bf00      	nop
 800b598:	0800c905 	.word	0x0800c905
 800b59c:	0800c985 	.word	0x0800c985

0800b5a0 <_Bfree>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	69c6      	ldr	r6, [r0, #28]
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	b976      	cbnz	r6, 800b5c8 <_Bfree+0x28>
 800b5aa:	2010      	movs	r0, #16
 800b5ac:	f7ff ff02 	bl	800b3b4 <malloc>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	61e8      	str	r0, [r5, #28]
 800b5b4:	b920      	cbnz	r0, 800b5c0 <_Bfree+0x20>
 800b5b6:	4b09      	ldr	r3, [pc, #36]	@ (800b5dc <_Bfree+0x3c>)
 800b5b8:	4809      	ldr	r0, [pc, #36]	@ (800b5e0 <_Bfree+0x40>)
 800b5ba:	218f      	movs	r1, #143	@ 0x8f
 800b5bc:	f000 fd58 	bl	800c070 <__assert_func>
 800b5c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5c4:	6006      	str	r6, [r0, #0]
 800b5c6:	60c6      	str	r6, [r0, #12]
 800b5c8:	b13c      	cbz	r4, 800b5da <_Bfree+0x3a>
 800b5ca:	69eb      	ldr	r3, [r5, #28]
 800b5cc:	6862      	ldr	r2, [r4, #4]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5d4:	6021      	str	r1, [r4, #0]
 800b5d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
 800b5dc:	0800c905 	.word	0x0800c905
 800b5e0:	0800c985 	.word	0x0800c985

0800b5e4 <__multadd>:
 800b5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	690d      	ldr	r5, [r1, #16]
 800b5ea:	4607      	mov	r7, r0
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	461e      	mov	r6, r3
 800b5f0:	f101 0c14 	add.w	ip, r1, #20
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	f8dc 3000 	ldr.w	r3, [ip]
 800b5fa:	b299      	uxth	r1, r3
 800b5fc:	fb02 6101 	mla	r1, r2, r1, r6
 800b600:	0c1e      	lsrs	r6, r3, #16
 800b602:	0c0b      	lsrs	r3, r1, #16
 800b604:	fb02 3306 	mla	r3, r2, r6, r3
 800b608:	b289      	uxth	r1, r1
 800b60a:	3001      	adds	r0, #1
 800b60c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b610:	4285      	cmp	r5, r0
 800b612:	f84c 1b04 	str.w	r1, [ip], #4
 800b616:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b61a:	dcec      	bgt.n	800b5f6 <__multadd+0x12>
 800b61c:	b30e      	cbz	r6, 800b662 <__multadd+0x7e>
 800b61e:	68a3      	ldr	r3, [r4, #8]
 800b620:	42ab      	cmp	r3, r5
 800b622:	dc19      	bgt.n	800b658 <__multadd+0x74>
 800b624:	6861      	ldr	r1, [r4, #4]
 800b626:	4638      	mov	r0, r7
 800b628:	3101      	adds	r1, #1
 800b62a:	f7ff ff79 	bl	800b520 <_Balloc>
 800b62e:	4680      	mov	r8, r0
 800b630:	b928      	cbnz	r0, 800b63e <__multadd+0x5a>
 800b632:	4602      	mov	r2, r0
 800b634:	4b0c      	ldr	r3, [pc, #48]	@ (800b668 <__multadd+0x84>)
 800b636:	480d      	ldr	r0, [pc, #52]	@ (800b66c <__multadd+0x88>)
 800b638:	21ba      	movs	r1, #186	@ 0xba
 800b63a:	f000 fd19 	bl	800c070 <__assert_func>
 800b63e:	6922      	ldr	r2, [r4, #16]
 800b640:	3202      	adds	r2, #2
 800b642:	f104 010c 	add.w	r1, r4, #12
 800b646:	0092      	lsls	r2, r2, #2
 800b648:	300c      	adds	r0, #12
 800b64a:	f7ff f802 	bl	800a652 <memcpy>
 800b64e:	4621      	mov	r1, r4
 800b650:	4638      	mov	r0, r7
 800b652:	f7ff ffa5 	bl	800b5a0 <_Bfree>
 800b656:	4644      	mov	r4, r8
 800b658:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b65c:	3501      	adds	r5, #1
 800b65e:	615e      	str	r6, [r3, #20]
 800b660:	6125      	str	r5, [r4, #16]
 800b662:	4620      	mov	r0, r4
 800b664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b668:	0800c974 	.word	0x0800c974
 800b66c:	0800c985 	.word	0x0800c985

0800b670 <__hi0bits>:
 800b670:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b674:	4603      	mov	r3, r0
 800b676:	bf36      	itet	cc
 800b678:	0403      	lslcc	r3, r0, #16
 800b67a:	2000      	movcs	r0, #0
 800b67c:	2010      	movcc	r0, #16
 800b67e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b682:	bf3c      	itt	cc
 800b684:	021b      	lslcc	r3, r3, #8
 800b686:	3008      	addcc	r0, #8
 800b688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b68c:	bf3c      	itt	cc
 800b68e:	011b      	lslcc	r3, r3, #4
 800b690:	3004      	addcc	r0, #4
 800b692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b696:	bf3c      	itt	cc
 800b698:	009b      	lslcc	r3, r3, #2
 800b69a:	3002      	addcc	r0, #2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	db05      	blt.n	800b6ac <__hi0bits+0x3c>
 800b6a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b6a4:	f100 0001 	add.w	r0, r0, #1
 800b6a8:	bf08      	it	eq
 800b6aa:	2020      	moveq	r0, #32
 800b6ac:	4770      	bx	lr

0800b6ae <__lo0bits>:
 800b6ae:	6803      	ldr	r3, [r0, #0]
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	f013 0007 	ands.w	r0, r3, #7
 800b6b6:	d00b      	beq.n	800b6d0 <__lo0bits+0x22>
 800b6b8:	07d9      	lsls	r1, r3, #31
 800b6ba:	d421      	bmi.n	800b700 <__lo0bits+0x52>
 800b6bc:	0798      	lsls	r0, r3, #30
 800b6be:	bf49      	itett	mi
 800b6c0:	085b      	lsrmi	r3, r3, #1
 800b6c2:	089b      	lsrpl	r3, r3, #2
 800b6c4:	2001      	movmi	r0, #1
 800b6c6:	6013      	strmi	r3, [r2, #0]
 800b6c8:	bf5c      	itt	pl
 800b6ca:	6013      	strpl	r3, [r2, #0]
 800b6cc:	2002      	movpl	r0, #2
 800b6ce:	4770      	bx	lr
 800b6d0:	b299      	uxth	r1, r3
 800b6d2:	b909      	cbnz	r1, 800b6d8 <__lo0bits+0x2a>
 800b6d4:	0c1b      	lsrs	r3, r3, #16
 800b6d6:	2010      	movs	r0, #16
 800b6d8:	b2d9      	uxtb	r1, r3
 800b6da:	b909      	cbnz	r1, 800b6e0 <__lo0bits+0x32>
 800b6dc:	3008      	adds	r0, #8
 800b6de:	0a1b      	lsrs	r3, r3, #8
 800b6e0:	0719      	lsls	r1, r3, #28
 800b6e2:	bf04      	itt	eq
 800b6e4:	091b      	lsreq	r3, r3, #4
 800b6e6:	3004      	addeq	r0, #4
 800b6e8:	0799      	lsls	r1, r3, #30
 800b6ea:	bf04      	itt	eq
 800b6ec:	089b      	lsreq	r3, r3, #2
 800b6ee:	3002      	addeq	r0, #2
 800b6f0:	07d9      	lsls	r1, r3, #31
 800b6f2:	d403      	bmi.n	800b6fc <__lo0bits+0x4e>
 800b6f4:	085b      	lsrs	r3, r3, #1
 800b6f6:	f100 0001 	add.w	r0, r0, #1
 800b6fa:	d003      	beq.n	800b704 <__lo0bits+0x56>
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	4770      	bx	lr
 800b700:	2000      	movs	r0, #0
 800b702:	4770      	bx	lr
 800b704:	2020      	movs	r0, #32
 800b706:	4770      	bx	lr

0800b708 <__i2b>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	460c      	mov	r4, r1
 800b70c:	2101      	movs	r1, #1
 800b70e:	f7ff ff07 	bl	800b520 <_Balloc>
 800b712:	4602      	mov	r2, r0
 800b714:	b928      	cbnz	r0, 800b722 <__i2b+0x1a>
 800b716:	4b05      	ldr	r3, [pc, #20]	@ (800b72c <__i2b+0x24>)
 800b718:	4805      	ldr	r0, [pc, #20]	@ (800b730 <__i2b+0x28>)
 800b71a:	f240 1145 	movw	r1, #325	@ 0x145
 800b71e:	f000 fca7 	bl	800c070 <__assert_func>
 800b722:	2301      	movs	r3, #1
 800b724:	6144      	str	r4, [r0, #20]
 800b726:	6103      	str	r3, [r0, #16]
 800b728:	bd10      	pop	{r4, pc}
 800b72a:	bf00      	nop
 800b72c:	0800c974 	.word	0x0800c974
 800b730:	0800c985 	.word	0x0800c985

0800b734 <__multiply>:
 800b734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b738:	4617      	mov	r7, r2
 800b73a:	690a      	ldr	r2, [r1, #16]
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	429a      	cmp	r2, r3
 800b740:	bfa8      	it	ge
 800b742:	463b      	movge	r3, r7
 800b744:	4689      	mov	r9, r1
 800b746:	bfa4      	itt	ge
 800b748:	460f      	movge	r7, r1
 800b74a:	4699      	movge	r9, r3
 800b74c:	693d      	ldr	r5, [r7, #16]
 800b74e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	6879      	ldr	r1, [r7, #4]
 800b756:	eb05 060a 	add.w	r6, r5, sl
 800b75a:	42b3      	cmp	r3, r6
 800b75c:	b085      	sub	sp, #20
 800b75e:	bfb8      	it	lt
 800b760:	3101      	addlt	r1, #1
 800b762:	f7ff fedd 	bl	800b520 <_Balloc>
 800b766:	b930      	cbnz	r0, 800b776 <__multiply+0x42>
 800b768:	4602      	mov	r2, r0
 800b76a:	4b41      	ldr	r3, [pc, #260]	@ (800b870 <__multiply+0x13c>)
 800b76c:	4841      	ldr	r0, [pc, #260]	@ (800b874 <__multiply+0x140>)
 800b76e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b772:	f000 fc7d 	bl	800c070 <__assert_func>
 800b776:	f100 0414 	add.w	r4, r0, #20
 800b77a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b77e:	4623      	mov	r3, r4
 800b780:	2200      	movs	r2, #0
 800b782:	4573      	cmp	r3, lr
 800b784:	d320      	bcc.n	800b7c8 <__multiply+0x94>
 800b786:	f107 0814 	add.w	r8, r7, #20
 800b78a:	f109 0114 	add.w	r1, r9, #20
 800b78e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b792:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b796:	9302      	str	r3, [sp, #8]
 800b798:	1beb      	subs	r3, r5, r7
 800b79a:	3b15      	subs	r3, #21
 800b79c:	f023 0303 	bic.w	r3, r3, #3
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	3715      	adds	r7, #21
 800b7a4:	42bd      	cmp	r5, r7
 800b7a6:	bf38      	it	cc
 800b7a8:	2304      	movcc	r3, #4
 800b7aa:	9301      	str	r3, [sp, #4]
 800b7ac:	9b02      	ldr	r3, [sp, #8]
 800b7ae:	9103      	str	r1, [sp, #12]
 800b7b0:	428b      	cmp	r3, r1
 800b7b2:	d80c      	bhi.n	800b7ce <__multiply+0x9a>
 800b7b4:	2e00      	cmp	r6, #0
 800b7b6:	dd03      	ble.n	800b7c0 <__multiply+0x8c>
 800b7b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d055      	beq.n	800b86c <__multiply+0x138>
 800b7c0:	6106      	str	r6, [r0, #16]
 800b7c2:	b005      	add	sp, #20
 800b7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c8:	f843 2b04 	str.w	r2, [r3], #4
 800b7cc:	e7d9      	b.n	800b782 <__multiply+0x4e>
 800b7ce:	f8b1 a000 	ldrh.w	sl, [r1]
 800b7d2:	f1ba 0f00 	cmp.w	sl, #0
 800b7d6:	d01f      	beq.n	800b818 <__multiply+0xe4>
 800b7d8:	46c4      	mov	ip, r8
 800b7da:	46a1      	mov	r9, r4
 800b7dc:	2700      	movs	r7, #0
 800b7de:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b7e2:	f8d9 3000 	ldr.w	r3, [r9]
 800b7e6:	fa1f fb82 	uxth.w	fp, r2
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800b7f0:	443b      	add	r3, r7
 800b7f2:	f8d9 7000 	ldr.w	r7, [r9]
 800b7f6:	0c12      	lsrs	r2, r2, #16
 800b7f8:	0c3f      	lsrs	r7, r7, #16
 800b7fa:	fb0a 7202 	mla	r2, sl, r2, r7
 800b7fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b802:	b29b      	uxth	r3, r3
 800b804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b808:	4565      	cmp	r5, ip
 800b80a:	f849 3b04 	str.w	r3, [r9], #4
 800b80e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b812:	d8e4      	bhi.n	800b7de <__multiply+0xaa>
 800b814:	9b01      	ldr	r3, [sp, #4]
 800b816:	50e7      	str	r7, [r4, r3]
 800b818:	9b03      	ldr	r3, [sp, #12]
 800b81a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b81e:	3104      	adds	r1, #4
 800b820:	f1b9 0f00 	cmp.w	r9, #0
 800b824:	d020      	beq.n	800b868 <__multiply+0x134>
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	4647      	mov	r7, r8
 800b82a:	46a4      	mov	ip, r4
 800b82c:	f04f 0a00 	mov.w	sl, #0
 800b830:	f8b7 b000 	ldrh.w	fp, [r7]
 800b834:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b838:	fb09 220b 	mla	r2, r9, fp, r2
 800b83c:	4452      	add	r2, sl
 800b83e:	b29b      	uxth	r3, r3
 800b840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b844:	f84c 3b04 	str.w	r3, [ip], #4
 800b848:	f857 3b04 	ldr.w	r3, [r7], #4
 800b84c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b850:	f8bc 3000 	ldrh.w	r3, [ip]
 800b854:	fb09 330a 	mla	r3, r9, sl, r3
 800b858:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b85c:	42bd      	cmp	r5, r7
 800b85e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b862:	d8e5      	bhi.n	800b830 <__multiply+0xfc>
 800b864:	9a01      	ldr	r2, [sp, #4]
 800b866:	50a3      	str	r3, [r4, r2]
 800b868:	3404      	adds	r4, #4
 800b86a:	e79f      	b.n	800b7ac <__multiply+0x78>
 800b86c:	3e01      	subs	r6, #1
 800b86e:	e7a1      	b.n	800b7b4 <__multiply+0x80>
 800b870:	0800c974 	.word	0x0800c974
 800b874:	0800c985 	.word	0x0800c985

0800b878 <__pow5mult>:
 800b878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b87c:	4615      	mov	r5, r2
 800b87e:	f012 0203 	ands.w	r2, r2, #3
 800b882:	4607      	mov	r7, r0
 800b884:	460e      	mov	r6, r1
 800b886:	d007      	beq.n	800b898 <__pow5mult+0x20>
 800b888:	4c25      	ldr	r4, [pc, #148]	@ (800b920 <__pow5mult+0xa8>)
 800b88a:	3a01      	subs	r2, #1
 800b88c:	2300      	movs	r3, #0
 800b88e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b892:	f7ff fea7 	bl	800b5e4 <__multadd>
 800b896:	4606      	mov	r6, r0
 800b898:	10ad      	asrs	r5, r5, #2
 800b89a:	d03d      	beq.n	800b918 <__pow5mult+0xa0>
 800b89c:	69fc      	ldr	r4, [r7, #28]
 800b89e:	b97c      	cbnz	r4, 800b8c0 <__pow5mult+0x48>
 800b8a0:	2010      	movs	r0, #16
 800b8a2:	f7ff fd87 	bl	800b3b4 <malloc>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	61f8      	str	r0, [r7, #28]
 800b8aa:	b928      	cbnz	r0, 800b8b8 <__pow5mult+0x40>
 800b8ac:	4b1d      	ldr	r3, [pc, #116]	@ (800b924 <__pow5mult+0xac>)
 800b8ae:	481e      	ldr	r0, [pc, #120]	@ (800b928 <__pow5mult+0xb0>)
 800b8b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b8b4:	f000 fbdc 	bl	800c070 <__assert_func>
 800b8b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8bc:	6004      	str	r4, [r0, #0]
 800b8be:	60c4      	str	r4, [r0, #12]
 800b8c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b8c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8c8:	b94c      	cbnz	r4, 800b8de <__pow5mult+0x66>
 800b8ca:	f240 2171 	movw	r1, #625	@ 0x271
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	f7ff ff1a 	bl	800b708 <__i2b>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8da:	4604      	mov	r4, r0
 800b8dc:	6003      	str	r3, [r0, #0]
 800b8de:	f04f 0900 	mov.w	r9, #0
 800b8e2:	07eb      	lsls	r3, r5, #31
 800b8e4:	d50a      	bpl.n	800b8fc <__pow5mult+0x84>
 800b8e6:	4631      	mov	r1, r6
 800b8e8:	4622      	mov	r2, r4
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	f7ff ff22 	bl	800b734 <__multiply>
 800b8f0:	4631      	mov	r1, r6
 800b8f2:	4680      	mov	r8, r0
 800b8f4:	4638      	mov	r0, r7
 800b8f6:	f7ff fe53 	bl	800b5a0 <_Bfree>
 800b8fa:	4646      	mov	r6, r8
 800b8fc:	106d      	asrs	r5, r5, #1
 800b8fe:	d00b      	beq.n	800b918 <__pow5mult+0xa0>
 800b900:	6820      	ldr	r0, [r4, #0]
 800b902:	b938      	cbnz	r0, 800b914 <__pow5mult+0x9c>
 800b904:	4622      	mov	r2, r4
 800b906:	4621      	mov	r1, r4
 800b908:	4638      	mov	r0, r7
 800b90a:	f7ff ff13 	bl	800b734 <__multiply>
 800b90e:	6020      	str	r0, [r4, #0]
 800b910:	f8c0 9000 	str.w	r9, [r0]
 800b914:	4604      	mov	r4, r0
 800b916:	e7e4      	b.n	800b8e2 <__pow5mult+0x6a>
 800b918:	4630      	mov	r0, r6
 800b91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91e:	bf00      	nop
 800b920:	0800ca38 	.word	0x0800ca38
 800b924:	0800c905 	.word	0x0800c905
 800b928:	0800c985 	.word	0x0800c985

0800b92c <__lshift>:
 800b92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b930:	460c      	mov	r4, r1
 800b932:	6849      	ldr	r1, [r1, #4]
 800b934:	6923      	ldr	r3, [r4, #16]
 800b936:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	4607      	mov	r7, r0
 800b93e:	4691      	mov	r9, r2
 800b940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b944:	f108 0601 	add.w	r6, r8, #1
 800b948:	42b3      	cmp	r3, r6
 800b94a:	db0b      	blt.n	800b964 <__lshift+0x38>
 800b94c:	4638      	mov	r0, r7
 800b94e:	f7ff fde7 	bl	800b520 <_Balloc>
 800b952:	4605      	mov	r5, r0
 800b954:	b948      	cbnz	r0, 800b96a <__lshift+0x3e>
 800b956:	4602      	mov	r2, r0
 800b958:	4b28      	ldr	r3, [pc, #160]	@ (800b9fc <__lshift+0xd0>)
 800b95a:	4829      	ldr	r0, [pc, #164]	@ (800ba00 <__lshift+0xd4>)
 800b95c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b960:	f000 fb86 	bl	800c070 <__assert_func>
 800b964:	3101      	adds	r1, #1
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	e7ee      	b.n	800b948 <__lshift+0x1c>
 800b96a:	2300      	movs	r3, #0
 800b96c:	f100 0114 	add.w	r1, r0, #20
 800b970:	f100 0210 	add.w	r2, r0, #16
 800b974:	4618      	mov	r0, r3
 800b976:	4553      	cmp	r3, sl
 800b978:	db33      	blt.n	800b9e2 <__lshift+0xb6>
 800b97a:	6920      	ldr	r0, [r4, #16]
 800b97c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b980:	f104 0314 	add.w	r3, r4, #20
 800b984:	f019 091f 	ands.w	r9, r9, #31
 800b988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b98c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b990:	d02b      	beq.n	800b9ea <__lshift+0xbe>
 800b992:	f1c9 0e20 	rsb	lr, r9, #32
 800b996:	468a      	mov	sl, r1
 800b998:	2200      	movs	r2, #0
 800b99a:	6818      	ldr	r0, [r3, #0]
 800b99c:	fa00 f009 	lsl.w	r0, r0, r9
 800b9a0:	4310      	orrs	r0, r2
 800b9a2:	f84a 0b04 	str.w	r0, [sl], #4
 800b9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9aa:	459c      	cmp	ip, r3
 800b9ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9b0:	d8f3      	bhi.n	800b99a <__lshift+0x6e>
 800b9b2:	ebac 0304 	sub.w	r3, ip, r4
 800b9b6:	3b15      	subs	r3, #21
 800b9b8:	f023 0303 	bic.w	r3, r3, #3
 800b9bc:	3304      	adds	r3, #4
 800b9be:	f104 0015 	add.w	r0, r4, #21
 800b9c2:	4560      	cmp	r0, ip
 800b9c4:	bf88      	it	hi
 800b9c6:	2304      	movhi	r3, #4
 800b9c8:	50ca      	str	r2, [r1, r3]
 800b9ca:	b10a      	cbz	r2, 800b9d0 <__lshift+0xa4>
 800b9cc:	f108 0602 	add.w	r6, r8, #2
 800b9d0:	3e01      	subs	r6, #1
 800b9d2:	4638      	mov	r0, r7
 800b9d4:	612e      	str	r6, [r5, #16]
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	f7ff fde2 	bl	800b5a0 <_Bfree>
 800b9dc:	4628      	mov	r0, r5
 800b9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	e7c5      	b.n	800b976 <__lshift+0x4a>
 800b9ea:	3904      	subs	r1, #4
 800b9ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9f4:	459c      	cmp	ip, r3
 800b9f6:	d8f9      	bhi.n	800b9ec <__lshift+0xc0>
 800b9f8:	e7ea      	b.n	800b9d0 <__lshift+0xa4>
 800b9fa:	bf00      	nop
 800b9fc:	0800c974 	.word	0x0800c974
 800ba00:	0800c985 	.word	0x0800c985

0800ba04 <__mcmp>:
 800ba04:	690a      	ldr	r2, [r1, #16]
 800ba06:	4603      	mov	r3, r0
 800ba08:	6900      	ldr	r0, [r0, #16]
 800ba0a:	1a80      	subs	r0, r0, r2
 800ba0c:	b530      	push	{r4, r5, lr}
 800ba0e:	d10e      	bne.n	800ba2e <__mcmp+0x2a>
 800ba10:	3314      	adds	r3, #20
 800ba12:	3114      	adds	r1, #20
 800ba14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba24:	4295      	cmp	r5, r2
 800ba26:	d003      	beq.n	800ba30 <__mcmp+0x2c>
 800ba28:	d205      	bcs.n	800ba36 <__mcmp+0x32>
 800ba2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2e:	bd30      	pop	{r4, r5, pc}
 800ba30:	42a3      	cmp	r3, r4
 800ba32:	d3f3      	bcc.n	800ba1c <__mcmp+0x18>
 800ba34:	e7fb      	b.n	800ba2e <__mcmp+0x2a>
 800ba36:	2001      	movs	r0, #1
 800ba38:	e7f9      	b.n	800ba2e <__mcmp+0x2a>
	...

0800ba3c <__mdiff>:
 800ba3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba40:	4689      	mov	r9, r1
 800ba42:	4606      	mov	r6, r0
 800ba44:	4611      	mov	r1, r2
 800ba46:	4648      	mov	r0, r9
 800ba48:	4614      	mov	r4, r2
 800ba4a:	f7ff ffdb 	bl	800ba04 <__mcmp>
 800ba4e:	1e05      	subs	r5, r0, #0
 800ba50:	d112      	bne.n	800ba78 <__mdiff+0x3c>
 800ba52:	4629      	mov	r1, r5
 800ba54:	4630      	mov	r0, r6
 800ba56:	f7ff fd63 	bl	800b520 <_Balloc>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	b928      	cbnz	r0, 800ba6a <__mdiff+0x2e>
 800ba5e:	4b3f      	ldr	r3, [pc, #252]	@ (800bb5c <__mdiff+0x120>)
 800ba60:	f240 2137 	movw	r1, #567	@ 0x237
 800ba64:	483e      	ldr	r0, [pc, #248]	@ (800bb60 <__mdiff+0x124>)
 800ba66:	f000 fb03 	bl	800c070 <__assert_func>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba70:	4610      	mov	r0, r2
 800ba72:	b003      	add	sp, #12
 800ba74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba78:	bfbc      	itt	lt
 800ba7a:	464b      	movlt	r3, r9
 800ba7c:	46a1      	movlt	r9, r4
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba84:	bfba      	itte	lt
 800ba86:	461c      	movlt	r4, r3
 800ba88:	2501      	movlt	r5, #1
 800ba8a:	2500      	movge	r5, #0
 800ba8c:	f7ff fd48 	bl	800b520 <_Balloc>
 800ba90:	4602      	mov	r2, r0
 800ba92:	b918      	cbnz	r0, 800ba9c <__mdiff+0x60>
 800ba94:	4b31      	ldr	r3, [pc, #196]	@ (800bb5c <__mdiff+0x120>)
 800ba96:	f240 2145 	movw	r1, #581	@ 0x245
 800ba9a:	e7e3      	b.n	800ba64 <__mdiff+0x28>
 800ba9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800baa0:	6926      	ldr	r6, [r4, #16]
 800baa2:	60c5      	str	r5, [r0, #12]
 800baa4:	f109 0310 	add.w	r3, r9, #16
 800baa8:	f109 0514 	add.w	r5, r9, #20
 800baac:	f104 0e14 	add.w	lr, r4, #20
 800bab0:	f100 0b14 	add.w	fp, r0, #20
 800bab4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bab8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	46d9      	mov	r9, fp
 800bac0:	f04f 0c00 	mov.w	ip, #0
 800bac4:	9b01      	ldr	r3, [sp, #4]
 800bac6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800baca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	fa1f f38a 	uxth.w	r3, sl
 800bad4:	4619      	mov	r1, r3
 800bad6:	b283      	uxth	r3, r0
 800bad8:	1acb      	subs	r3, r1, r3
 800bada:	0c00      	lsrs	r0, r0, #16
 800badc:	4463      	add	r3, ip
 800bade:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bae2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800baec:	4576      	cmp	r6, lr
 800baee:	f849 3b04 	str.w	r3, [r9], #4
 800baf2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800baf6:	d8e5      	bhi.n	800bac4 <__mdiff+0x88>
 800baf8:	1b33      	subs	r3, r6, r4
 800bafa:	3b15      	subs	r3, #21
 800bafc:	f023 0303 	bic.w	r3, r3, #3
 800bb00:	3415      	adds	r4, #21
 800bb02:	3304      	adds	r3, #4
 800bb04:	42a6      	cmp	r6, r4
 800bb06:	bf38      	it	cc
 800bb08:	2304      	movcc	r3, #4
 800bb0a:	441d      	add	r5, r3
 800bb0c:	445b      	add	r3, fp
 800bb0e:	461e      	mov	r6, r3
 800bb10:	462c      	mov	r4, r5
 800bb12:	4544      	cmp	r4, r8
 800bb14:	d30e      	bcc.n	800bb34 <__mdiff+0xf8>
 800bb16:	f108 0103 	add.w	r1, r8, #3
 800bb1a:	1b49      	subs	r1, r1, r5
 800bb1c:	f021 0103 	bic.w	r1, r1, #3
 800bb20:	3d03      	subs	r5, #3
 800bb22:	45a8      	cmp	r8, r5
 800bb24:	bf38      	it	cc
 800bb26:	2100      	movcc	r1, #0
 800bb28:	440b      	add	r3, r1
 800bb2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb2e:	b191      	cbz	r1, 800bb56 <__mdiff+0x11a>
 800bb30:	6117      	str	r7, [r2, #16]
 800bb32:	e79d      	b.n	800ba70 <__mdiff+0x34>
 800bb34:	f854 1b04 	ldr.w	r1, [r4], #4
 800bb38:	46e6      	mov	lr, ip
 800bb3a:	0c08      	lsrs	r0, r1, #16
 800bb3c:	fa1c fc81 	uxtah	ip, ip, r1
 800bb40:	4471      	add	r1, lr
 800bb42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bb46:	b289      	uxth	r1, r1
 800bb48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb4c:	f846 1b04 	str.w	r1, [r6], #4
 800bb50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb54:	e7dd      	b.n	800bb12 <__mdiff+0xd6>
 800bb56:	3f01      	subs	r7, #1
 800bb58:	e7e7      	b.n	800bb2a <__mdiff+0xee>
 800bb5a:	bf00      	nop
 800bb5c:	0800c974 	.word	0x0800c974
 800bb60:	0800c985 	.word	0x0800c985

0800bb64 <__d2b>:
 800bb64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb68:	460f      	mov	r7, r1
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	ec59 8b10 	vmov	r8, r9, d0
 800bb70:	4616      	mov	r6, r2
 800bb72:	f7ff fcd5 	bl	800b520 <_Balloc>
 800bb76:	4604      	mov	r4, r0
 800bb78:	b930      	cbnz	r0, 800bb88 <__d2b+0x24>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	4b23      	ldr	r3, [pc, #140]	@ (800bc0c <__d2b+0xa8>)
 800bb7e:	4824      	ldr	r0, [pc, #144]	@ (800bc10 <__d2b+0xac>)
 800bb80:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb84:	f000 fa74 	bl	800c070 <__assert_func>
 800bb88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb90:	b10d      	cbz	r5, 800bb96 <__d2b+0x32>
 800bb92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb96:	9301      	str	r3, [sp, #4]
 800bb98:	f1b8 0300 	subs.w	r3, r8, #0
 800bb9c:	d023      	beq.n	800bbe6 <__d2b+0x82>
 800bb9e:	4668      	mov	r0, sp
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	f7ff fd84 	bl	800b6ae <__lo0bits>
 800bba6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbaa:	b1d0      	cbz	r0, 800bbe2 <__d2b+0x7e>
 800bbac:	f1c0 0320 	rsb	r3, r0, #32
 800bbb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb4:	430b      	orrs	r3, r1
 800bbb6:	40c2      	lsrs	r2, r0
 800bbb8:	6163      	str	r3, [r4, #20]
 800bbba:	9201      	str	r2, [sp, #4]
 800bbbc:	9b01      	ldr	r3, [sp, #4]
 800bbbe:	61a3      	str	r3, [r4, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bf0c      	ite	eq
 800bbc4:	2201      	moveq	r2, #1
 800bbc6:	2202      	movne	r2, #2
 800bbc8:	6122      	str	r2, [r4, #16]
 800bbca:	b1a5      	cbz	r5, 800bbf6 <__d2b+0x92>
 800bbcc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bbd0:	4405      	add	r5, r0
 800bbd2:	603d      	str	r5, [r7, #0]
 800bbd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bbd8:	6030      	str	r0, [r6, #0]
 800bbda:	4620      	mov	r0, r4
 800bbdc:	b003      	add	sp, #12
 800bbde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbe2:	6161      	str	r1, [r4, #20]
 800bbe4:	e7ea      	b.n	800bbbc <__d2b+0x58>
 800bbe6:	a801      	add	r0, sp, #4
 800bbe8:	f7ff fd61 	bl	800b6ae <__lo0bits>
 800bbec:	9b01      	ldr	r3, [sp, #4]
 800bbee:	6163      	str	r3, [r4, #20]
 800bbf0:	3020      	adds	r0, #32
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	e7e8      	b.n	800bbc8 <__d2b+0x64>
 800bbf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bbfe:	6038      	str	r0, [r7, #0]
 800bc00:	6918      	ldr	r0, [r3, #16]
 800bc02:	f7ff fd35 	bl	800b670 <__hi0bits>
 800bc06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc0a:	e7e5      	b.n	800bbd8 <__d2b+0x74>
 800bc0c:	0800c974 	.word	0x0800c974
 800bc10:	0800c985 	.word	0x0800c985

0800bc14 <__ssputs_r>:
 800bc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc18:	688e      	ldr	r6, [r1, #8]
 800bc1a:	461f      	mov	r7, r3
 800bc1c:	42be      	cmp	r6, r7
 800bc1e:	680b      	ldr	r3, [r1, #0]
 800bc20:	4682      	mov	sl, r0
 800bc22:	460c      	mov	r4, r1
 800bc24:	4690      	mov	r8, r2
 800bc26:	d82d      	bhi.n	800bc84 <__ssputs_r+0x70>
 800bc28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc30:	d026      	beq.n	800bc80 <__ssputs_r+0x6c>
 800bc32:	6965      	ldr	r5, [r4, #20]
 800bc34:	6909      	ldr	r1, [r1, #16]
 800bc36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc3a:	eba3 0901 	sub.w	r9, r3, r1
 800bc3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc42:	1c7b      	adds	r3, r7, #1
 800bc44:	444b      	add	r3, r9
 800bc46:	106d      	asrs	r5, r5, #1
 800bc48:	429d      	cmp	r5, r3
 800bc4a:	bf38      	it	cc
 800bc4c:	461d      	movcc	r5, r3
 800bc4e:	0553      	lsls	r3, r2, #21
 800bc50:	d527      	bpl.n	800bca2 <__ssputs_r+0x8e>
 800bc52:	4629      	mov	r1, r5
 800bc54:	f7ff fbd8 	bl	800b408 <_malloc_r>
 800bc58:	4606      	mov	r6, r0
 800bc5a:	b360      	cbz	r0, 800bcb6 <__ssputs_r+0xa2>
 800bc5c:	6921      	ldr	r1, [r4, #16]
 800bc5e:	464a      	mov	r2, r9
 800bc60:	f7fe fcf7 	bl	800a652 <memcpy>
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc6e:	81a3      	strh	r3, [r4, #12]
 800bc70:	6126      	str	r6, [r4, #16]
 800bc72:	6165      	str	r5, [r4, #20]
 800bc74:	444e      	add	r6, r9
 800bc76:	eba5 0509 	sub.w	r5, r5, r9
 800bc7a:	6026      	str	r6, [r4, #0]
 800bc7c:	60a5      	str	r5, [r4, #8]
 800bc7e:	463e      	mov	r6, r7
 800bc80:	42be      	cmp	r6, r7
 800bc82:	d900      	bls.n	800bc86 <__ssputs_r+0x72>
 800bc84:	463e      	mov	r6, r7
 800bc86:	6820      	ldr	r0, [r4, #0]
 800bc88:	4632      	mov	r2, r6
 800bc8a:	4641      	mov	r1, r8
 800bc8c:	f000 f9c6 	bl	800c01c <memmove>
 800bc90:	68a3      	ldr	r3, [r4, #8]
 800bc92:	1b9b      	subs	r3, r3, r6
 800bc94:	60a3      	str	r3, [r4, #8]
 800bc96:	6823      	ldr	r3, [r4, #0]
 800bc98:	4433      	add	r3, r6
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bca2:	462a      	mov	r2, r5
 800bca4:	f000 fa28 	bl	800c0f8 <_realloc_r>
 800bca8:	4606      	mov	r6, r0
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d1e0      	bne.n	800bc70 <__ssputs_r+0x5c>
 800bcae:	6921      	ldr	r1, [r4, #16]
 800bcb0:	4650      	mov	r0, sl
 800bcb2:	f7ff fb35 	bl	800b320 <_free_r>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	f8ca 3000 	str.w	r3, [sl]
 800bcbc:	89a3      	ldrh	r3, [r4, #12]
 800bcbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcc2:	81a3      	strh	r3, [r4, #12]
 800bcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc8:	e7e9      	b.n	800bc9e <__ssputs_r+0x8a>
	...

0800bccc <_svfiprintf_r>:
 800bccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	4698      	mov	r8, r3
 800bcd2:	898b      	ldrh	r3, [r1, #12]
 800bcd4:	061b      	lsls	r3, r3, #24
 800bcd6:	b09d      	sub	sp, #116	@ 0x74
 800bcd8:	4607      	mov	r7, r0
 800bcda:	460d      	mov	r5, r1
 800bcdc:	4614      	mov	r4, r2
 800bcde:	d510      	bpl.n	800bd02 <_svfiprintf_r+0x36>
 800bce0:	690b      	ldr	r3, [r1, #16]
 800bce2:	b973      	cbnz	r3, 800bd02 <_svfiprintf_r+0x36>
 800bce4:	2140      	movs	r1, #64	@ 0x40
 800bce6:	f7ff fb8f 	bl	800b408 <_malloc_r>
 800bcea:	6028      	str	r0, [r5, #0]
 800bcec:	6128      	str	r0, [r5, #16]
 800bcee:	b930      	cbnz	r0, 800bcfe <_svfiprintf_r+0x32>
 800bcf0:	230c      	movs	r3, #12
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf8:	b01d      	add	sp, #116	@ 0x74
 800bcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcfe:	2340      	movs	r3, #64	@ 0x40
 800bd00:	616b      	str	r3, [r5, #20]
 800bd02:	2300      	movs	r3, #0
 800bd04:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd06:	2320      	movs	r3, #32
 800bd08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd10:	2330      	movs	r3, #48	@ 0x30
 800bd12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800beb0 <_svfiprintf_r+0x1e4>
 800bd16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd1a:	f04f 0901 	mov.w	r9, #1
 800bd1e:	4623      	mov	r3, r4
 800bd20:	469a      	mov	sl, r3
 800bd22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd26:	b10a      	cbz	r2, 800bd2c <_svfiprintf_r+0x60>
 800bd28:	2a25      	cmp	r2, #37	@ 0x25
 800bd2a:	d1f9      	bne.n	800bd20 <_svfiprintf_r+0x54>
 800bd2c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd30:	d00b      	beq.n	800bd4a <_svfiprintf_r+0x7e>
 800bd32:	465b      	mov	r3, fp
 800bd34:	4622      	mov	r2, r4
 800bd36:	4629      	mov	r1, r5
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff ff6b 	bl	800bc14 <__ssputs_r>
 800bd3e:	3001      	adds	r0, #1
 800bd40:	f000 80a7 	beq.w	800be92 <_svfiprintf_r+0x1c6>
 800bd44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd46:	445a      	add	r2, fp
 800bd48:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd4a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 809f 	beq.w	800be92 <_svfiprintf_r+0x1c6>
 800bd54:	2300      	movs	r3, #0
 800bd56:	f04f 32ff 	mov.w	r2, #4294967295
 800bd5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd5e:	f10a 0a01 	add.w	sl, sl, #1
 800bd62:	9304      	str	r3, [sp, #16]
 800bd64:	9307      	str	r3, [sp, #28]
 800bd66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd6c:	4654      	mov	r4, sl
 800bd6e:	2205      	movs	r2, #5
 800bd70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd74:	484e      	ldr	r0, [pc, #312]	@ (800beb0 <_svfiprintf_r+0x1e4>)
 800bd76:	f7f4 fa33 	bl	80001e0 <memchr>
 800bd7a:	9a04      	ldr	r2, [sp, #16]
 800bd7c:	b9d8      	cbnz	r0, 800bdb6 <_svfiprintf_r+0xea>
 800bd7e:	06d0      	lsls	r0, r2, #27
 800bd80:	bf44      	itt	mi
 800bd82:	2320      	movmi	r3, #32
 800bd84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd88:	0711      	lsls	r1, r2, #28
 800bd8a:	bf44      	itt	mi
 800bd8c:	232b      	movmi	r3, #43	@ 0x2b
 800bd8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd92:	f89a 3000 	ldrb.w	r3, [sl]
 800bd96:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd98:	d015      	beq.n	800bdc6 <_svfiprintf_r+0xfa>
 800bd9a:	9a07      	ldr	r2, [sp, #28]
 800bd9c:	4654      	mov	r4, sl
 800bd9e:	2000      	movs	r0, #0
 800bda0:	f04f 0c0a 	mov.w	ip, #10
 800bda4:	4621      	mov	r1, r4
 800bda6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdaa:	3b30      	subs	r3, #48	@ 0x30
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	d94b      	bls.n	800be48 <_svfiprintf_r+0x17c>
 800bdb0:	b1b0      	cbz	r0, 800bde0 <_svfiprintf_r+0x114>
 800bdb2:	9207      	str	r2, [sp, #28]
 800bdb4:	e014      	b.n	800bde0 <_svfiprintf_r+0x114>
 800bdb6:	eba0 0308 	sub.w	r3, r0, r8
 800bdba:	fa09 f303 	lsl.w	r3, r9, r3
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	46a2      	mov	sl, r4
 800bdc4:	e7d2      	b.n	800bd6c <_svfiprintf_r+0xa0>
 800bdc6:	9b03      	ldr	r3, [sp, #12]
 800bdc8:	1d19      	adds	r1, r3, #4
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	9103      	str	r1, [sp, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	bfbb      	ittet	lt
 800bdd2:	425b      	neglt	r3, r3
 800bdd4:	f042 0202 	orrlt.w	r2, r2, #2
 800bdd8:	9307      	strge	r3, [sp, #28]
 800bdda:	9307      	strlt	r3, [sp, #28]
 800bddc:	bfb8      	it	lt
 800bdde:	9204      	strlt	r2, [sp, #16]
 800bde0:	7823      	ldrb	r3, [r4, #0]
 800bde2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bde4:	d10a      	bne.n	800bdfc <_svfiprintf_r+0x130>
 800bde6:	7863      	ldrb	r3, [r4, #1]
 800bde8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdea:	d132      	bne.n	800be52 <_svfiprintf_r+0x186>
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	1d1a      	adds	r2, r3, #4
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	9203      	str	r2, [sp, #12]
 800bdf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdf8:	3402      	adds	r4, #2
 800bdfa:	9305      	str	r3, [sp, #20]
 800bdfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bec0 <_svfiprintf_r+0x1f4>
 800be00:	7821      	ldrb	r1, [r4, #0]
 800be02:	2203      	movs	r2, #3
 800be04:	4650      	mov	r0, sl
 800be06:	f7f4 f9eb 	bl	80001e0 <memchr>
 800be0a:	b138      	cbz	r0, 800be1c <_svfiprintf_r+0x150>
 800be0c:	9b04      	ldr	r3, [sp, #16]
 800be0e:	eba0 000a 	sub.w	r0, r0, sl
 800be12:	2240      	movs	r2, #64	@ 0x40
 800be14:	4082      	lsls	r2, r0
 800be16:	4313      	orrs	r3, r2
 800be18:	3401      	adds	r4, #1
 800be1a:	9304      	str	r3, [sp, #16]
 800be1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be20:	4824      	ldr	r0, [pc, #144]	@ (800beb4 <_svfiprintf_r+0x1e8>)
 800be22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be26:	2206      	movs	r2, #6
 800be28:	f7f4 f9da 	bl	80001e0 <memchr>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d036      	beq.n	800be9e <_svfiprintf_r+0x1d2>
 800be30:	4b21      	ldr	r3, [pc, #132]	@ (800beb8 <_svfiprintf_r+0x1ec>)
 800be32:	bb1b      	cbnz	r3, 800be7c <_svfiprintf_r+0x1b0>
 800be34:	9b03      	ldr	r3, [sp, #12]
 800be36:	3307      	adds	r3, #7
 800be38:	f023 0307 	bic.w	r3, r3, #7
 800be3c:	3308      	adds	r3, #8
 800be3e:	9303      	str	r3, [sp, #12]
 800be40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be42:	4433      	add	r3, r6
 800be44:	9309      	str	r3, [sp, #36]	@ 0x24
 800be46:	e76a      	b.n	800bd1e <_svfiprintf_r+0x52>
 800be48:	fb0c 3202 	mla	r2, ip, r2, r3
 800be4c:	460c      	mov	r4, r1
 800be4e:	2001      	movs	r0, #1
 800be50:	e7a8      	b.n	800bda4 <_svfiprintf_r+0xd8>
 800be52:	2300      	movs	r3, #0
 800be54:	3401      	adds	r4, #1
 800be56:	9305      	str	r3, [sp, #20]
 800be58:	4619      	mov	r1, r3
 800be5a:	f04f 0c0a 	mov.w	ip, #10
 800be5e:	4620      	mov	r0, r4
 800be60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be64:	3a30      	subs	r2, #48	@ 0x30
 800be66:	2a09      	cmp	r2, #9
 800be68:	d903      	bls.n	800be72 <_svfiprintf_r+0x1a6>
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d0c6      	beq.n	800bdfc <_svfiprintf_r+0x130>
 800be6e:	9105      	str	r1, [sp, #20]
 800be70:	e7c4      	b.n	800bdfc <_svfiprintf_r+0x130>
 800be72:	fb0c 2101 	mla	r1, ip, r1, r2
 800be76:	4604      	mov	r4, r0
 800be78:	2301      	movs	r3, #1
 800be7a:	e7f0      	b.n	800be5e <_svfiprintf_r+0x192>
 800be7c:	ab03      	add	r3, sp, #12
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	462a      	mov	r2, r5
 800be82:	4b0e      	ldr	r3, [pc, #56]	@ (800bebc <_svfiprintf_r+0x1f0>)
 800be84:	a904      	add	r1, sp, #16
 800be86:	4638      	mov	r0, r7
 800be88:	f7fd fe86 	bl	8009b98 <_printf_float>
 800be8c:	1c42      	adds	r2, r0, #1
 800be8e:	4606      	mov	r6, r0
 800be90:	d1d6      	bne.n	800be40 <_svfiprintf_r+0x174>
 800be92:	89ab      	ldrh	r3, [r5, #12]
 800be94:	065b      	lsls	r3, r3, #25
 800be96:	f53f af2d 	bmi.w	800bcf4 <_svfiprintf_r+0x28>
 800be9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be9c:	e72c      	b.n	800bcf8 <_svfiprintf_r+0x2c>
 800be9e:	ab03      	add	r3, sp, #12
 800bea0:	9300      	str	r3, [sp, #0]
 800bea2:	462a      	mov	r2, r5
 800bea4:	4b05      	ldr	r3, [pc, #20]	@ (800bebc <_svfiprintf_r+0x1f0>)
 800bea6:	a904      	add	r1, sp, #16
 800bea8:	4638      	mov	r0, r7
 800beaa:	f7fe f90d 	bl	800a0c8 <_printf_i>
 800beae:	e7ed      	b.n	800be8c <_svfiprintf_r+0x1c0>
 800beb0:	0800c9de 	.word	0x0800c9de
 800beb4:	0800c9e8 	.word	0x0800c9e8
 800beb8:	08009b99 	.word	0x08009b99
 800bebc:	0800bc15 	.word	0x0800bc15
 800bec0:	0800c9e4 	.word	0x0800c9e4

0800bec4 <__sflush_r>:
 800bec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800becc:	0716      	lsls	r6, r2, #28
 800bece:	4605      	mov	r5, r0
 800bed0:	460c      	mov	r4, r1
 800bed2:	d454      	bmi.n	800bf7e <__sflush_r+0xba>
 800bed4:	684b      	ldr	r3, [r1, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	dc02      	bgt.n	800bee0 <__sflush_r+0x1c>
 800beda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bedc:	2b00      	cmp	r3, #0
 800bede:	dd48      	ble.n	800bf72 <__sflush_r+0xae>
 800bee0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bee2:	2e00      	cmp	r6, #0
 800bee4:	d045      	beq.n	800bf72 <__sflush_r+0xae>
 800bee6:	2300      	movs	r3, #0
 800bee8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800beec:	682f      	ldr	r7, [r5, #0]
 800beee:	6a21      	ldr	r1, [r4, #32]
 800bef0:	602b      	str	r3, [r5, #0]
 800bef2:	d030      	beq.n	800bf56 <__sflush_r+0x92>
 800bef4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bef6:	89a3      	ldrh	r3, [r4, #12]
 800bef8:	0759      	lsls	r1, r3, #29
 800befa:	d505      	bpl.n	800bf08 <__sflush_r+0x44>
 800befc:	6863      	ldr	r3, [r4, #4]
 800befe:	1ad2      	subs	r2, r2, r3
 800bf00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf02:	b10b      	cbz	r3, 800bf08 <__sflush_r+0x44>
 800bf04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf06:	1ad2      	subs	r2, r2, r3
 800bf08:	2300      	movs	r3, #0
 800bf0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf0c:	6a21      	ldr	r1, [r4, #32]
 800bf0e:	4628      	mov	r0, r5
 800bf10:	47b0      	blx	r6
 800bf12:	1c43      	adds	r3, r0, #1
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	d106      	bne.n	800bf26 <__sflush_r+0x62>
 800bf18:	6829      	ldr	r1, [r5, #0]
 800bf1a:	291d      	cmp	r1, #29
 800bf1c:	d82b      	bhi.n	800bf76 <__sflush_r+0xb2>
 800bf1e:	4a2a      	ldr	r2, [pc, #168]	@ (800bfc8 <__sflush_r+0x104>)
 800bf20:	40ca      	lsrs	r2, r1
 800bf22:	07d6      	lsls	r6, r2, #31
 800bf24:	d527      	bpl.n	800bf76 <__sflush_r+0xb2>
 800bf26:	2200      	movs	r2, #0
 800bf28:	6062      	str	r2, [r4, #4]
 800bf2a:	04d9      	lsls	r1, r3, #19
 800bf2c:	6922      	ldr	r2, [r4, #16]
 800bf2e:	6022      	str	r2, [r4, #0]
 800bf30:	d504      	bpl.n	800bf3c <__sflush_r+0x78>
 800bf32:	1c42      	adds	r2, r0, #1
 800bf34:	d101      	bne.n	800bf3a <__sflush_r+0x76>
 800bf36:	682b      	ldr	r3, [r5, #0]
 800bf38:	b903      	cbnz	r3, 800bf3c <__sflush_r+0x78>
 800bf3a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf3e:	602f      	str	r7, [r5, #0]
 800bf40:	b1b9      	cbz	r1, 800bf72 <__sflush_r+0xae>
 800bf42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf46:	4299      	cmp	r1, r3
 800bf48:	d002      	beq.n	800bf50 <__sflush_r+0x8c>
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	f7ff f9e8 	bl	800b320 <_free_r>
 800bf50:	2300      	movs	r3, #0
 800bf52:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf54:	e00d      	b.n	800bf72 <__sflush_r+0xae>
 800bf56:	2301      	movs	r3, #1
 800bf58:	4628      	mov	r0, r5
 800bf5a:	47b0      	blx	r6
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	1c50      	adds	r0, r2, #1
 800bf60:	d1c9      	bne.n	800bef6 <__sflush_r+0x32>
 800bf62:	682b      	ldr	r3, [r5, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d0c6      	beq.n	800bef6 <__sflush_r+0x32>
 800bf68:	2b1d      	cmp	r3, #29
 800bf6a:	d001      	beq.n	800bf70 <__sflush_r+0xac>
 800bf6c:	2b16      	cmp	r3, #22
 800bf6e:	d11e      	bne.n	800bfae <__sflush_r+0xea>
 800bf70:	602f      	str	r7, [r5, #0]
 800bf72:	2000      	movs	r0, #0
 800bf74:	e022      	b.n	800bfbc <__sflush_r+0xf8>
 800bf76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf7a:	b21b      	sxth	r3, r3
 800bf7c:	e01b      	b.n	800bfb6 <__sflush_r+0xf2>
 800bf7e:	690f      	ldr	r7, [r1, #16]
 800bf80:	2f00      	cmp	r7, #0
 800bf82:	d0f6      	beq.n	800bf72 <__sflush_r+0xae>
 800bf84:	0793      	lsls	r3, r2, #30
 800bf86:	680e      	ldr	r6, [r1, #0]
 800bf88:	bf08      	it	eq
 800bf8a:	694b      	ldreq	r3, [r1, #20]
 800bf8c:	600f      	str	r7, [r1, #0]
 800bf8e:	bf18      	it	ne
 800bf90:	2300      	movne	r3, #0
 800bf92:	eba6 0807 	sub.w	r8, r6, r7
 800bf96:	608b      	str	r3, [r1, #8]
 800bf98:	f1b8 0f00 	cmp.w	r8, #0
 800bf9c:	dde9      	ble.n	800bf72 <__sflush_r+0xae>
 800bf9e:	6a21      	ldr	r1, [r4, #32]
 800bfa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bfa2:	4643      	mov	r3, r8
 800bfa4:	463a      	mov	r2, r7
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	47b0      	blx	r6
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	dc08      	bgt.n	800bfc0 <__sflush_r+0xfc>
 800bfae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfb6:	81a3      	strh	r3, [r4, #12]
 800bfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc0:	4407      	add	r7, r0
 800bfc2:	eba8 0800 	sub.w	r8, r8, r0
 800bfc6:	e7e7      	b.n	800bf98 <__sflush_r+0xd4>
 800bfc8:	20400001 	.word	0x20400001

0800bfcc <_fflush_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	690b      	ldr	r3, [r1, #16]
 800bfd0:	4605      	mov	r5, r0
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	b913      	cbnz	r3, 800bfdc <_fflush_r+0x10>
 800bfd6:	2500      	movs	r5, #0
 800bfd8:	4628      	mov	r0, r5
 800bfda:	bd38      	pop	{r3, r4, r5, pc}
 800bfdc:	b118      	cbz	r0, 800bfe6 <_fflush_r+0x1a>
 800bfde:	6a03      	ldr	r3, [r0, #32]
 800bfe0:	b90b      	cbnz	r3, 800bfe6 <_fflush_r+0x1a>
 800bfe2:	f7fe fa1b 	bl	800a41c <__sinit>
 800bfe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d0f3      	beq.n	800bfd6 <_fflush_r+0xa>
 800bfee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bff0:	07d0      	lsls	r0, r2, #31
 800bff2:	d404      	bmi.n	800bffe <_fflush_r+0x32>
 800bff4:	0599      	lsls	r1, r3, #22
 800bff6:	d402      	bmi.n	800bffe <_fflush_r+0x32>
 800bff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bffa:	f7fe fb28 	bl	800a64e <__retarget_lock_acquire_recursive>
 800bffe:	4628      	mov	r0, r5
 800c000:	4621      	mov	r1, r4
 800c002:	f7ff ff5f 	bl	800bec4 <__sflush_r>
 800c006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c008:	07da      	lsls	r2, r3, #31
 800c00a:	4605      	mov	r5, r0
 800c00c:	d4e4      	bmi.n	800bfd8 <_fflush_r+0xc>
 800c00e:	89a3      	ldrh	r3, [r4, #12]
 800c010:	059b      	lsls	r3, r3, #22
 800c012:	d4e1      	bmi.n	800bfd8 <_fflush_r+0xc>
 800c014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c016:	f7fe fb1b 	bl	800a650 <__retarget_lock_release_recursive>
 800c01a:	e7dd      	b.n	800bfd8 <_fflush_r+0xc>

0800c01c <memmove>:
 800c01c:	4288      	cmp	r0, r1
 800c01e:	b510      	push	{r4, lr}
 800c020:	eb01 0402 	add.w	r4, r1, r2
 800c024:	d902      	bls.n	800c02c <memmove+0x10>
 800c026:	4284      	cmp	r4, r0
 800c028:	4623      	mov	r3, r4
 800c02a:	d807      	bhi.n	800c03c <memmove+0x20>
 800c02c:	1e43      	subs	r3, r0, #1
 800c02e:	42a1      	cmp	r1, r4
 800c030:	d008      	beq.n	800c044 <memmove+0x28>
 800c032:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c03a:	e7f8      	b.n	800c02e <memmove+0x12>
 800c03c:	4402      	add	r2, r0
 800c03e:	4601      	mov	r1, r0
 800c040:	428a      	cmp	r2, r1
 800c042:	d100      	bne.n	800c046 <memmove+0x2a>
 800c044:	bd10      	pop	{r4, pc}
 800c046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c04a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c04e:	e7f7      	b.n	800c040 <memmove+0x24>

0800c050 <_sbrk_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4d06      	ldr	r5, [pc, #24]	@ (800c06c <_sbrk_r+0x1c>)
 800c054:	2300      	movs	r3, #0
 800c056:	4604      	mov	r4, r0
 800c058:	4608      	mov	r0, r1
 800c05a:	602b      	str	r3, [r5, #0]
 800c05c:	f7f6 f848 	bl	80020f0 <_sbrk>
 800c060:	1c43      	adds	r3, r0, #1
 800c062:	d102      	bne.n	800c06a <_sbrk_r+0x1a>
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	b103      	cbz	r3, 800c06a <_sbrk_r+0x1a>
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	200050cc 	.word	0x200050cc

0800c070 <__assert_func>:
 800c070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c072:	4614      	mov	r4, r2
 800c074:	461a      	mov	r2, r3
 800c076:	4b09      	ldr	r3, [pc, #36]	@ (800c09c <__assert_func+0x2c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4605      	mov	r5, r0
 800c07c:	68d8      	ldr	r0, [r3, #12]
 800c07e:	b14c      	cbz	r4, 800c094 <__assert_func+0x24>
 800c080:	4b07      	ldr	r3, [pc, #28]	@ (800c0a0 <__assert_func+0x30>)
 800c082:	9100      	str	r1, [sp, #0]
 800c084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c088:	4906      	ldr	r1, [pc, #24]	@ (800c0a4 <__assert_func+0x34>)
 800c08a:	462b      	mov	r3, r5
 800c08c:	f000 f870 	bl	800c170 <fiprintf>
 800c090:	f000 f880 	bl	800c194 <abort>
 800c094:	4b04      	ldr	r3, [pc, #16]	@ (800c0a8 <__assert_func+0x38>)
 800c096:	461c      	mov	r4, r3
 800c098:	e7f3      	b.n	800c082 <__assert_func+0x12>
 800c09a:	bf00      	nop
 800c09c:	2000001c 	.word	0x2000001c
 800c0a0:	0800c9f9 	.word	0x0800c9f9
 800c0a4:	0800ca06 	.word	0x0800ca06
 800c0a8:	0800ca34 	.word	0x0800ca34

0800c0ac <_calloc_r>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	fba1 5402 	umull	r5, r4, r1, r2
 800c0b2:	b934      	cbnz	r4, 800c0c2 <_calloc_r+0x16>
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	f7ff f9a7 	bl	800b408 <_malloc_r>
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	b928      	cbnz	r0, 800c0ca <_calloc_r+0x1e>
 800c0be:	4630      	mov	r0, r6
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	220c      	movs	r2, #12
 800c0c4:	6002      	str	r2, [r0, #0]
 800c0c6:	2600      	movs	r6, #0
 800c0c8:	e7f9      	b.n	800c0be <_calloc_r+0x12>
 800c0ca:	462a      	mov	r2, r5
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	f7fe fa40 	bl	800a552 <memset>
 800c0d2:	e7f4      	b.n	800c0be <_calloc_r+0x12>

0800c0d4 <__ascii_mbtowc>:
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	b901      	cbnz	r1, 800c0da <__ascii_mbtowc+0x6>
 800c0d8:	a901      	add	r1, sp, #4
 800c0da:	b142      	cbz	r2, 800c0ee <__ascii_mbtowc+0x1a>
 800c0dc:	b14b      	cbz	r3, 800c0f2 <__ascii_mbtowc+0x1e>
 800c0de:	7813      	ldrb	r3, [r2, #0]
 800c0e0:	600b      	str	r3, [r1, #0]
 800c0e2:	7812      	ldrb	r2, [r2, #0]
 800c0e4:	1e10      	subs	r0, r2, #0
 800c0e6:	bf18      	it	ne
 800c0e8:	2001      	movne	r0, #1
 800c0ea:	b002      	add	sp, #8
 800c0ec:	4770      	bx	lr
 800c0ee:	4610      	mov	r0, r2
 800c0f0:	e7fb      	b.n	800c0ea <__ascii_mbtowc+0x16>
 800c0f2:	f06f 0001 	mvn.w	r0, #1
 800c0f6:	e7f8      	b.n	800c0ea <__ascii_mbtowc+0x16>

0800c0f8 <_realloc_r>:
 800c0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fc:	4607      	mov	r7, r0
 800c0fe:	4614      	mov	r4, r2
 800c100:	460d      	mov	r5, r1
 800c102:	b921      	cbnz	r1, 800c10e <_realloc_r+0x16>
 800c104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c108:	4611      	mov	r1, r2
 800c10a:	f7ff b97d 	b.w	800b408 <_malloc_r>
 800c10e:	b92a      	cbnz	r2, 800c11c <_realloc_r+0x24>
 800c110:	f7ff f906 	bl	800b320 <_free_r>
 800c114:	4625      	mov	r5, r4
 800c116:	4628      	mov	r0, r5
 800c118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c11c:	f000 f841 	bl	800c1a2 <_malloc_usable_size_r>
 800c120:	4284      	cmp	r4, r0
 800c122:	4606      	mov	r6, r0
 800c124:	d802      	bhi.n	800c12c <_realloc_r+0x34>
 800c126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c12a:	d8f4      	bhi.n	800c116 <_realloc_r+0x1e>
 800c12c:	4621      	mov	r1, r4
 800c12e:	4638      	mov	r0, r7
 800c130:	f7ff f96a 	bl	800b408 <_malloc_r>
 800c134:	4680      	mov	r8, r0
 800c136:	b908      	cbnz	r0, 800c13c <_realloc_r+0x44>
 800c138:	4645      	mov	r5, r8
 800c13a:	e7ec      	b.n	800c116 <_realloc_r+0x1e>
 800c13c:	42b4      	cmp	r4, r6
 800c13e:	4622      	mov	r2, r4
 800c140:	4629      	mov	r1, r5
 800c142:	bf28      	it	cs
 800c144:	4632      	movcs	r2, r6
 800c146:	f7fe fa84 	bl	800a652 <memcpy>
 800c14a:	4629      	mov	r1, r5
 800c14c:	4638      	mov	r0, r7
 800c14e:	f7ff f8e7 	bl	800b320 <_free_r>
 800c152:	e7f1      	b.n	800c138 <_realloc_r+0x40>

0800c154 <__ascii_wctomb>:
 800c154:	4603      	mov	r3, r0
 800c156:	4608      	mov	r0, r1
 800c158:	b141      	cbz	r1, 800c16c <__ascii_wctomb+0x18>
 800c15a:	2aff      	cmp	r2, #255	@ 0xff
 800c15c:	d904      	bls.n	800c168 <__ascii_wctomb+0x14>
 800c15e:	228a      	movs	r2, #138	@ 0x8a
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	f04f 30ff 	mov.w	r0, #4294967295
 800c166:	4770      	bx	lr
 800c168:	700a      	strb	r2, [r1, #0]
 800c16a:	2001      	movs	r0, #1
 800c16c:	4770      	bx	lr
	...

0800c170 <fiprintf>:
 800c170:	b40e      	push	{r1, r2, r3}
 800c172:	b503      	push	{r0, r1, lr}
 800c174:	4601      	mov	r1, r0
 800c176:	ab03      	add	r3, sp, #12
 800c178:	4805      	ldr	r0, [pc, #20]	@ (800c190 <fiprintf+0x20>)
 800c17a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c17e:	6800      	ldr	r0, [r0, #0]
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	f000 f83f 	bl	800c204 <_vfiprintf_r>
 800c186:	b002      	add	sp, #8
 800c188:	f85d eb04 	ldr.w	lr, [sp], #4
 800c18c:	b003      	add	sp, #12
 800c18e:	4770      	bx	lr
 800c190:	2000001c 	.word	0x2000001c

0800c194 <abort>:
 800c194:	b508      	push	{r3, lr}
 800c196:	2006      	movs	r0, #6
 800c198:	f000 fa08 	bl	800c5ac <raise>
 800c19c:	2001      	movs	r0, #1
 800c19e:	f7f5 ff2f 	bl	8002000 <_exit>

0800c1a2 <_malloc_usable_size_r>:
 800c1a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1a6:	1f18      	subs	r0, r3, #4
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	bfbc      	itt	lt
 800c1ac:	580b      	ldrlt	r3, [r1, r0]
 800c1ae:	18c0      	addlt	r0, r0, r3
 800c1b0:	4770      	bx	lr

0800c1b2 <__sfputc_r>:
 800c1b2:	6893      	ldr	r3, [r2, #8]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	b410      	push	{r4}
 800c1ba:	6093      	str	r3, [r2, #8]
 800c1bc:	da08      	bge.n	800c1d0 <__sfputc_r+0x1e>
 800c1be:	6994      	ldr	r4, [r2, #24]
 800c1c0:	42a3      	cmp	r3, r4
 800c1c2:	db01      	blt.n	800c1c8 <__sfputc_r+0x16>
 800c1c4:	290a      	cmp	r1, #10
 800c1c6:	d103      	bne.n	800c1d0 <__sfputc_r+0x1e>
 800c1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1cc:	f000 b932 	b.w	800c434 <__swbuf_r>
 800c1d0:	6813      	ldr	r3, [r2, #0]
 800c1d2:	1c58      	adds	r0, r3, #1
 800c1d4:	6010      	str	r0, [r2, #0]
 800c1d6:	7019      	strb	r1, [r3, #0]
 800c1d8:	4608      	mov	r0, r1
 800c1da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <__sfputs_r>:
 800c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	460f      	mov	r7, r1
 800c1e6:	4614      	mov	r4, r2
 800c1e8:	18d5      	adds	r5, r2, r3
 800c1ea:	42ac      	cmp	r4, r5
 800c1ec:	d101      	bne.n	800c1f2 <__sfputs_r+0x12>
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	e007      	b.n	800c202 <__sfputs_r+0x22>
 800c1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f6:	463a      	mov	r2, r7
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	f7ff ffda 	bl	800c1b2 <__sfputc_r>
 800c1fe:	1c43      	adds	r3, r0, #1
 800c200:	d1f3      	bne.n	800c1ea <__sfputs_r+0xa>
 800c202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c204 <_vfiprintf_r>:
 800c204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c208:	460d      	mov	r5, r1
 800c20a:	b09d      	sub	sp, #116	@ 0x74
 800c20c:	4614      	mov	r4, r2
 800c20e:	4698      	mov	r8, r3
 800c210:	4606      	mov	r6, r0
 800c212:	b118      	cbz	r0, 800c21c <_vfiprintf_r+0x18>
 800c214:	6a03      	ldr	r3, [r0, #32]
 800c216:	b90b      	cbnz	r3, 800c21c <_vfiprintf_r+0x18>
 800c218:	f7fe f900 	bl	800a41c <__sinit>
 800c21c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c21e:	07d9      	lsls	r1, r3, #31
 800c220:	d405      	bmi.n	800c22e <_vfiprintf_r+0x2a>
 800c222:	89ab      	ldrh	r3, [r5, #12]
 800c224:	059a      	lsls	r2, r3, #22
 800c226:	d402      	bmi.n	800c22e <_vfiprintf_r+0x2a>
 800c228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c22a:	f7fe fa10 	bl	800a64e <__retarget_lock_acquire_recursive>
 800c22e:	89ab      	ldrh	r3, [r5, #12]
 800c230:	071b      	lsls	r3, r3, #28
 800c232:	d501      	bpl.n	800c238 <_vfiprintf_r+0x34>
 800c234:	692b      	ldr	r3, [r5, #16]
 800c236:	b99b      	cbnz	r3, 800c260 <_vfiprintf_r+0x5c>
 800c238:	4629      	mov	r1, r5
 800c23a:	4630      	mov	r0, r6
 800c23c:	f000 f938 	bl	800c4b0 <__swsetup_r>
 800c240:	b170      	cbz	r0, 800c260 <_vfiprintf_r+0x5c>
 800c242:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c244:	07dc      	lsls	r4, r3, #31
 800c246:	d504      	bpl.n	800c252 <_vfiprintf_r+0x4e>
 800c248:	f04f 30ff 	mov.w	r0, #4294967295
 800c24c:	b01d      	add	sp, #116	@ 0x74
 800c24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c252:	89ab      	ldrh	r3, [r5, #12]
 800c254:	0598      	lsls	r0, r3, #22
 800c256:	d4f7      	bmi.n	800c248 <_vfiprintf_r+0x44>
 800c258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c25a:	f7fe f9f9 	bl	800a650 <__retarget_lock_release_recursive>
 800c25e:	e7f3      	b.n	800c248 <_vfiprintf_r+0x44>
 800c260:	2300      	movs	r3, #0
 800c262:	9309      	str	r3, [sp, #36]	@ 0x24
 800c264:	2320      	movs	r3, #32
 800c266:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c26a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c26e:	2330      	movs	r3, #48	@ 0x30
 800c270:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c420 <_vfiprintf_r+0x21c>
 800c274:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c278:	f04f 0901 	mov.w	r9, #1
 800c27c:	4623      	mov	r3, r4
 800c27e:	469a      	mov	sl, r3
 800c280:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c284:	b10a      	cbz	r2, 800c28a <_vfiprintf_r+0x86>
 800c286:	2a25      	cmp	r2, #37	@ 0x25
 800c288:	d1f9      	bne.n	800c27e <_vfiprintf_r+0x7a>
 800c28a:	ebba 0b04 	subs.w	fp, sl, r4
 800c28e:	d00b      	beq.n	800c2a8 <_vfiprintf_r+0xa4>
 800c290:	465b      	mov	r3, fp
 800c292:	4622      	mov	r2, r4
 800c294:	4629      	mov	r1, r5
 800c296:	4630      	mov	r0, r6
 800c298:	f7ff ffa2 	bl	800c1e0 <__sfputs_r>
 800c29c:	3001      	adds	r0, #1
 800c29e:	f000 80a7 	beq.w	800c3f0 <_vfiprintf_r+0x1ec>
 800c2a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2a4:	445a      	add	r2, fp
 800c2a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f000 809f 	beq.w	800c3f0 <_vfiprintf_r+0x1ec>
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2bc:	f10a 0a01 	add.w	sl, sl, #1
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	9307      	str	r3, [sp, #28]
 800c2c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2ca:	4654      	mov	r4, sl
 800c2cc:	2205      	movs	r2, #5
 800c2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d2:	4853      	ldr	r0, [pc, #332]	@ (800c420 <_vfiprintf_r+0x21c>)
 800c2d4:	f7f3 ff84 	bl	80001e0 <memchr>
 800c2d8:	9a04      	ldr	r2, [sp, #16]
 800c2da:	b9d8      	cbnz	r0, 800c314 <_vfiprintf_r+0x110>
 800c2dc:	06d1      	lsls	r1, r2, #27
 800c2de:	bf44      	itt	mi
 800c2e0:	2320      	movmi	r3, #32
 800c2e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2e6:	0713      	lsls	r3, r2, #28
 800c2e8:	bf44      	itt	mi
 800c2ea:	232b      	movmi	r3, #43	@ 0x2b
 800c2ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2f6:	d015      	beq.n	800c324 <_vfiprintf_r+0x120>
 800c2f8:	9a07      	ldr	r2, [sp, #28]
 800c2fa:	4654      	mov	r4, sl
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	f04f 0c0a 	mov.w	ip, #10
 800c302:	4621      	mov	r1, r4
 800c304:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c308:	3b30      	subs	r3, #48	@ 0x30
 800c30a:	2b09      	cmp	r3, #9
 800c30c:	d94b      	bls.n	800c3a6 <_vfiprintf_r+0x1a2>
 800c30e:	b1b0      	cbz	r0, 800c33e <_vfiprintf_r+0x13a>
 800c310:	9207      	str	r2, [sp, #28]
 800c312:	e014      	b.n	800c33e <_vfiprintf_r+0x13a>
 800c314:	eba0 0308 	sub.w	r3, r0, r8
 800c318:	fa09 f303 	lsl.w	r3, r9, r3
 800c31c:	4313      	orrs	r3, r2
 800c31e:	9304      	str	r3, [sp, #16]
 800c320:	46a2      	mov	sl, r4
 800c322:	e7d2      	b.n	800c2ca <_vfiprintf_r+0xc6>
 800c324:	9b03      	ldr	r3, [sp, #12]
 800c326:	1d19      	adds	r1, r3, #4
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	9103      	str	r1, [sp, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	bfbb      	ittet	lt
 800c330:	425b      	neglt	r3, r3
 800c332:	f042 0202 	orrlt.w	r2, r2, #2
 800c336:	9307      	strge	r3, [sp, #28]
 800c338:	9307      	strlt	r3, [sp, #28]
 800c33a:	bfb8      	it	lt
 800c33c:	9204      	strlt	r2, [sp, #16]
 800c33e:	7823      	ldrb	r3, [r4, #0]
 800c340:	2b2e      	cmp	r3, #46	@ 0x2e
 800c342:	d10a      	bne.n	800c35a <_vfiprintf_r+0x156>
 800c344:	7863      	ldrb	r3, [r4, #1]
 800c346:	2b2a      	cmp	r3, #42	@ 0x2a
 800c348:	d132      	bne.n	800c3b0 <_vfiprintf_r+0x1ac>
 800c34a:	9b03      	ldr	r3, [sp, #12]
 800c34c:	1d1a      	adds	r2, r3, #4
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	9203      	str	r2, [sp, #12]
 800c352:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c356:	3402      	adds	r4, #2
 800c358:	9305      	str	r3, [sp, #20]
 800c35a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c430 <_vfiprintf_r+0x22c>
 800c35e:	7821      	ldrb	r1, [r4, #0]
 800c360:	2203      	movs	r2, #3
 800c362:	4650      	mov	r0, sl
 800c364:	f7f3 ff3c 	bl	80001e0 <memchr>
 800c368:	b138      	cbz	r0, 800c37a <_vfiprintf_r+0x176>
 800c36a:	9b04      	ldr	r3, [sp, #16]
 800c36c:	eba0 000a 	sub.w	r0, r0, sl
 800c370:	2240      	movs	r2, #64	@ 0x40
 800c372:	4082      	lsls	r2, r0
 800c374:	4313      	orrs	r3, r2
 800c376:	3401      	adds	r4, #1
 800c378:	9304      	str	r3, [sp, #16]
 800c37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c37e:	4829      	ldr	r0, [pc, #164]	@ (800c424 <_vfiprintf_r+0x220>)
 800c380:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c384:	2206      	movs	r2, #6
 800c386:	f7f3 ff2b 	bl	80001e0 <memchr>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d03f      	beq.n	800c40e <_vfiprintf_r+0x20a>
 800c38e:	4b26      	ldr	r3, [pc, #152]	@ (800c428 <_vfiprintf_r+0x224>)
 800c390:	bb1b      	cbnz	r3, 800c3da <_vfiprintf_r+0x1d6>
 800c392:	9b03      	ldr	r3, [sp, #12]
 800c394:	3307      	adds	r3, #7
 800c396:	f023 0307 	bic.w	r3, r3, #7
 800c39a:	3308      	adds	r3, #8
 800c39c:	9303      	str	r3, [sp, #12]
 800c39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3a0:	443b      	add	r3, r7
 800c3a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3a4:	e76a      	b.n	800c27c <_vfiprintf_r+0x78>
 800c3a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	2001      	movs	r0, #1
 800c3ae:	e7a8      	b.n	800c302 <_vfiprintf_r+0xfe>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	3401      	adds	r4, #1
 800c3b4:	9305      	str	r3, [sp, #20]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	f04f 0c0a 	mov.w	ip, #10
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3c2:	3a30      	subs	r2, #48	@ 0x30
 800c3c4:	2a09      	cmp	r2, #9
 800c3c6:	d903      	bls.n	800c3d0 <_vfiprintf_r+0x1cc>
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0c6      	beq.n	800c35a <_vfiprintf_r+0x156>
 800c3cc:	9105      	str	r1, [sp, #20]
 800c3ce:	e7c4      	b.n	800c35a <_vfiprintf_r+0x156>
 800c3d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e7f0      	b.n	800c3bc <_vfiprintf_r+0x1b8>
 800c3da:	ab03      	add	r3, sp, #12
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	462a      	mov	r2, r5
 800c3e0:	4b12      	ldr	r3, [pc, #72]	@ (800c42c <_vfiprintf_r+0x228>)
 800c3e2:	a904      	add	r1, sp, #16
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f7fd fbd7 	bl	8009b98 <_printf_float>
 800c3ea:	4607      	mov	r7, r0
 800c3ec:	1c78      	adds	r0, r7, #1
 800c3ee:	d1d6      	bne.n	800c39e <_vfiprintf_r+0x19a>
 800c3f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3f2:	07d9      	lsls	r1, r3, #31
 800c3f4:	d405      	bmi.n	800c402 <_vfiprintf_r+0x1fe>
 800c3f6:	89ab      	ldrh	r3, [r5, #12]
 800c3f8:	059a      	lsls	r2, r3, #22
 800c3fa:	d402      	bmi.n	800c402 <_vfiprintf_r+0x1fe>
 800c3fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3fe:	f7fe f927 	bl	800a650 <__retarget_lock_release_recursive>
 800c402:	89ab      	ldrh	r3, [r5, #12]
 800c404:	065b      	lsls	r3, r3, #25
 800c406:	f53f af1f 	bmi.w	800c248 <_vfiprintf_r+0x44>
 800c40a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c40c:	e71e      	b.n	800c24c <_vfiprintf_r+0x48>
 800c40e:	ab03      	add	r3, sp, #12
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	462a      	mov	r2, r5
 800c414:	4b05      	ldr	r3, [pc, #20]	@ (800c42c <_vfiprintf_r+0x228>)
 800c416:	a904      	add	r1, sp, #16
 800c418:	4630      	mov	r0, r6
 800c41a:	f7fd fe55 	bl	800a0c8 <_printf_i>
 800c41e:	e7e4      	b.n	800c3ea <_vfiprintf_r+0x1e6>
 800c420:	0800c9de 	.word	0x0800c9de
 800c424:	0800c9e8 	.word	0x0800c9e8
 800c428:	08009b99 	.word	0x08009b99
 800c42c:	0800c1e1 	.word	0x0800c1e1
 800c430:	0800c9e4 	.word	0x0800c9e4

0800c434 <__swbuf_r>:
 800c434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c436:	460e      	mov	r6, r1
 800c438:	4614      	mov	r4, r2
 800c43a:	4605      	mov	r5, r0
 800c43c:	b118      	cbz	r0, 800c446 <__swbuf_r+0x12>
 800c43e:	6a03      	ldr	r3, [r0, #32]
 800c440:	b90b      	cbnz	r3, 800c446 <__swbuf_r+0x12>
 800c442:	f7fd ffeb 	bl	800a41c <__sinit>
 800c446:	69a3      	ldr	r3, [r4, #24]
 800c448:	60a3      	str	r3, [r4, #8]
 800c44a:	89a3      	ldrh	r3, [r4, #12]
 800c44c:	071a      	lsls	r2, r3, #28
 800c44e:	d501      	bpl.n	800c454 <__swbuf_r+0x20>
 800c450:	6923      	ldr	r3, [r4, #16]
 800c452:	b943      	cbnz	r3, 800c466 <__swbuf_r+0x32>
 800c454:	4621      	mov	r1, r4
 800c456:	4628      	mov	r0, r5
 800c458:	f000 f82a 	bl	800c4b0 <__swsetup_r>
 800c45c:	b118      	cbz	r0, 800c466 <__swbuf_r+0x32>
 800c45e:	f04f 37ff 	mov.w	r7, #4294967295
 800c462:	4638      	mov	r0, r7
 800c464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	6922      	ldr	r2, [r4, #16]
 800c46a:	1a98      	subs	r0, r3, r2
 800c46c:	6963      	ldr	r3, [r4, #20]
 800c46e:	b2f6      	uxtb	r6, r6
 800c470:	4283      	cmp	r3, r0
 800c472:	4637      	mov	r7, r6
 800c474:	dc05      	bgt.n	800c482 <__swbuf_r+0x4e>
 800c476:	4621      	mov	r1, r4
 800c478:	4628      	mov	r0, r5
 800c47a:	f7ff fda7 	bl	800bfcc <_fflush_r>
 800c47e:	2800      	cmp	r0, #0
 800c480:	d1ed      	bne.n	800c45e <__swbuf_r+0x2a>
 800c482:	68a3      	ldr	r3, [r4, #8]
 800c484:	3b01      	subs	r3, #1
 800c486:	60a3      	str	r3, [r4, #8]
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	1c5a      	adds	r2, r3, #1
 800c48c:	6022      	str	r2, [r4, #0]
 800c48e:	701e      	strb	r6, [r3, #0]
 800c490:	6962      	ldr	r2, [r4, #20]
 800c492:	1c43      	adds	r3, r0, #1
 800c494:	429a      	cmp	r2, r3
 800c496:	d004      	beq.n	800c4a2 <__swbuf_r+0x6e>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	07db      	lsls	r3, r3, #31
 800c49c:	d5e1      	bpl.n	800c462 <__swbuf_r+0x2e>
 800c49e:	2e0a      	cmp	r6, #10
 800c4a0:	d1df      	bne.n	800c462 <__swbuf_r+0x2e>
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f7ff fd91 	bl	800bfcc <_fflush_r>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d0d9      	beq.n	800c462 <__swbuf_r+0x2e>
 800c4ae:	e7d6      	b.n	800c45e <__swbuf_r+0x2a>

0800c4b0 <__swsetup_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	4b29      	ldr	r3, [pc, #164]	@ (800c558 <__swsetup_r+0xa8>)
 800c4b4:	4605      	mov	r5, r0
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	b118      	cbz	r0, 800c4c4 <__swsetup_r+0x14>
 800c4bc:	6a03      	ldr	r3, [r0, #32]
 800c4be:	b90b      	cbnz	r3, 800c4c4 <__swsetup_r+0x14>
 800c4c0:	f7fd ffac 	bl	800a41c <__sinit>
 800c4c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c8:	0719      	lsls	r1, r3, #28
 800c4ca:	d422      	bmi.n	800c512 <__swsetup_r+0x62>
 800c4cc:	06da      	lsls	r2, r3, #27
 800c4ce:	d407      	bmi.n	800c4e0 <__swsetup_r+0x30>
 800c4d0:	2209      	movs	r2, #9
 800c4d2:	602a      	str	r2, [r5, #0]
 800c4d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4d8:	81a3      	strh	r3, [r4, #12]
 800c4da:	f04f 30ff 	mov.w	r0, #4294967295
 800c4de:	e033      	b.n	800c548 <__swsetup_r+0x98>
 800c4e0:	0758      	lsls	r0, r3, #29
 800c4e2:	d512      	bpl.n	800c50a <__swsetup_r+0x5a>
 800c4e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4e6:	b141      	cbz	r1, 800c4fa <__swsetup_r+0x4a>
 800c4e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4ec:	4299      	cmp	r1, r3
 800c4ee:	d002      	beq.n	800c4f6 <__swsetup_r+0x46>
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	f7fe ff15 	bl	800b320 <_free_r>
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4fa:	89a3      	ldrh	r3, [r4, #12]
 800c4fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c500:	81a3      	strh	r3, [r4, #12]
 800c502:	2300      	movs	r3, #0
 800c504:	6063      	str	r3, [r4, #4]
 800c506:	6923      	ldr	r3, [r4, #16]
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	f043 0308 	orr.w	r3, r3, #8
 800c510:	81a3      	strh	r3, [r4, #12]
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	b94b      	cbnz	r3, 800c52a <__swsetup_r+0x7a>
 800c516:	89a3      	ldrh	r3, [r4, #12]
 800c518:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c51c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c520:	d003      	beq.n	800c52a <__swsetup_r+0x7a>
 800c522:	4621      	mov	r1, r4
 800c524:	4628      	mov	r0, r5
 800c526:	f000 f883 	bl	800c630 <__smakebuf_r>
 800c52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c52e:	f013 0201 	ands.w	r2, r3, #1
 800c532:	d00a      	beq.n	800c54a <__swsetup_r+0x9a>
 800c534:	2200      	movs	r2, #0
 800c536:	60a2      	str	r2, [r4, #8]
 800c538:	6962      	ldr	r2, [r4, #20]
 800c53a:	4252      	negs	r2, r2
 800c53c:	61a2      	str	r2, [r4, #24]
 800c53e:	6922      	ldr	r2, [r4, #16]
 800c540:	b942      	cbnz	r2, 800c554 <__swsetup_r+0xa4>
 800c542:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c546:	d1c5      	bne.n	800c4d4 <__swsetup_r+0x24>
 800c548:	bd38      	pop	{r3, r4, r5, pc}
 800c54a:	0799      	lsls	r1, r3, #30
 800c54c:	bf58      	it	pl
 800c54e:	6962      	ldrpl	r2, [r4, #20]
 800c550:	60a2      	str	r2, [r4, #8]
 800c552:	e7f4      	b.n	800c53e <__swsetup_r+0x8e>
 800c554:	2000      	movs	r0, #0
 800c556:	e7f7      	b.n	800c548 <__swsetup_r+0x98>
 800c558:	2000001c 	.word	0x2000001c

0800c55c <_raise_r>:
 800c55c:	291f      	cmp	r1, #31
 800c55e:	b538      	push	{r3, r4, r5, lr}
 800c560:	4605      	mov	r5, r0
 800c562:	460c      	mov	r4, r1
 800c564:	d904      	bls.n	800c570 <_raise_r+0x14>
 800c566:	2316      	movs	r3, #22
 800c568:	6003      	str	r3, [r0, #0]
 800c56a:	f04f 30ff 	mov.w	r0, #4294967295
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c572:	b112      	cbz	r2, 800c57a <_raise_r+0x1e>
 800c574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c578:	b94b      	cbnz	r3, 800c58e <_raise_r+0x32>
 800c57a:	4628      	mov	r0, r5
 800c57c:	f000 f830 	bl	800c5e0 <_getpid_r>
 800c580:	4622      	mov	r2, r4
 800c582:	4601      	mov	r1, r0
 800c584:	4628      	mov	r0, r5
 800c586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c58a:	f000 b817 	b.w	800c5bc <_kill_r>
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d00a      	beq.n	800c5a8 <_raise_r+0x4c>
 800c592:	1c59      	adds	r1, r3, #1
 800c594:	d103      	bne.n	800c59e <_raise_r+0x42>
 800c596:	2316      	movs	r3, #22
 800c598:	6003      	str	r3, [r0, #0]
 800c59a:	2001      	movs	r0, #1
 800c59c:	e7e7      	b.n	800c56e <_raise_r+0x12>
 800c59e:	2100      	movs	r1, #0
 800c5a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	4798      	blx	r3
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e7e0      	b.n	800c56e <_raise_r+0x12>

0800c5ac <raise>:
 800c5ac:	4b02      	ldr	r3, [pc, #8]	@ (800c5b8 <raise+0xc>)
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	6818      	ldr	r0, [r3, #0]
 800c5b2:	f7ff bfd3 	b.w	800c55c <_raise_r>
 800c5b6:	bf00      	nop
 800c5b8:	2000001c 	.word	0x2000001c

0800c5bc <_kill_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4d07      	ldr	r5, [pc, #28]	@ (800c5dc <_kill_r+0x20>)
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	602b      	str	r3, [r5, #0]
 800c5ca:	f7f5 fd09 	bl	8001fe0 <_kill>
 800c5ce:	1c43      	adds	r3, r0, #1
 800c5d0:	d102      	bne.n	800c5d8 <_kill_r+0x1c>
 800c5d2:	682b      	ldr	r3, [r5, #0]
 800c5d4:	b103      	cbz	r3, 800c5d8 <_kill_r+0x1c>
 800c5d6:	6023      	str	r3, [r4, #0]
 800c5d8:	bd38      	pop	{r3, r4, r5, pc}
 800c5da:	bf00      	nop
 800c5dc:	200050cc 	.word	0x200050cc

0800c5e0 <_getpid_r>:
 800c5e0:	f7f5 bcf6 	b.w	8001fd0 <_getpid>

0800c5e4 <__swhatbuf_r>:
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ec:	2900      	cmp	r1, #0
 800c5ee:	b096      	sub	sp, #88	@ 0x58
 800c5f0:	4615      	mov	r5, r2
 800c5f2:	461e      	mov	r6, r3
 800c5f4:	da0d      	bge.n	800c612 <__swhatbuf_r+0x2e>
 800c5f6:	89a3      	ldrh	r3, [r4, #12]
 800c5f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5fc:	f04f 0100 	mov.w	r1, #0
 800c600:	bf14      	ite	ne
 800c602:	2340      	movne	r3, #64	@ 0x40
 800c604:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c608:	2000      	movs	r0, #0
 800c60a:	6031      	str	r1, [r6, #0]
 800c60c:	602b      	str	r3, [r5, #0]
 800c60e:	b016      	add	sp, #88	@ 0x58
 800c610:	bd70      	pop	{r4, r5, r6, pc}
 800c612:	466a      	mov	r2, sp
 800c614:	f000 f848 	bl	800c6a8 <_fstat_r>
 800c618:	2800      	cmp	r0, #0
 800c61a:	dbec      	blt.n	800c5f6 <__swhatbuf_r+0x12>
 800c61c:	9901      	ldr	r1, [sp, #4]
 800c61e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c622:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c626:	4259      	negs	r1, r3
 800c628:	4159      	adcs	r1, r3
 800c62a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c62e:	e7eb      	b.n	800c608 <__swhatbuf_r+0x24>

0800c630 <__smakebuf_r>:
 800c630:	898b      	ldrh	r3, [r1, #12]
 800c632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c634:	079d      	lsls	r5, r3, #30
 800c636:	4606      	mov	r6, r0
 800c638:	460c      	mov	r4, r1
 800c63a:	d507      	bpl.n	800c64c <__smakebuf_r+0x1c>
 800c63c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	6123      	str	r3, [r4, #16]
 800c644:	2301      	movs	r3, #1
 800c646:	6163      	str	r3, [r4, #20]
 800c648:	b003      	add	sp, #12
 800c64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c64c:	ab01      	add	r3, sp, #4
 800c64e:	466a      	mov	r2, sp
 800c650:	f7ff ffc8 	bl	800c5e4 <__swhatbuf_r>
 800c654:	9f00      	ldr	r7, [sp, #0]
 800c656:	4605      	mov	r5, r0
 800c658:	4639      	mov	r1, r7
 800c65a:	4630      	mov	r0, r6
 800c65c:	f7fe fed4 	bl	800b408 <_malloc_r>
 800c660:	b948      	cbnz	r0, 800c676 <__smakebuf_r+0x46>
 800c662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c666:	059a      	lsls	r2, r3, #22
 800c668:	d4ee      	bmi.n	800c648 <__smakebuf_r+0x18>
 800c66a:	f023 0303 	bic.w	r3, r3, #3
 800c66e:	f043 0302 	orr.w	r3, r3, #2
 800c672:	81a3      	strh	r3, [r4, #12]
 800c674:	e7e2      	b.n	800c63c <__smakebuf_r+0xc>
 800c676:	89a3      	ldrh	r3, [r4, #12]
 800c678:	6020      	str	r0, [r4, #0]
 800c67a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c67e:	81a3      	strh	r3, [r4, #12]
 800c680:	9b01      	ldr	r3, [sp, #4]
 800c682:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c686:	b15b      	cbz	r3, 800c6a0 <__smakebuf_r+0x70>
 800c688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c68c:	4630      	mov	r0, r6
 800c68e:	f000 f81d 	bl	800c6cc <_isatty_r>
 800c692:	b128      	cbz	r0, 800c6a0 <__smakebuf_r+0x70>
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	f023 0303 	bic.w	r3, r3, #3
 800c69a:	f043 0301 	orr.w	r3, r3, #1
 800c69e:	81a3      	strh	r3, [r4, #12]
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	431d      	orrs	r5, r3
 800c6a4:	81a5      	strh	r5, [r4, #12]
 800c6a6:	e7cf      	b.n	800c648 <__smakebuf_r+0x18>

0800c6a8 <_fstat_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	4d07      	ldr	r5, [pc, #28]	@ (800c6c8 <_fstat_r+0x20>)
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	4611      	mov	r1, r2
 800c6b4:	602b      	str	r3, [r5, #0]
 800c6b6:	f7f5 fcf3 	bl	80020a0 <_fstat>
 800c6ba:	1c43      	adds	r3, r0, #1
 800c6bc:	d102      	bne.n	800c6c4 <_fstat_r+0x1c>
 800c6be:	682b      	ldr	r3, [r5, #0]
 800c6c0:	b103      	cbz	r3, 800c6c4 <_fstat_r+0x1c>
 800c6c2:	6023      	str	r3, [r4, #0]
 800c6c4:	bd38      	pop	{r3, r4, r5, pc}
 800c6c6:	bf00      	nop
 800c6c8:	200050cc 	.word	0x200050cc

0800c6cc <_isatty_r>:
 800c6cc:	b538      	push	{r3, r4, r5, lr}
 800c6ce:	4d06      	ldr	r5, [pc, #24]	@ (800c6e8 <_isatty_r+0x1c>)
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	4608      	mov	r0, r1
 800c6d6:	602b      	str	r3, [r5, #0]
 800c6d8:	f7f5 fcf2 	bl	80020c0 <_isatty>
 800c6dc:	1c43      	adds	r3, r0, #1
 800c6de:	d102      	bne.n	800c6e6 <_isatty_r+0x1a>
 800c6e0:	682b      	ldr	r3, [r5, #0]
 800c6e2:	b103      	cbz	r3, 800c6e6 <_isatty_r+0x1a>
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	bd38      	pop	{r3, r4, r5, pc}
 800c6e8:	200050cc 	.word	0x200050cc

0800c6ec <_init>:
 800c6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ee:	bf00      	nop
 800c6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6f2:	bc08      	pop	{r3}
 800c6f4:	469e      	mov	lr, r3
 800c6f6:	4770      	bx	lr

0800c6f8 <_fini>:
 800c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fa:	bf00      	nop
 800c6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6fe:	bc08      	pop	{r3}
 800c700:	469e      	mov	lr, r3
 800c702:	4770      	bx	lr
